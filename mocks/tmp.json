{
  "results": [
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/.eslintrc.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/babel.config.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/jest.config.base.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/jest.config.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-activity-lifecycle/jest.config.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-activity-lifecycle/src/index.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-analytics/jest.config.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-analytics/src/events.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-analytics/src/getGtmTagScript.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-analytics/src/index.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-analytics/src/utils.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-configuration/bin/bootstrap-config.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-configuration/build.d.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-configuration/build.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-configuration/constants.d.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-configuration/constants.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-configuration/jest.config.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-configuration/schemas/chapter.schema.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-configuration/schemas/config.schema.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-configuration/scripts/build.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-configuration/scripts/init.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-configuration/scripts/utils/displayJoiErrors.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-configuration/scripts/utils/getAbsolutePath.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-configuration/scripts/utils/getFileContent.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-configuration/scripts/validate.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-configuration/src/build.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-configuration/src/build/configPerEnvironment.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-configuration/src/build/defaultChapters.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-configuration/src/build/getDefaultConfiguration.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-configuration/src/chapters.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-configuration/src/constants.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-configuration/src/fetchRuntimeConfiguration.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-configuration/src/index.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-configuration/src/normalizeDisabledChapters.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-configuration/src/utils.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-dynamic-base-url/jest.config.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-dynamic-base-url/src/dazn-types.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-dynamic-base-url/src/handler.ts",
      "messages": [
        {
          "ruleId": "max-statements",
          "severity": 1,
          "message": "Function 'subscribeToChanges' has too many statements (13). Maximum allowed is 12.",
          "line": 85,
          "column": 13,
          "nodeType": "FunctionDeclaration",
          "messageId": "exceed",
          "endLine": 156,
          "endColumn": 14
        }
      ],
      "errorCount": 0,
      "warningCount": 1,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "import { boot } from '@dazn/bootstrap-lib';\nimport { BootstrapKeyDownEvents, BootstrapEvent } from './dazn-types';\n\nimport {\n    OverlayController,\n    PredefinedEnvironment,\n    ConfigOverride,\n} from './overlay/overlayController';\n\nexport interface InitHandlerProps {\n    predefinedEnvironments: PredefinedEnvironment[];\n    resourcesBaseUrlStorageKey: string;\n    appEntryPointStorageKey?: string;\n    storage: boot.storage.AsyncStorage;\n    reloadApp?: () => void;\n    loadUrl?: (url: string) => void;\n    checkSameOrigin?: (url: string) => boolean;\n}\n\nexport function initHandler(props: InitHandlerProps) {\n    const defaultLoadUrl = (url: string) => (window.location.href = url);\n    const defaultCheckSameUrl = (url: string) =>\n        window.location.href.indexOf(url) !== -1;\n    const reloadApp = props.reloadApp || location.reload;\n    const loadUrl = props.loadUrl || defaultLoadUrl;\n    const checkSameUrl = props.checkSameOrigin || defaultCheckSameUrl;\n    const appEntryPointStorageKey =\n        props.appEntryPointStorageKey || 'appEntryPointStorageKey';\n\n    let preventEvent = false;\n    let lastEventTime = 0;\n    let eventsHistory: BootstrapKeyDownEvents[] = [];\n\n    return Promise.resolve(props.storage.getItem(appEntryPointStorageKey))\n        .then(startUrl => {\n            if (startUrl && !checkSameUrl(startUrl)) {\n                loadUrl(startUrl);\n            }\n        })\n        .catch(e => console.log(e))\n        .then(() => {\n            // -> -> <- <- ^\n            const expectedCombination = [\n                window.dazn.event.right.KEYDOWN,\n                window.dazn.event.right.KEYDOWN,\n                window.dazn.event.left.KEYDOWN,\n                window.dazn.event.left.KEYDOWN,\n                window.dazn.event.up.KEYDOWN,\n            ].join();\n\n            const withinTime = 3000;\n\n            const overlayController = new OverlayController({\n                onApply,\n                onCancel,\n                predefinedEnvironments: props.predefinedEnvironments,\n                resourcesBaseUrlStorageKey: props.resourcesBaseUrlStorageKey,\n                appEntryPointStorageKey,\n            });\n\n            function onApply(configOverride: ConfigOverride) {\n                if (configOverride.url) {\n                    props.storage.setItem(\n                        configOverride.key,\n                        configOverride.url,\n                    );\n                    reloadApp();\n                }\n\n                if (configOverride.url === '') {\n                    props.storage.removeItem(configOverride.key);\n                    reloadApp();\n                }\n            }\n\n            function onCancel() {\n                if (overlayController.isEnabled) {\n                    overlayController.disable();\n                }\n\n                eventsHistory = [];\n                preventEvent = false;\n            }\n\n            function subscribeToChanges() {\n                const selectHandler = createNamedKeyEventHandler(\n                    window.dazn.event.select.KEYDOWN,\n                );\n                const backHandler = createNamedKeyEventHandler(\n                    window.dazn.event.back.KEYDOWN,\n                );\n                const upHandler = createNamedKeyEventHandler(\n                    window.dazn.event.up.KEYDOWN,\n                );\n                const downHandler = createNamedKeyEventHandler(\n                    window.dazn.event.down.KEYDOWN,\n                );\n                const leftHandler = createNamedKeyEventHandler(\n                    window.dazn.event.left.KEYDOWN,\n                );\n                const rightHandler = createNamedKeyEventHandler(\n                    window.dazn.event.right.KEYDOWN,\n                );\n\n                document.addEventListener(\n                    window.dazn.event.select.KEYDOWN,\n                    selectHandler,\n                );\n                document.addEventListener(\n                    window.dazn.event.back.KEYDOWN,\n                    backHandler,\n                );\n                document.addEventListener(\n                    window.dazn.event.up.KEYDOWN,\n                    upHandler,\n                );\n                document.addEventListener(\n                    window.dazn.event.down.KEYDOWN,\n                    downHandler,\n                );\n                document.addEventListener(\n                    window.dazn.event.left.KEYDOWN,\n                    leftHandler,\n                );\n                document.addEventListener(\n                    window.dazn.event.right.KEYDOWN,\n                    rightHandler,\n                );\n\n                return () => {\n                    document.removeEventListener(\n                        window.dazn.event.select.KEYDOWN,\n                        selectHandler,\n                    );\n                    document.removeEventListener(\n                        window.dazn.event.back.KEYDOWN,\n                        backHandler,\n                    );\n                    document.removeEventListener(\n                        window.dazn.event.up.KEYDOWN,\n                        upHandler,\n                    );\n                    document.removeEventListener(\n                        window.dazn.event.down.KEYDOWN,\n                        downHandler,\n                    );\n                    document.removeEventListener(\n                        window.dazn.event.left.KEYDOWN,\n                        leftHandler,\n                    );\n                    document.removeEventListener(\n                        window.dazn.event.right.KEYDOWN,\n                        rightHandler,\n                    );\n                };\n            }\n\n            function createNamedKeyEventHandler(name: BootstrapKeyDownEvents) {\n                function handleKeyEvent(event: BootstrapEvent) {\n                    if (preventEvent) {\n                        event.stopPropagation();\n\n                        if (name === window.dazn.event.down.KEYDOWN) {\n                            overlayController.nextOption();\n                        }\n\n                        if (name === window.dazn.event.up.KEYDOWN) {\n                            overlayController.prevOption();\n                        }\n\n                        if (name === window.dazn.event.select.KEYDOWN) {\n                            overlayController.onSelect();\n                        }\n                    } else {\n                        eventsCollector(name);\n                    }\n\n                    return;\n                }\n\n                return handleKeyEvent;\n            }\n\n            function eventsCollector(name: BootstrapKeyDownEvents) {\n                const now = +Date.now();\n\n                if (now - lastEventTime >= withinTime) {\n                    lastEventTime = 0;\n                    eventsHistory = [];\n                }\n\n                lastEventTime = now;\n                eventsHistory.push(name);\n\n                // last 5 items\n                const lastCombination = eventsHistory\n                    .slice(Math.max(eventsHistory.length - 5, 0))\n                    .join();\n\n                if (lastCombination === expectedCombination) {\n                    preventEvent = true;\n\n                    if (!overlayController.isEnabled) {\n                        overlayController.enable();\n                    }\n                }\n\n                return;\n            }\n\n            return subscribeToChanges();\n        });\n}\n",
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-dynamic-base-url/src/index.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-dynamic-base-url/src/overlay/overlayController.ts",
      "messages": [
        {
          "ruleId": "complexity",
          "severity": 1,
          "message": "Method 'onSelect' has a complexity of 14. Maximum allowed is 10.",
          "line": 131,
          "column": 20,
          "nodeType": "FunctionExpression",
          "messageId": "complex",
          "endLine": 212,
          "endColumn": 6
        },
        {
          "ruleId": "max-statements",
          "severity": 1,
          "message": "Method 'onSelect' has too many statements (25). Maximum allowed is 12.",
          "line": 131,
          "column": 20,
          "nodeType": "FunctionExpression",
          "messageId": "exceed",
          "endLine": 212,
          "endColumn": 6
        }
      ],
      "errorCount": 0,
      "warningCount": 2,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "import html from './overlay.html';\n\nconst baseSelectorClassName = '.bootstrap-dynamic-base-url';\n\nfunction withBaseSelector(selector: string) {\n    return `${baseSelectorClassName} ${selector}`;\n}\n\nfunction selectElement(selector: string) {\n    return document.querySelector(withBaseSelector(selector));\n}\n\nfunction selectAllElements(selector: string) {\n    return document.querySelectorAll(withBaseSelector(selector));\n}\n\nenum OverlayElements {\n    Container = '.overlay',\n    Option = '.envOption',\n    ActiveOption = '.envOption.active',\n    SelectedOption = '.envOption.selected',\n    CustomEnvInput = '.inputEnv',\n    CustomAppStart = '.inputAppStartUrl',\n    PredefinedEnvironmentsContainer = '.predefinedEnv',\n}\n\nexport interface PredefinedEnvironment {\n    label: string;\n    url: string;\n}\n\nexport interface URLOverrides {\n    resourcesBaseUrl?: string | null;\n    appStartUrl?: string | null;\n}\n\nexport interface ConfigOverride {\n    key: string;\n    url?: string | null;\n}\n\ninterface OverlayControllerProps {\n    onApply: (configOverride: ConfigOverride) => void;\n    onCancel: () => void;\n    predefinedEnvironments: PredefinedEnvironment[];\n    resourceBaseUrl?: string;\n    appEntryPoint?: string;\n    resourcesBaseUrlStorageKey: string;\n    appEntryPointStorageKey: string;\n}\n\nexport class OverlayController {\n    private container: Element | null = null;\n    private activeOptionIndex = 0;\n    public isEnabled = false;\n    private props: OverlayControllerProps;\n\n    constructor(props: OverlayControllerProps) {\n        this.props = props;\n    }\n\n    public enable() {\n        if (!this.container) {\n            document.body.insertAdjacentHTML('beforeend', html);\n            this.container = selectElement(OverlayElements.Container)!;\n\n            const predefinedEnvironmentsContainer = selectElement(\n                OverlayElements.PredefinedEnvironmentsContainer,\n            )!;\n\n            predefinedEnvironmentsContainer.insertAdjacentHTML(\n                'beforeend',\n                this.props.predefinedEnvironments\n                    .map(\n                        (env, idx) => `\n                        <div \n                            class=\"envOption ${\n                                idx === this.activeOptionIndex ? 'selected' : ''\n                            }\" \n                            data-type=\"selectable\" \n                            data-value=\"${env.url}\"\n                        >\n                        ${env.label}\n                        </div>\n                    `,\n                    )\n                    .join(''),\n            );\n        }\n\n        this.isEnabled = true;\n        this.container && this.container.classList.add('visible');\n        this.updateOptionByActiveIndex();\n    }\n\n    public disable() {\n        this.isEnabled = false;\n        this.container && this.container.classList.remove('visible');\n    }\n\n    public nextOption() {\n        const options = selectAllElements(OverlayElements.Option);\n        if (this.activeOptionIndex < options.length - 1) {\n            this.activeOptionIndex++;\n        }\n\n        this.updateOptionByActiveIndex();\n    }\n\n    public prevOption() {\n        if (this.activeOptionIndex > 0) {\n            this.activeOptionIndex--;\n        }\n        this.updateOptionByActiveIndex();\n    }\n\n    private updateOptionByActiveIndex() {\n        const currentFocusElement = selectElement(OverlayElements.ActiveOption);\n\n        if (currentFocusElement) {\n            const input = currentFocusElement.querySelector('input');\n            currentFocusElement.classList.remove('active');\n\n            input && input.blur();\n        }\n\n        const options = selectAllElements(OverlayElements.Option);\n        options[this.activeOptionIndex].classList.add('active');\n    }\n\n    public onSelect() {\n        const currentActive = selectElement(OverlayElements.ActiveOption);\n        if (!currentActive) {\n            return;\n        }\n\n        const type = currentActive.getAttribute('data-type');\n\n        if (!type) {\n            return;\n        }\n\n        const onSelect = () => {\n            const prevSelected = selectElement('.selected');\n\n            if (prevSelected) {\n                prevSelected.classList.remove('selected');\n            }\n\n            currentActive.classList.add('selected');\n        };\n\n        switch (type) {\n            case 'selectable': {\n                onSelect();\n                break;\n            }\n            case 'customInput': {\n                onSelect();\n\n                const customEnvInput = selectElement(\n                    OverlayElements.CustomEnvInput,\n                ) as HTMLInputElement | null;\n                customEnvInput && customEnvInput.focus();\n                break;\n            }\n            case 'appStartUrl': {\n                onSelect();\n\n                const customAppStart = selectElement(\n                    OverlayElements.CustomAppStart,\n                ) as HTMLInputElement | null;\n                customAppStart && customAppStart.focus();\n                break;\n            }\n            case 'apply':\n                const currentSelected = selectElement(\n                    OverlayElements.SelectedOption,\n                );\n                if (currentSelected) {\n                    const dataType = currentSelected.getAttribute('data-type');\n                    if (dataType === 'selectable') {\n                        this.props.onApply({\n                            key: this.props.resourcesBaseUrlStorageKey,\n                            url: currentSelected.getAttribute('data-value'),\n                        });\n                    }\n\n                    if (dataType === 'customInput') {\n                        this.props.onApply({\n                            key: this.props.resourcesBaseUrlStorageKey,\n                            url: (selectElement(\n                                OverlayElements.CustomEnvInput,\n                            ) as HTMLInputElement).value,\n                        });\n                    }\n\n                    if (dataType === 'appStartUrl') {\n                        this.props.onApply({\n                            key: this.props.appEntryPointStorageKey,\n                            url: (selectElement(\n                                OverlayElements.CustomAppStart,\n                            ) as HTMLInputElement).value,\n                        });\n                    }\n                }\n                break;\n            case 'cancel':\n                this.props.onCancel();\n                break;\n        }\n    }\n}\n",
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-error-handling/jest.config.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-error-handling/src/endOfTheWorld/endOfTheWorld.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-error-handling/src/errorReporting/init.ts",
      "messages": [
        {
          "ruleId": "max-statements",
          "severity": 1,
          "message": "Arrow function has too many statements (17). Maximum allowed is 12.",
          "line": 23,
          "column": 27,
          "nodeType": "ArrowFunctionExpression",
          "messageId": "exceed",
          "endLine": 61,
          "endColumn": 2
        },
        {
          "ruleId": "max-params",
          "severity": 1,
          "message": "Arrow function has too many parameters (8). Maximum allowed is 5.",
          "line": 72,
          "column": 28,
          "nodeType": "ArrowFunctionExpression",
          "messageId": "exceed",
          "endLine": 72,
          "endColumn": 30
        }
      ],
      "errorCount": 0,
      "warningCount": 2,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "import Raven from 'raven-js';\nimport { boot } from '@dazn/bootstrap-lib';\n\n// we need to wrap this in function otherwise \"this\" inside captureException is not pointing to\n// Raven\nconst captureException = (exception: unknown, options?: Raven.RavenOptions) => {\n    Raven.captureException(exception, options);\n};\n\ntype GetVersions = () => boot.config.ChaptersVersions;\n\ninterface SentryDataEnv {\n    deviceModel?: string;\n    firmwareVersion?: string;\n    getCurrentChapter: () => boot.config.ChapterName;\n    getCurrentCountry: () => boot.config.AnyCountry;\n    getVersions: GetVersions;\n    platform: string;\n}\n\ntype SentryDataCode = Record<string, unknown>;\n\nconst enhanceSentryData = (\n    {\n        deviceModel,\n        firmwareVersion,\n        getCurrentChapter,\n        getCurrentCountry,\n        getVersions,\n        platform,\n    }: SentryDataEnv,\n    data: SentryDataCode,\n) => {\n    const tags: Record<string, unknown> = {};\n    if (!data.tags) {\n        data.tags = tags;\n    }\n\n    const chapter = getCurrentChapter();\n    const country = getCurrentCountry();\n    const version = getVersions();\n\n    data.release = `${platform}_bootstrap@${version.bootstrap}`;\n    tags.chapter = chapter;\n    tags.country = country;\n    tags.target = platform;\n\n    if (deviceModel) {\n        tags.deviceModel = deviceModel;\n    }\n\n    if (firmwareVersion) {\n        tags.firmwareVersion = firmwareVersion;\n    }\n\n    if (version[chapter]) {\n        data.release = `${platform}_${chapter}@${version[chapter]}`;\n    }\n\n    return data;\n};\n\nconst init = (\n    sentryUrl: string,\n    platform: string,\n    environment: string,\n    getCurrentChapter: () => boot.config.ChapterName,\n    getCurrentCountry: () => boot.config.AnyCountry,\n    getVersions: () => boot.config.ChaptersVersions,\n    deviceModel?: string,\n    firmwareVersion?: string,\n): typeof captureException => {\n    const enhanceDataCallback = (sdc: SentryDataCode) =>\n        enhanceSentryData(\n            {\n                deviceModel,\n                firmwareVersion,\n                getCurrentChapter,\n                getCurrentCountry,\n                getVersions,\n                platform,\n            },\n            sdc,\n        );\n\n    const ravenInstance = Raven.config(sentryUrl, {\n        environment,\n        autoBreadcrumbs: true,\n        dataCallback: enhanceDataCallback,\n    });\n\n    ravenInstance.install();\n    return captureException;\n};\n\nexport { init, captureException, GetVersions };\n",
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-error-handling/src/handleError.ts",
      "messages": [
        {
          "ruleId": "complexity",
          "severity": 1,
          "message": "Arrow function has a complexity of 13. Maximum allowed is 10.",
          "line": 56,
          "column": 21,
          "nodeType": "ArrowFunctionExpression",
          "messageId": "complex",
          "endLine": 150,
          "endColumn": 2
        },
        {
          "ruleId": "max-statements",
          "severity": 1,
          "message": "Arrow function has too many statements (23). Maximum allowed is 12.",
          "line": 56,
          "column": 21,
          "nodeType": "ArrowFunctionExpression",
          "messageId": "exceed",
          "endLine": 150,
          "endColumn": 2
        },
        {
          "ruleId": "max-params",
          "severity": 1,
          "message": "Arrow function has too many parameters (11). Maximum allowed is 5.",
          "line": 72,
          "column": 3,
          "nodeType": "ArrowFunctionExpression",
          "messageId": "exceed",
          "endLine": 72,
          "endColumn": 5
        }
      ],
      "errorCount": 0,
      "warningCount": 3,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "import { boot } from '@dazn/bootstrap-lib';\nimport {\n    isEraroError,\n    EraroError,\n    eraroCodesMap,\n} from '@dazn/bootstrap-lib/eraro';\nimport { captureException } from './errorReporting/init';\nimport { loadErrorChapter, SetCurrentChapter } from './loadErrorChapter';\nimport displayEndOfTheWorldError from './endOfTheWorld/endOfTheWorld';\n\nconst isStartupRedirectError = (error: EraroError) => {\n    const { category, code, internal } = error;\n    return (\n        category === eraroCodesMap.category.StartupService &&\n        code === eraroCodesMap.code.AppLoadError &&\n        internal === eraroCodesMap.internal.Ignore\n    );\n};\n\nconst isExternalChapterRedirectError = (error: EraroError) => {\n    const { category, code, internal } = error;\n    return (\n        category === eraroCodesMap.category.ChapterLoading &&\n        code === eraroCodesMap.code.UnableToLoadChapter &&\n        internal === eraroCodesMap.internal.Ignore\n    );\n};\n\nconst isRestrictedCountryError = (error: EraroError) =>\n    error.code === eraroCodesMap.code.RestrictedCountry ||\n    (error.category === eraroCodesMap.category.UserProfileService &&\n        error.internal === eraroCodesMap.internal.AccessDenied);\n\nconst isUserProfileNotAuthenticated = (error: EraroError) => {\n    const { BadRequest, Unauthenticated, NotFound } = eraroCodesMap.internal;\n    return (\n        error.category === eraroCodesMap.category.UserProfileService &&\n        ([BadRequest, Unauthenticated, NotFound] as string[]).includes(\n            error.internal,\n        )\n    );\n};\n\nconst isNotAuthenticated = (error: EraroError) =>\n    error.code === eraroCodesMap.code.UnathorizedRefreshTokenError ||\n    isUserProfileNotAuthenticated(error);\n\nconst isUserProfileTooManyRequests = (error: EraroError) =>\n    error.category === eraroCodesMap.category.UserProfileService &&\n    error.internal === eraroCodesMap.internal.TooManyRequests;\n\nconst isUserProfileServerError = (error: EraroError) =>\n    error.category === eraroCodesMap.category.UserProfileService &&\n    error.internal === eraroCodesMap.internal.ServerError;\n\nconst handleError = (\n    loadChapter: SetCurrentChapter,\n    logger: typeof captureException | undefined,\n    restrictedCountryChapterName: boot.config.ChapterName,\n    errorChapterName: boot.config.ChapterName,\n    defaultCategory: string = eraroCodesMap.category.General,\n    defaultCode: string = eraroCodesMap.code.GenericError,\n    defaultInternal: string = eraroCodesMap.internal.GenericError,\n    currentChapterName: string,\n    error: Error,\n    sendErrorEvent: (\n        errorCategory: string,\n        errorType: string,\n        errorCode: string,\n    ) => void,\n    authChapterName: boot.config.ChapterName,\n) => {\n    if (isEraroError(error)) {\n        const generatedError = error as EraroError;\n\n        if (isRestrictedCountryError(generatedError)) {\n            return loadChapter({\n                chapterName: restrictedCountryChapterName,\n                chapterData: {\n                    loadGlobalLandingPage: true,\n                },\n            });\n        }\n\n        const userProfileCategory = eraroCodesMap.category.UserProfileService;\n        let code;\n        let internal;\n\n        if (\n            eraroCodesMap.category.UserProfileService ===\n            generatedError.category\n        ) {\n            if (isUserProfileTooManyRequests(generatedError)) {\n                code = eraroCodesMap.code.ServiceTooManyAttemps;\n                internal = eraroCodesMap.internal.TooManyRequests;\n            } else if (isUserProfileServerError(generatedError)) {\n                code = eraroCodesMap.code.GenericError;\n                internal = eraroCodesMap.internal.ServerError;\n            }\n\n            if (code && internal) {\n                return loadErrorChapter(\n                    logger,\n                    loadChapter,\n                    userProfileCategory,\n                    code,\n                    internal,\n                    errorChapterName,\n                    currentChapterName,\n                    error,\n                );\n            }\n        }\n\n        if (isNotAuthenticated(generatedError)) {\n            return loadChapter({\n                chapterName: authChapterName,\n                chapterData: {},\n            });\n        }\n\n        if (\n            isStartupRedirectError(generatedError) ||\n            isExternalChapterRedirectError(generatedError)\n        ) {\n            return;\n        }\n    }\n\n    if (currentChapterName !== errorChapterName) {\n        try {\n            return loadErrorChapter(\n                logger,\n                loadChapter,\n                defaultCategory,\n                defaultCode,\n                defaultInternal,\n                errorChapterName,\n                currentChapterName,\n                error,\n            );\n        } catch (e) {}\n    }\n\n    displayEndOfTheWorldError({\n        error,\n        captureException: logger,\n        sendErrorEvent,\n    });\n};\n\nexport { handleError };\n",
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-error-handling/src/index.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-error-handling/src/loadErrorChapter.ts",
      "messages": [
        {
          "ruleId": "max-params",
          "severity": 1,
          "message": "Arrow function has too many parameters (8). Maximum allowed is 5.",
          "line": 19,
          "column": 3,
          "nodeType": "ArrowFunctionExpression",
          "messageId": "exceed",
          "endLine": 19,
          "endColumn": 5
        }
      ],
      "errorCount": 0,
      "warningCount": 1,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "import { boot } from '@dazn/bootstrap-lib';\nimport { isEraroError, createEraroError } from '@dazn/bootstrap-lib/eraro';\nimport { captureException } from './errorReporting/init';\n\ntype SetCurrentChapter = (chapter: {\n    chapterName: boot.config.ChapterName;\n    chapterData?: boot.config.ChapterData;\n}) => void;\n\nconst loadErrorChapter = (\n    logger: typeof captureException | undefined,\n    loadChapter: SetCurrentChapter,\n    defaultCategory: string,\n    defaultCode: string,\n    defaultInternal: string,\n    errorChapterName: boot.config.ChapterName,\n    currentChapter: string,\n    error: Error,\n) => {\n    const getEraro = () =>\n        isEraroError(error)\n            ? error\n            : createEraroError(\n                  'Unknown error',\n                  defaultCategory,\n                  defaultCode,\n                  defaultInternal,\n                  error,\n              );\n    const eraro = getEraro();\n\n    const data = {\n        errorCode: [eraro.category, eraro.code, eraro.internal].join('_'),\n        chapter: currentChapter === 'unknown' ? undefined : currentChapter,\n    };\n\n    if (logger) {\n        logger(eraro.originalException || eraro, { extra: data });\n    }\n    loadChapter({\n        chapterName: errorChapterName,\n        chapterData: data,\n    });\n};\n\nexport { loadErrorChapter, SetCurrentChapter };\n",
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-experiments/jest.config.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-experiments/src/abTestMulti.mock.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-experiments/src/index.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-experiments/src/range.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-experiments/src/tiny-hashes.d.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-initialization/jest.config.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-initialization/src/devMode.ts",
      "messages": [
        {
          "ruleId": "max-statements",
          "severity": 1,
          "message": "Arrow function has too many statements (15). Maximum allowed is 12.",
          "line": 16,
          "column": 42,
          "nodeType": "ArrowFunctionExpression",
          "messageId": "exceed",
          "endLine": 40,
          "endColumn": 2
        }
      ],
      "errorCount": 0,
      "warningCount": 1,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "import { boot } from '@dazn/bootstrap-lib';\nimport { createInitializationModule } from './index';\n\nconst getDevMode = (\n    load: boot.storage.AsyncStorage['getItem'],\n    save: boot.storage.AsyncStorage['setItem'],\n): Promise<boolean> =>\n    load('isDevModeEnabled').then(value => {\n        const isDevModeEnabled = value === 'true';\n        if (!isDevModeEnabled) {\n            save('isDevModeEnabled', String(isDevModeEnabled));\n        }\n        return isDevModeEnabled;\n    });\n\nexport const appendDevModeElementToDOM = (\n    document: Document,\n    {\n        indicatorType = 'line',\n    }: { indicatorType?: createInitializationModule.DevModeIndicatorType },\n) => {\n    const devModeElement = document.createElement('div');\n    devModeElement.className = 'protected';\n    devModeElement.id = 'devMode';\n    devModeElement.style.background = '#F7FF1A';\n    devModeElement.style.position = 'fixed';\n    devModeElement.style.zIndex = '100001';\n    if (indicatorType === 'line') {\n        devModeElement.style.height = '2px';\n        devModeElement.style.width = '100%';\n    } else {\n        devModeElement.style.width = '2rem';\n        devModeElement.style.height = '2rem';\n        devModeElement.style.left = '2rem';\n        devModeElement.style.top = '2rem';\n        devModeElement.style.borderRadius = '1rem';\n    }\n\n    document.body.insertBefore(devModeElement, document.body.childNodes[0]);\n};\n\nconst setDevModeInit = (\n    save: boot.storage.AsyncStorage['setItem'],\n    restartApp: () => void,\n) => (flag: boolean) => {\n    save('isDevModeEnabled', String(flag));\n    if (!flag) {\n        save('daznForceRefreshToken', String(!flag));\n    }\n    restartApp();\n};\n\nexport { getDevMode, setDevModeInit };\n",
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-initialization/src/deviceId.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-initialization/src/guid.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-initialization/src/index.ts",
      "messages": [
        {
          "ruleId": "max-statements",
          "severity": 1,
          "message": "Arrow function has too many statements (16). Maximum allowed is 12.",
          "line": 46,
          "column": 36,
          "nodeType": "ArrowFunctionExpression",
          "messageId": "exceed",
          "endLine": 153,
          "endColumn": 2
        }
      ],
      "errorCount": 0,
      "warningCount": 1,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "import { boot } from '@dazn/bootstrap-lib';\nimport { getDeviceId, setDeviceId } from './deviceId';\nimport { getGuid } from './guid';\nimport {\n    getDevMode,\n    setDevModeInit,\n    appendDevModeElementToDOM,\n} from './devMode';\nimport { generateSessionId } from './sessionId';\nimport { parseUrlParameters } from './parseUrlParameters';\n\nexport type PlatformAttributes = Record<string, unknown>;\n\nnamespace createInitializationModule {\n    export interface StorageProps {\n        load: boot.storage.AsyncStorage['getItem'];\n        save: boot.storage.AsyncStorage['setItem'];\n    }\n\n    export interface DeviceDetails {\n        platform: string;\n        platformAttributes: PlatformAttributes;\n        manufacturer: string;\n    }\n\n    export interface ConfigProps {\n        bootstrapVersion: string;\n        environment: boot.config.Environment;\n        environmentGroup: string;\n        devModeIndicatorVariant?: DevModeIndicatorType;\n    }\n\n    export interface CreateProps {\n        storage: StorageProps;\n        deviceDetails: DeviceDetails;\n        config: ConfigProps;\n        getCurrentUrl: () => string;\n        restartApp: () => void;\n        document: Document;\n        fetchDeviceId?: () => Promise<string>;\n    }\n\n    export type DevModeIndicatorType = 'line' | 'circle';\n}\n\nconst createInitializationModule = ({\n    storage: { load, save },\n    deviceDetails: {\n        platform: _platform,\n        platformAttributes: _platformAttributes,\n        manufacturer: _manufacturer,\n    },\n    config: {\n        bootstrapVersion: _version,\n        environment,\n        environmentGroup,\n        devModeIndicatorVariant: _devModeIndicatorVariant,\n    },\n    getCurrentUrl,\n    restartApp,\n    document,\n    fetchDeviceId,\n}: createInitializationModule.CreateProps) => {\n    let sessionId: string;\n    let deviceId: string;\n    let guid: string;\n    let isDevModeEnabled: boolean;\n    let versions: boot.config.ChaptersVersions = {\n        bootstrap: _version,\n    };\n    let platform: string;\n    let manufacturer: string;\n\n    const setPlatform = (value: string): void => {\n        platform = value;\n    };\n    const setManufacturer = (value: string): void => {\n        manufacturer = value;\n    };\n\n    setPlatform(_platform);\n    setManufacturer(_manufacturer);\n\n    const initialUrl = getCurrentUrl();\n    const initialUrlParameters = parseUrlParameters(initialUrl);\n    const setDevMode = setDevModeInit(save, restartApp);\n\n    const result = {\n        getEnvironment: () => environment,\n        getEnvironmentGroup: () => environmentGroup,\n        getVersions: () => versions,\n        getBootstrapVersion: () => versions.bootstrap,\n        setChapterVersion: (\n            chapter: boot.config.ChapterName | 'bootstrap',\n            version: string | null,\n        ) => {\n            if (chapter === 'bootstrap') {\n                return false;\n            }\n            if (typeof version !== 'string') {\n                return false;\n            }\n            versions[chapter] = version.replace(/\\_/g, '.');\n            return true;\n        },\n        getPlatform: () => platform,\n        setPlatform,\n        getPlatformAttributes: () => _platformAttributes,\n        getManufacturer: () => manufacturer,\n        setManufacturer,\n        getSessionId: () => sessionId,\n        setSessionId: (value: string) => {\n            sessionId = value;\n        },\n        getDeviceId: () => deviceId,\n        setDeviceId: (deviceId: string) => setDeviceId(save, deviceId),\n        getGuid: () => guid,\n        getDevMode: () => isDevModeEnabled,\n        enableDevMode: () => {\n            setDevMode(true);\n            isDevModeEnabled = true;\n        },\n        disableDevMode: () => {\n            setDevMode(false);\n            isDevModeEnabled = false;\n        },\n        getInitialUrl: () => initialUrl,\n        getInitialUrlParameters: () => initialUrlParameters,\n        run: () => {\n            sessionId = generateSessionId();\n            getGuid(load, save).then(value => {\n                guid = value;\n            });\n            getDevMode(load, save).then(value => {\n                isDevModeEnabled = value;\n                if (isDevModeEnabled) {\n                    appendDevModeElementToDOM(document, {\n                        indicatorType: _devModeIndicatorVariant,\n                    });\n                }\n            });\n\n            const deviceIdPromise = fetchDeviceId\n                ? fetchDeviceId()\n                : getDeviceId(load, save);\n            return deviceIdPromise.then(value => {\n                deviceId = value;\n            });\n        },\n    };\n\n    return result;\n};\n\nexport { createInitializationModule };\n",
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-initialization/src/parseUrlParameters.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-initialization/src/sessionId.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-key-mapping/jest.config.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-key-mapping/src/index.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-navigation/jest.config.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-navigation/src/chapterHistory/chapterHistory.ts",
      "messages": [
        {
          "ruleId": "max-statements",
          "severity": 1,
          "message": "Function 'getNormalisedAndVerifiedChapter' has too many statements (16). Maximum allowed is 12.",
          "line": 148,
          "column": 5,
          "nodeType": "FunctionDeclaration",
          "messageId": "exceed",
          "endLine": 211,
          "endColumn": 6
        }
      ],
      "errorCount": 0,
      "warningCount": 1,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "import { boot } from '@dazn/bootstrap-lib';\nimport { eraroCodesMap, createEraroError } from '@dazn/bootstrap-lib/eraro';\nimport { normalizeChapter } from '../utils/normalizeChapter';\nimport { makeAbsolute } from '../utils/location';\nimport { getChapterInfoFromPath } from '../utils/getChapterFromPath';\nimport { handleChapterLoadError } from './handleChapterLoadError';\nimport { garbageCollector } from './garbageCollector';\n\ntype ResourceStrings = boot.resourceStrings.ResourceStringsData;\ntype NormalChapterConfig = boot.config.NormalChapterConfig;\ntype ChapterName = boot.config.ChapterName;\ntype AnyCountry = boot.config.AnyCountry;\ntype Country = boot.config.AnyCountry;\ntype Language = boot.config.Language;\n\nnamespace createChapterHistory {\n    interface LoadEventContext {\n        chapter: ChapterName;\n        country: AnyCountry;\n    }\n    type TriggerChapterDidLoadEvent = (\n        context: LoadEventContext,\n    ) => Promise<void>;\n\n    type VerifyChapterAuthorization = (chapterName: ChapterName) => ChapterName;\n    type GetChapterCountry = () => AnyCountry;\n    type SetChapterVersion = (\n        chapter: ChapterName,\n        version: string | null,\n    ) => boolean;\n    type GetChapterLanguage = () => Language;\n    type DownloadChapterAndAddInPage = (\n        chapterName: ChapterName,\n        chapterCountry: AnyCountry,\n        garbageCollector: () => void,\n    ) => Promise<string | null>;\n    type GetChapterUrl = (\n        normalizedChapter: NormalChapterConfig,\n        chapterCountry: AnyCountry,\n        chapterLanguage: Language,\n    ) => string;\n    type GetResourceStrings = () => Promise<ResourceStrings> | ResourceStrings;\n    type StartupDataCountry = () => Country | boot.config.MoonCountry;\n    export interface Props {\n        configurationModule: ConfigurationModule;\n        errorModule: ErrorModule;\n        userModule: Pick<\n            UserModule,\n            'getIsActive' | 'getIsAuthorized' | 'getUserProfile'\n        >;\n        verifyChapterAuthorization: VerifyChapterAuthorization;\n        getChapterCountry: GetChapterCountry;\n        setChapterVersion: SetChapterVersion;\n        getChapterLanguage: GetChapterLanguage;\n        checkForRedirect: StartupModule['checkForRedirect'];\n        downloadChapterAndAddInPage: DownloadChapterAndAddInPage;\n        getChapterUrl: GetChapterUrl;\n        getResourceStrings: GetResourceStrings;\n        triggerChapterDidLoadEvent: TriggerChapterDidLoadEvent;\n        startupDataCountry: StartupDataCountry;\n    }\n    export interface EnvProp {\n        location: Location;\n        history: History;\n    }\n}\n\nconst createChapterHistory = (\n    {\n        configurationModule,\n        errorModule,\n        userModule,\n        verifyChapterAuthorization,\n        getChapterCountry,\n        setChapterVersion,\n        getChapterLanguage,\n        checkForRedirect,\n        downloadChapterAndAddInPage,\n        getChapterUrl,\n        getResourceStrings,\n        triggerChapterDidLoadEvent,\n        startupDataCountry,\n    }: createChapterHistory.Props,\n    { location, history }: createChapterHistory.EnvProp,\n) => {\n    const { configuration, chapterNames } = configurationModule;\n\n    const chapterHistory: NormalChapterConfig[] = [];\n\n    function getBrowserHistory() {\n        const isFirstLoad = chapterHistory.length === 0;\n\n        return {\n            initialUpdate(newCurrentChapter: NormalChapterConfig) {\n                const chapterUrl = getChapterUrl(\n                    newCurrentChapter,\n                    getChapterCountry(),\n                    getChapterLanguage(),\n                );\n                const absoluteUrl = makeAbsolute(location, chapterUrl);\n\n                if (!isFirstLoad) {\n                    // push history\n                    history.pushState(\n                        newCurrentChapter.chapterData,\n                        '',\n                        absoluteUrl,\n                    );\n                } else {\n                    // replace history for first page load\n                    history.replaceState(\n                        newCurrentChapter.chapterData,\n                        '',\n                        absoluteUrl,\n                    );\n                }\n            },\n            replace(newCurrentChapter: NormalChapterConfig, nextUrl: string) {\n                if (!isFirstLoad) {\n                    history.replaceState(\n                        newCurrentChapter.chapterData,\n                        '',\n                        makeAbsolute(location, nextUrl),\n                    );\n                }\n            },\n        };\n    }\n\n    function validateChapterForRedirection(\n        normalizedChapter: NormalChapterConfig,\n    ) {\n        const shouldRedirectTo = checkForRedirect(\n            userModule.getIsAuthorized,\n            normalizedChapter.chapterPath,\n        );\n        if (\n            shouldRedirectTo &&\n            normalizedChapter.chapterName !== chapterNames.ERROR\n        ) {\n            location.href = shouldRedirectTo;\n            return null;\n        }\n\n        return normalizedChapter;\n    }\n\n    function getNormalisedAndVerifiedChapter(\n        newChapter: Partial<boot.config.ChapterNameLike>,\n    ) {\n        const chapterPath =\n            chapterHistory.length === 0 && location ? location.pathname : '';\n\n        const normalChapterOrNull = normalizeChapter(newChapter, chapterPath);\n\n        const createBadChapterError = (chapterName: string) =>\n            createEraroError(\n                `Sorry, cannot load chapter: \"${chapterName}\"`,\n                eraroCodesMap.category.ChapterLoading,\n                eraroCodesMap.code.ChapterInvalid,\n                eraroCodesMap.internal.GenericError,\n            );\n\n        // Bad chapter name\n        if (!normalChapterOrNull && typeof newChapter === 'string') {\n            throw createBadChapterError(newChapter);\n        }\n\n        const getDefaultChapterName = () =>\n            getChapterInfoFromPath({\n                configuration,\n                isAuthorized: userModule.getIsAuthorized(),\n                getIsActive: userModule.getIsActive,\n                pathname: chapterPath,\n                startupDataCountry: startupDataCountry(),\n            }).chapterName;\n\n        const normalChapter =\n            normalChapterOrNull ||\n            normalizeChapter(getDefaultChapterName(), chapterPath)!;\n\n        const { chapterName } = normalChapter;\n        const isDisabledChapter =\n            chapterName !== chapterNames.ERROR &&\n            !configuration.chapters.isChapterEnabledForCountry(\n                chapterName,\n                startupDataCountry(),\n            );\n        if (isDisabledChapter) {\n            throw createBadChapterError(chapterName);\n        }\n\n        const verifiedChapterName = verifyChapterAuthorization(chapterName);\n        if (verifiedChapterName === chapterName) {\n            return validateChapterForRedirection(normalChapter);\n        }\n\n        const redirect = normalizeChapter(\n            {\n                chapterName: verifiedChapterName,\n                chapterPath: configuration.chapters.homePage(\n                    verifiedChapterName,\n                ),\n                chapterData: {\n                    deepLink: normalChapter,\n                },\n            },\n            chapterPath,\n        )!;\n        return validateChapterForRedirection(redirect);\n    }\n\n    function redirectIfChapterIsExternal(\n        newCurrentChapter: NormalChapterConfig,\n        chapterCountry: AnyCountry,\n        nextUrl: string,\n    ) {\n        if (\n            configuration.chapters.isExternal(\n                chapterCountry,\n                newCurrentChapter.chapterName,\n            )\n        ) {\n            const externalUrl = configuration.chapters.getExternalUrl(\n                chapterCountry,\n                newCurrentChapter.chapterName,\n                nextUrl,\n            );\n            location.href = externalUrl || '';\n            throw createEraroError(\n                `Loading external chapter from ${externalUrl}`,\n                eraroCodesMap.category.ChapterLoading,\n                eraroCodesMap.code.UnableToLoadChapter,\n                eraroCodesMap.internal.Ignore,\n            );\n        }\n    }\n\n    function setCurrentChapter(\n        newChapter: Partial<boot.config.ChapterNameLike>,\n    ) {\n        const newCurrentChapter = getNormalisedAndVerifiedChapter(newChapter);\n        if (newCurrentChapter === null) {\n            return;\n        }\n        const browserHistory = getBrowserHistory();\n        chapterHistory.push(newCurrentChapter);\n        const handleLoadError = handleChapterLoadError(\n            errorModule.handleError,\n            newCurrentChapter.chapterName,\n        );\n\n        try {\n            let nextUrl: string;\n            let chapterCountry: AnyCountry;\n            let chapterLanguage: Language;\n            Promise.resolve(\n                newCurrentChapter.chapterName === chapterNames.ERROR\n                    ? undefined\n                    : userModule.getUserProfile(),\n            )\n                // Error thrown to break recursive cycle\n                // when request to user-profile throws an error.\n                // TODO: is it reduntant now?\n                // I guess me can remove try/catch and this catch too\n                .catch(error => Promise.reject(error))\n                .then(() => {\n                    browserHistory.initialUpdate(newCurrentChapter);\n                    chapterCountry = getChapterCountry();\n                    chapterLanguage = getChapterLanguage();\n\n                    nextUrl = getChapterUrl(\n                        newCurrentChapter,\n                        chapterCountry,\n                        chapterLanguage,\n                    );\n                    redirectIfChapterIsExternal(\n                        newCurrentChapter,\n                        chapterCountry,\n                        nextUrl,\n                    );\n                })\n                .then(() => getResourceStrings())\n                .then(() => browserHistory.replace(newCurrentChapter, nextUrl))\n                .then(() =>\n                    downloadChapterAndAddInPage(\n                        newCurrentChapter.chapterName,\n                        chapterCountry,\n                        () => garbageCollector(configuration.environment),\n                    ),\n                )\n                .then(chapterVersion =>\n                    setChapterVersion(\n                        newCurrentChapter.chapterName,\n                        chapterVersion,\n                    ),\n                )\n                .then(() =>\n                    triggerChapterDidLoadEvent({\n                        chapter: newCurrentChapter.chapterName,\n                        country: chapterCountry,\n                    }),\n                )\n                .catch(handleLoadError);\n        } catch (exception) {\n            handleLoadError(exception);\n        }\n    }\n\n    return {\n        getCurrentChapter: (): NormalChapterConfig =>\n            chapterHistory[chapterHistory.length - 1] || {\n                // TODO: getChapterFromPath(location.pathname),\n                chapterName: 'unknown',\n                chapterPath: location.pathname,\n                chapterData: null,\n            },\n        setCurrentChapter,\n    };\n};\n\nexport { createChapterHistory };\n",
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-navigation/src/chapterHistory/computeChapterUrl.ts",
      "messages": [
        {
          "ruleId": "complexity",
          "severity": 1,
          "message": "Arrow function has a complexity of 13. Maximum allowed is 10.",
          "line": 62,
          "column": 27,
          "nodeType": "ArrowFunctionExpression",
          "messageId": "complex",
          "endLine": 139,
          "endColumn": 2
        },
        {
          "ruleId": "max-statements",
          "severity": 1,
          "message": "Arrow function has too many statements (13). Maximum allowed is 12.",
          "line": 62,
          "column": 27,
          "nodeType": "ArrowFunctionExpression",
          "messageId": "exceed",
          "endLine": 139,
          "endColumn": 2
        },
        {
          "ruleId": "max-params",
          "severity": 1,
          "message": "Arrow function has too many parameters (10). Maximum allowed is 5.",
          "line": 73,
          "column": 3,
          "nodeType": "ArrowFunctionExpression",
          "messageId": "exceed",
          "endLine": 73,
          "endColumn": 5
        }
      ],
      "errorCount": 0,
      "warningCount": 3,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "import { keysOf, boot } from '@dazn/bootstrap-lib';\nimport { ensureLeadingSlash } from '../utils/slash';\nimport { getPath, getQuery, getHash } from '../utils/location';\n\ntype ChapterMap = boot.config.ChapterMap<string[]>;\ntype ChapterName = boot.config.ChapterName;\n\nconst LANG_SEGMENT_RX = /^[a-z]{2}-(?:[a-z]{2}|global)$/i;\n\nconst isLangSegment = (pathSegment: string) =>\n    LANG_SEGMENT_RX.test(pathSegment);\n\nconst getPathSegments = (path: string) => path.split('/').filter(Boolean);\n\nconst buildPath = (pathname: string, location: Location) =>\n    ensureLeadingSlash(\n        [\n            pathname,\n            /\\?/.test(pathname) ? '' : getQuery(location),\n            /\\#/.test(pathname) ? '' : getHash(location),\n        ].join(''),\n    );\n\nconst getLangSegment = (country: string, lang = 'en') =>\n    [lang.toLowerCase(), country.toUpperCase()].join('-');\n\nconst getPathnameWithLang = (\n    pathname: string,\n    langSegment: string,\n    rewriteUrlLocale = true,\n) => {\n    const urlSegments = getPathSegments(pathname);\n    const hasLanguageSegment = urlSegments.some(isLangSegment);\n\n    let urlPath = pathname;\n    if (hasLanguageSegment && rewriteUrlLocale) {\n        urlPath = urlSegments\n            .map(s => (isLangSegment(s) ? langSegment : s))\n            .join('/');\n    }\n    if (!hasLanguageSegment) {\n        urlPath = [langSegment].concat(urlSegments).join('/');\n    }\n    return urlPath;\n};\n\nconst getChaptersMatchingPath = (chapterMap: ChapterMap, pathname: string) => {\n    const nonLangSegments = getPathSegments(pathname).filter(\n        seg => !isLangSegment(seg),\n    );\n    const firstNonLangSegment = nonLangSegments[0];\n\n    return keysOf(chapterMap).filter((chapterName: ChapterName) =>\n        chapterMap[chapterName]!.some(\n            chapterPage =>\n                firstNonLangSegment ===\n                chapterPage.split('/').filter(Boolean)[0],\n        ),\n    );\n};\n\nconst computeChapterUrl = (\n    location: Location,\n    chaptersMap: ChapterMap,\n    country: string,\n    language: string,\n    chapterHomepage: string,\n    withLanguageInUrl: boolean,\n    getChapterFromUrl: (path: string) => ChapterName,\n    chapterName: ChapterName,\n    chapterPath = '',\n    rewriteUrlLocale = true,\n) => {\n    const chapterFromUrl = getChapterFromUrl(getPath(location));\n    const currentUrlIsForSameChapter = chapterFromUrl === chapterName;\n\n    /*\n     * We're being asked to load a new chapter just using a string\n     * In this case we need to build a url from scratch\n     */\n    if (!currentUrlIsForSameChapter && !chapterPath) {\n        const newPath = getPathnameWithLang(\n            chapterHomepage,\n            getLangSegment(country, language),\n            rewriteUrlLocale,\n        );\n        return buildPath(\n            withLanguageInUrl ? newPath : chapterHomepage,\n            location,\n        );\n    }\n\n    /*\n     * Here we are either being asked to load the chapter we're already on\n     * Or we are following a deeplink\n     * Or a path was given when setting chapterHistory.currentChapter\n     * So we just check that the url has the correct language / region\n     */\n    if (\n        currentUrlIsForSameChapter ||\n        location.pathname !== '/' ||\n        Boolean(chapterPath)\n    ) {\n        const pathname = chapterPath || getPath(location);\n        /* Should use the chapter's homePage if:\n            - requesting /\n            OR\n            - requesting any URL where:\n                - the chapter in URL doesn't exists in chapters map\n        */\n        const shouldUseHomepage =\n            pathname === '/' ||\n            (location.pathname !== '/' &&\n                !getChaptersMatchingPath(chaptersMap, pathname).includes(\n                    chapterFromUrl,\n                ));\n        const chapterPathName = shouldUseHomepage ? chapterHomepage : pathname;\n        const newPath = getPathnameWithLang(\n            chapterPathName,\n            getLangSegment(country, language),\n            rewriteUrlLocale,\n        );\n        return buildPath(\n            withLanguageInUrl ? newPath : chapterPathName,\n            location,\n        );\n    }\n\n    /*\n     * The default - this means the url is \"/\"\n     * so we will load the homepage of whatever chapter we've been asked to load\n     */\n    const newPath = getPathnameWithLang(\n        chapterPath,\n        getLangSegment(country, language),\n        rewriteUrlLocale,\n    );\n    return buildPath(withLanguageInUrl ? newPath : chapterPath, location);\n};\n\nexport { computeChapterUrl };\n",
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-navigation/src/chapterHistory/garbageCollector.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-navigation/src/chapterHistory/garbageCollectorConfig.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-navigation/src/chapterHistory/getResourcesBaseUrl.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-navigation/src/chapterHistory/handleChapterLoadError.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-navigation/src/chapterHistory/handlePopstate.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-navigation/src/chapterLoader/chapterLoader.ts",
      "messages": [
        {
          "ruleId": "max-params",
          "severity": 1,
          "message": "Arrow function has too many parameters (11). Maximum allowed is 5.",
          "line": 91,
          "column": 3,
          "nodeType": "ArrowFunctionExpression",
          "messageId": "exceed",
          "endLine": 91,
          "endColumn": 5
        }
      ],
      "errorCount": 0,
      "warningCount": 1,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "import { boot } from '@dazn/bootstrap-lib';\nimport {\n    createEraroError,\n    eraroCodesMap,\n    EraroError,\n} from '@dazn/bootstrap-lib/eraro';\nimport { fetchChapterIndex, isResponseError, isFetchError } from './fetch';\nimport { parse } from './parse';\nimport { transform } from './transform';\nimport { clean } from './clean';\nimport { insert } from './insert';\nimport { ensureTrailingSlash } from '../utils/slash';\nimport { createLifecycleHooks } from '../lifecycle/lifecycle';\n\ntype LifecycleTriggers = ReturnType<typeof createLifecycleHooks>['triggers'];\ntype ChapterName = boot.config.ChapterName;\ntype AnyCountry = boot.config.AnyCountry;\n\ninterface ChapterUrlConfig {\n    chapter: ChapterName;\n    baseUrl: string;\n    country: AnyCountry;\n    isMoonCountry: (country: AnyCountry) => boolean;\n}\n\nconst MOON = 'moon';\nconst chapterIndexUrl = ({\n    chapter,\n    baseUrl,\n    country,\n    isMoonCountry,\n}: ChapterUrlConfig) => {\n    const region = isMoonCountry(country) ? MOON : country;\n    return `${ensureTrailingSlash(baseUrl)}${region}/${chapter}/index.html`;\n};\n\nconst checkChapterHeader = (\n    expectedChapter: ChapterName,\n    chapterReceived: string | null,\n) => {\n    if (chapterReceived && expectedChapter !== chapterReceived) {\n        throw new Error(\n            `Error loading chapter.  Expected ${expectedChapter} but got ${chapterReceived} instead`,\n        );\n    }\n};\n\ntype GenerateLoadChapterError = (\n    message: string,\n    internalCode: string,\n    originalException?: Error,\n) => EraroError;\n\nconst handleFetchError = (\n    generateLoadChapterError: GenerateLoadChapterError,\n    error: Error & {\n        type?: string;\n        status?: number;\n        originalException?: Error;\n    },\n) => {\n    if (isFetchError(error)) {\n        return generateLoadChapterError(\n            error.message,\n            eraroCodesMap.internal.NetworkError,\n            error.originalException,\n        );\n    }\n    if (isResponseError(error)) {\n        return generateLoadChapterError(error.message, String(error.status));\n    }\n    return generateLoadChapterError(\n        'Unexpected error',\n        eraroCodesMap.internal.GenericError,\n        error,\n    );\n};\n\nconst loadChapter = (\n    fetch: typeof window.fetch,\n    domParser: typeof DOMParser,\n    document: Document,\n    country: AnyCountry,\n    baseUrl: string,\n    chapter: ChapterName,\n    triggers: LifecycleTriggers,\n    isMoonCountry: (country: AnyCountry) => boolean,\n    garbageCollector: () => void,\n    getChapterCountry: () => AnyCountry,\n    selectorsExcludedFromCleaning?: string[],\n) => {\n    const generateLoadChapterError: GenerateLoadChapterError = (\n        message,\n        internalCode,\n        originalException,\n    ) =>\n        createEraroError(\n            `Failed to load chapter: ${message}`,\n            eraroCodesMap.category.ChapterLoading,\n            eraroCodesMap.code.UnableToLoadChapter,\n            internalCode,\n            originalException,\n        );\n\n    const { willLoadEvents, willUnloadEvents, didUnloadEvents } = triggers;\n\n    const url = chapterIndexUrl({\n        chapter,\n        baseUrl,\n        isMoonCountry,\n        country: getChapterCountry(),\n    });\n    const context = { chapter, country };\n    let chapterVersion: string | null = null;\n\n    type Trigger = typeof willLoadEvents;\n    const triggerEvents = (trigger: Trigger) => <T>(value: T) =>\n        trigger(context).then(() => value);\n\n    let internalError = false;\n    return triggerEvents(willLoadEvents)(null)\n        .then(() => fetchChapterIndex(fetch, url))\n        .then(\n            result => {\n                checkChapterHeader(chapter, result.chapter);\n                chapterVersion = result.version;\n                return result;\n            },\n            (error: Error) => {\n                if (internalError) {\n                    throw error;\n                }\n                internalError = true;\n\n                throw handleFetchError(generateLoadChapterError, error);\n            },\n        )\n        .then(\n            fetchResponse => {\n                // @todo temporal fix to pass through testcafe, remove later\n                const newBaseUrl = `${baseUrl}/${country}/${chapter}/`;\n                const existingBase = document.querySelector('base');\n                if (existingBase) {\n                    existingBase.setAttribute('href', newBaseUrl);\n                } else {\n                    const base = document.createElement('base');\n                    base.setAttribute('href', newBaseUrl);\n                    document.head.appendChild(base);\n                }\n                return fetchResponse;\n            },\n            (error: Error) => {\n                if (internalError) {\n                    throw error;\n                }\n                internalError = true;\n                throw generateLoadChapterError(\n                    'Chapter not found',\n                    eraroCodesMap.internal.NotFound,\n                    error,\n                );\n            },\n        )\n        .then(parse(domParser))\n        .then(transform, (error: Error) => {\n            if (internalError) {\n                throw error;\n            }\n            internalError = true;\n            throw generateLoadChapterError(\n                'Failed to parse document',\n                eraroCodesMap.internal.ParserError,\n                error,\n            );\n        })\n        .then(triggerEvents(willUnloadEvents))\n        .then(transformedNodes => {\n            garbageCollector();\n            clean(document, selectorsExcludedFromCleaning);\n            return triggerEvents(didUnloadEvents)(transformedNodes);\n        })\n        .then(transformedNodes => {\n            insert(document, transformedNodes);\n            return chapterVersion;\n        });\n};\n\nexport { loadChapter, chapterIndexUrl };\n",
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-navigation/src/chapterLoader/clean.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-navigation/src/chapterLoader/fetch.ts",
      "messages": [
        {
          "ruleId": "max-params",
          "severity": 1,
          "message": "Arrow function has too many parameters (7). Maximum allowed is 5.",
          "line": 89,
          "column": 3,
          "nodeType": "ArrowFunctionExpression",
          "messageId": "exceed",
          "endLine": 89,
          "endColumn": 5
        }
      ],
      "errorCount": 0,
      "warningCount": 1,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "import { boot } from '@dazn/bootstrap-lib';\ninterface FetchError extends Error {\n    type: 'FetchError';\n    originalException: Error;\n}\n\ninterface ResponseError extends Error {\n    type: 'ResponseError';\n    status: number;\n}\n\ntype CustomError = Error & { type?: string };\nconst isResponseError = (error: CustomError): error is ResponseError =>\n    error.type === 'ResponseError';\nconst isFetchError = (error: CustomError): error is FetchError =>\n    error.type === 'FetchError';\n\nconst HTML_FILE_REGEX = /\\.html$/;\n\nconst checkUrl = (url: string) => HTML_FILE_REGEX.test(url);\n\nconst isRetriable = (\n    error: ResponseError | Error,\n    remainingAttempts: number,\n) => {\n    if (remainingAttempts === 0) {\n        return false;\n    }\n\n    if (!isResponseError(error)) {\n        return true;\n    }\n\n    return error.status > 499;\n};\n\n// Type of whatever Promise is resolved with\ntype Unpromise<T> = T extends Promise<infer U> ? U : never;\n// Type of response of fetchHTML function\ntype FetchHTML = Unpromise<ReturnType<typeof fetchHTML>>;\n\nconst fetchHTML = (fetch: typeof window.fetch, url: string) => {\n    let responseUrl: string;\n    let chapterHeader: string | null;\n    let versionHeader: string | null;\n    const fetchReq = fetch(url);\n    return fetchReq\n        .then(\n            response => {\n                if (!response.ok) {\n                    const { status, statusText } = response;\n                    const error = new Error(\n                        `${status} ${statusText} from ${url}`,\n                    ) as ResponseError;\n                    error.type = 'ResponseError';\n                    error.status = status;\n                    throw error;\n                }\n\n                responseUrl = response.url || url;\n                chapterHeader = response.headers.get('x-amz-meta-dazn-chapter');\n                versionHeader = response.headers.get('x-amz-meta-dazn-version');\n\n                return response.text();\n            },\n            e => {\n                const error = new Error(`Failed to fetch ${url}`) as FetchError;\n                error.type = 'FetchError';\n                error.originalException = e;\n                throw error;\n            },\n        )\n        .then(html => ({\n            url: responseUrl,\n            html,\n            chapter: chapterHeader,\n            version: versionHeader,\n        }));\n};\n\nconst attemptFetch = (\n    fetch: typeof window.fetch,\n    url: string,\n    remainingAttempts: number,\n    wait: number,\n    multiplier: number,\n    resolve: (val: FetchHTML) => void,\n    reject: (error: Error) => void,\n) => {\n    fetchHTML(fetch, url)\n        .then(resolve)\n        .catch(error => {\n            if (!isRetriable(error, remainingAttempts)) {\n                return reject(error);\n            }\n            const nextWait = wait * multiplier;\n            setTimeout(() => {\n                attemptFetch(\n                    fetch,\n                    url,\n                    remainingAttempts - 1,\n                    nextWait,\n                    multiplier,\n                    resolve,\n                    reject,\n                );\n            }, wait);\n        });\n};\n\nconst fetchChapterIndex = (\n    fetch: boot.util.Fetch,\n    url: string,\n    { retry = 0, wait = 500, multiplier = 2 } = {},\n): Promise<FetchHTML> => {\n    if (!checkUrl(url)) {\n        return Promise.reject(\n            new Error(`Invalid url ${url}. Can load html only`),\n        );\n    }\n\n    return new Promise((resolve, reject) => {\n        attemptFetch(fetch, url, retry, wait, multiplier, resolve, reject);\n    });\n};\n\nexport {\n    fetchChapterIndex,\n    isResponseError,\n    ResponseError,\n    isFetchError,\n    FetchError,\n};\n",
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-navigation/src/chapterLoader/insert.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-navigation/src/chapterLoader/loadInitialChapter.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-navigation/src/chapterLoader/parse.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-navigation/src/chapterLoader/transform.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-navigation/src/global-modules.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-navigation/src/index.ts",
      "messages": [
        {
          "ruleId": "max-statements",
          "severity": 1,
          "message": "Function 'createNavigationModule' has too many statements (15). Maximum allowed is 12.",
          "line": 40,
          "column": 1,
          "nodeType": "FunctionDeclaration",
          "messageId": "exceed",
          "endLine": 254,
          "endColumn": 2
        }
      ],
      "errorCount": 0,
      "warningCount": 1,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "import './global-modules';\nimport { boot } from '@dazn/bootstrap-lib';\nimport {\n    getChapterFromPath as _getChapterFromPath,\n    verifyChapterAuthorization as _verifyChapterAuthorization,\n} from './utils/getChapterFromPath';\nimport { createLifecycleHooks } from './lifecycle/lifecycle';\nimport { setupPopstateHandler } from './chapterHistory/handlePopstate';\nimport { loadInitialChapter } from './chapterLoader/loadInitialChapter';\nimport { getChapterCountry as _getChapterCountry } from './locale/getChapterCountry';\nimport { getLanguage as _getLanguage } from './locale/getLanguage';\nimport { createChapterHistory } from './chapterHistory/chapterHistory';\nimport { loadChapter } from './chapterLoader/chapterLoader';\nimport { getResourcesBaseUrl } from './chapterHistory/getResourcesBaseUrl';\nimport { computeChapterUrl } from './chapterHistory/computeChapterUrl';\nimport { getUrl, getPath, getQuery } from './utils/location';\nimport { initGetResourceStrings } from './resourceStrings/getResourceStrings';\n\nconst MOON_COUNTRY = 'moon';\n\nnamespace createNavigationModule {\n    export interface Props {\n        configurationModule: ConfigurationModule;\n        startupModule: StartupModule;\n        userModule: UserModule;\n        errorModule: ErrorModule;\n        storageModule: StorageModule;\n        initializationModule: InitializationModule;\n    }\n    export interface Deps {\n        location: Location;\n        history: History;\n        document: Document;\n        fetch: boot.util.Fetch;\n        DOMParser: boot.util.DOMParserConstructor;\n        URL: boot.util.URLConstructor;\n    }\n}\n\nfunction createNavigationModule(\n    {\n        configurationModule,\n        startupModule,\n        userModule,\n        errorModule,\n        storageModule,\n        initializationModule,\n    }: createNavigationModule.Props,\n    {\n        location,\n        history,\n        document,\n        fetch,\n        DOMParser,\n        URL,\n    }: createNavigationModule.Deps,\n) {\n    const {\n        configuration,\n        chapterNames,\n        selectorsExcludedFromCleaning,\n    } = configurationModule;\n\n    const lifecycleHooks = createLifecycleHooks(errorModule);\n\n    const isMoonCountry = (country: boot.config.AnyCountry) => {\n        const { countries } = configuration;\n        if (!countries) {\n            return false;\n        }\n\n        return !countries.native.includes(country.toLowerCase());\n    };\n\n    const startupDataCountry = () => {\n        const country = startupModule.getStartupDataCountry();\n        return !country || isMoonCountry(country) ? MOON_COUNTRY : country;\n    };\n\n    const getChapterFromPath = (pathname: string) =>\n        _getChapterFromPath(\n            configuration,\n            userModule.getIsAuthorized,\n            userModule.getIsActive,\n            pathname,\n            startupDataCountry(),\n        );\n\n    const getChapterCountry = () =>\n        _getChapterCountry(\n            location,\n            startupModule.getStartupDataCountry,\n            startupModule.getIsPortable,\n            configuration.chapters,\n            getChapterFromPath,\n            userModule.getSignUpCountry,\n            userModule.getContentCountry,\n        );\n\n    const verifyChapterAuthorization = (chapterName: boot.config.ChapterName) =>\n        _verifyChapterAuthorization({\n            configuration: configuration.chapters,\n            getIsActive: userModule.getIsActive,\n            getIsAuthorized: userModule.getIsAuthorized,\n            chapters: [chapterName],\n        });\n\n    // Cached Language is the language we have stored in LocalStorage\n    let cachedLanguage: boot.config.Language | null = null;\n    const getLanguage = () => {\n        const isUserLanguagePriority = !userModule.isProfileCached();\n        const currentPath = getPath(location);\n        const lang = _getLanguage(\n            startupModule.getAllowedLanguages() || [],\n            startupModule.getRegionLanguage() || '',\n            cachedLanguage,\n            userModule.getSupportedLanguages(),\n            userModule.getUserLanguage(),\n            currentPath,\n            configuration.chapters.getsCountryFromUrl(\n                getChapterFromPath(currentPath),\n            ),\n            isUserLanguagePriority,\n        );\n\n        // only save the language in LocalStorage if it changed\n        if (lang !== cachedLanguage) {\n            storageModule.saveLanguage(lang);\n        }\n        cachedLanguage = lang;\n        return lang;\n    };\n\n    const downloadChapterAndAddInPage = (\n        chapterName: boot.config.ChapterName,\n        chapterCountry: boot.config.AnyCountry,\n        garbageCollector: () => void,\n    ) =>\n        loadChapter(\n            fetch,\n            DOMParser,\n            document,\n            chapterCountry,\n            getResourcesBaseUrl(URL, configuration.resourcesBaseUrl, () =>\n                getUrl(location),\n            ),\n            chapterName,\n            lifecycleHooks.triggers,\n            isMoonCountry,\n            garbageCollector,\n            getChapterCountry,\n            selectorsExcludedFromCleaning,\n        );\n\n    const getChapterUrl = (\n        normalizedChapter: boot.config.NormalChapterConfig,\n        chapterCountry: boot.config.AnyCountry,\n        chapterLanguage: boot.config.Language,\n    ) => {\n        const { chapterName } = normalizedChapter;\n        if (chapterName === chapterNames.ERROR) {\n            return `${getPath(location)}${getQuery(location)}`;\n        }\n\n        const chapterPathWithoutAppUrlPrefix =\n            normalizedChapter.chapterPath &&\n            normalizedChapter.chapterPath.replace(\n                configuration.appUrlPrefix,\n                '',\n            );\n\n        const chapterUrlPath = computeChapterUrl(\n            location,\n            configuration.chapters.combinedChapterMap,\n            chapterCountry,\n            chapterLanguage,\n            configuration.chapters.homePage(chapterName),\n            configuration.chapters.hasLanguageInUrl(chapterName),\n            getChapterFromPath,\n            normalizedChapter.chapterName,\n            chapterPathWithoutAppUrlPrefix,\n            configuration.chapters.rewriteUrlLocale(chapterName),\n        );\n        return configuration.appUrlPrefix + chapterUrlPath;\n    };\n\n    const getResourceStrings = initGetResourceStrings({\n        configuration,\n        fetch,\n        getChapterCountry,\n        getChapterLanguage: getLanguage,\n        getPlatform: initializationModule.getPlatform,\n        getResourceStringsEndpoint: startupModule.getResourceStringsEndpoint,\n    });\n\n    const { getCurrentChapter, setCurrentChapter } = createChapterHistory(\n        {\n            configurationModule,\n            errorModule,\n            userModule,\n            verifyChapterAuthorization,\n            getChapterCountry,\n            setChapterVersion: initializationModule.setChapterVersion,\n            getChapterLanguage: getLanguage,\n            checkForRedirect: startupModule.checkForRedirect,\n            downloadChapterAndAddInPage,\n            getChapterUrl,\n            getResourceStrings,\n            triggerChapterDidLoadEvent: lifecycleHooks.triggers.didLoadEvents,\n            startupDataCountry,\n        },\n        {\n            location,\n            history,\n        },\n    );\n\n    const popStateHandler = setupPopstateHandler(\n        () => location.pathname,\n        getChapterFromPath,\n        getCurrentChapter,\n        setCurrentChapter,\n    );\n\n    return {\n        run: () =>\n            storageModule.loadLanguage().then(storedLanguage => {\n                cachedLanguage = storedLanguage;\n                return getResourceStrings();\n            }),\n        getResourceStrings,\n        getLanguage,\n        getChapterCountry,\n        getCurrentChapter: () => {\n            const curChapter = getCurrentChapter();\n            return curChapter.chapterData ? curChapter : curChapter.chapterName;\n        },\n        setCurrentChapter,\n        handlePopstate: popStateHandler,\n        popStateHandler,\n        getChapterFromPath,\n        lifecycleEvents: lifecycleHooks.events,\n        loadInitialChapter: (deepLink?: boot.config.DeepLink | null) =>\n            loadInitialChapter({\n                chapterPath: location.pathname,\n                deepLink,\n                onStart: lifecycleHooks.triggers.willStartEvents,\n                getChapterFromPath: () => getChapterFromPath(location.pathname),\n                setCurrentChapter,\n                checkRegionAvailability: startupModule.checkRegionAvailability,\n            }),\n        isMoonCountry: () => isMoonCountry(getChapterCountry()),\n    };\n}\n\nexport { createNavigationModule };\n",
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-navigation/src/lifecycle/hooks.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-navigation/src/lifecycle/lifecycle.ts",
      "messages": [
        {
          "ruleId": "max-statements",
          "severity": 1,
          "message": "Arrow function has too many statements (16). Maximum allowed is 12.",
          "line": 24,
          "column": 30,
          "nodeType": "ArrowFunctionExpression",
          "messageId": "exceed",
          "endLine": 78,
          "endColumn": 2
        }
      ],
      "errorCount": 0,
      "warningCount": 1,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "import { boot } from '@dazn/bootstrap-lib';\nimport { Hooks } from './hooks';\n\n// This trick with namespace is to avoid error in\n// packages/bootstrap-module-navigation/src/chapterLoader/chapterLoader.ts\n// Exported variable 'loadChapter' has or is using name 'createLifecycleHooks.LoadEventContext'\n// from external module \"packages/bootstrap-module-navigation/src/lifecycle/lifecycle\" but cannot be named. ts(4023)\n// and keep same export members\nnamespace createLifecycleHooks {\n    export interface LoadEventContext {\n        chapter: boot.config.ChapterName;\n        country: boot.config.AnyCountry;\n    }\n}\n\nexport interface LifecycleEvents {\n    willLoad: createLifecycleHooks.LoadEventContext;\n    willUnload: createLifecycleHooks.LoadEventContext;\n    didLoad: createLifecycleHooks.LoadEventContext;\n    didUnload: createLifecycleHooks.LoadEventContext;\n    willStart: void;\n}\n\nconst createLifecycleHooks = ({\n    captureException,\n}: {\n    captureException: Hooks.ErrorHandler;\n}) => {\n    const hooks = new Hooks<LifecycleEvents>({\n        errorHandler: captureException,\n    });\n\n    const createAddListenerMethod = <N extends keyof LifecycleEvents>(\n        eventName: N,\n    ) => (\n        callback: Hooks.Callback,\n        options?: Partial<Hooks.Options<LifecycleEvents[N]>>,\n    ) => hooks.addHook(eventName, callback, options);\n\n    const onChapterWillLoad = createAddListenerMethod('willLoad');\n    const onChapterWillUnload = createAddListenerMethod('willUnload');\n    const onChapterDidLoad = createAddListenerMethod('didLoad');\n    const onChapterDidUnload = createAddListenerMethod('didUnload');\n    const onWillStart = createAddListenerMethod('willStart');\n\n    const onChapterUnload = onChapterWillLoad;\n    const onChapterLoad = onChapterDidLoad;\n\n    const createFireHookMethod = <N extends keyof LifecycleEvents>(\n        eventName: N,\n    ) => (context: LifecycleEvents[N]) =>\n        hooks.fireHooks<N>(eventName, context);\n\n    const willLoadEvents = createFireHookMethod('willLoad');\n    const willUnloadEvents = createFireHookMethod('willUnload');\n    const didLoadEvents = createFireHookMethod('didLoad');\n    const didUnloadEvents = createFireHookMethod('didUnload');\n    const willStartEvents = () => hooks.fireHooks('willStart', undefined);\n\n    return {\n        triggers: {\n            willLoadEvents,\n            willUnloadEvents,\n            didLoadEvents,\n            didUnloadEvents,\n            willStartEvents,\n        },\n        events: {\n            onChapterLoad,\n            onChapterUnload,\n            onChapterWillLoad,\n            onChapterWillUnload,\n            onChapterDidLoad,\n            onChapterDidUnload,\n            onWillStart,\n        },\n    };\n};\n\nexport { createLifecycleHooks };\n",
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-navigation/src/locale/getChapterCountry.ts",
      "messages": [
        {
          "ruleId": "max-params",
          "severity": 1,
          "message": "Arrow function has too many parameters (7). Maximum allowed is 5.",
          "line": 13,
          "column": 3,
          "nodeType": "ArrowFunctionExpression",
          "messageId": "exceed",
          "endLine": 13,
          "endColumn": 5
        }
      ],
      "errorCount": 0,
      "warningCount": 1,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "import { boot } from '@dazn/bootstrap-lib';\nimport { getPath } from '../utils/location';\nimport { getCountry } from './getCountry';\n\nconst getChapterCountry = (\n    location: Location,\n    getStartupDataCountry: StartupModule['getStartupDataCountry'],\n    getIsPortable: StartupModule['getIsPortable'],\n    chapterConfiguration: ConfigurationChapters,\n    getChapterFromPath: (path: string) => boot.config.ChapterName | undefined,\n    getSignupCountry: UserModule['getSignUpCountry'],\n    getContentCountry: UserModule['getContentCountry'],\n) => {\n    const currentPath = getPath(location);\n    const currentChapter = getChapterFromPath(currentPath);\n    const startupDataCountry = getStartupDataCountry();\n    const userSignupCountry = getSignupCountry();\n    const contentCountry = getContentCountry();\n    const shouldGetCountryFromURL = currentChapter\n        ? chapterConfiguration.getsCountryFromUrl(currentChapter)\n        : false;\n    const useSignUpCountry = currentChapter\n        ? chapterConfiguration.useSignUpCountry(currentChapter)\n        : false;\n    const isPortable =\n        currentChapter &&\n        chapterConfiguration.usePortability(currentChapter) &&\n        getIsPortable();\n\n    return getCountry(\n        startupDataCountry || '',\n        userSignupCountry,\n        shouldGetCountryFromURL ? currentPath : null,\n        contentCountry,\n        useSignUpCountry,\n        isPortable || false,\n    );\n};\n\nexport { getChapterCountry };\n",
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-navigation/src/locale/getCountry.ts",
      "messages": [
        {
          "ruleId": "max-params",
          "severity": 1,
          "message": "Function 'getCountry' has too many parameters (6). Maximum allowed is 5.",
          "line": 15,
          "column": 1,
          "nodeType": "FunctionDeclaration",
          "messageId": "exceed",
          "endLine": 15,
          "endColumn": 20
        }
      ],
      "errorCount": 0,
      "warningCount": 1,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "import { boot } from '@dazn/bootstrap-lib';\n\ntype Country = boot.config.AnyCountry;\n\nconst languageSegmentRegex = /^\\/[a-z]{2}-([a-z]{2})\\//i;\n\nconst getCountryFromUrl = (pathname: string) => {\n    const match = pathname.match(languageSegmentRegex);\n    if (match) {\n        return match[1].toLowerCase();\n    }\n    return null;\n};\n\nfunction getCountry(\n    startupDataCountry: Country,\n    userSignupCountry: Country | undefined,\n    pathname: string | null,\n    userTokenCountry: Country,\n    useSignUpCountry?: boolean,\n    isPortable?: boolean,\n) {\n    if (isPortable && userTokenCountry) {\n        return userTokenCountry.toLowerCase();\n    }\n\n    if (useSignUpCountry && userSignupCountry) {\n        return userSignupCountry.toLowerCase();\n    }\n\n    if (pathname) {\n        const urlCountry = getCountryFromUrl(pathname);\n        if (urlCountry) {\n            return urlCountry.toLowerCase();\n        }\n    }\n\n    // startup provides suitable fallback if the country is not in url\n    return startupDataCountry.toLowerCase();\n}\n\nexport { getCountry };\n",
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-navigation/src/locale/getLanguage.ts",
      "messages": [
        {
          "ruleId": "complexity",
          "severity": 1,
          "message": "Arrow function has a complexity of 11. Maximum allowed is 10.",
          "line": 30,
          "column": 21,
          "nodeType": "ArrowFunctionExpression",
          "messageId": "complex",
          "endLine": 91,
          "endColumn": 2
        },
        {
          "ruleId": "max-statements",
          "severity": 1,
          "message": "Arrow function has too many statements (15). Maximum allowed is 12.",
          "line": 30,
          "column": 21,
          "nodeType": "ArrowFunctionExpression",
          "messageId": "exceed",
          "endLine": 91,
          "endColumn": 2
        },
        {
          "ruleId": "max-params",
          "severity": 1,
          "message": "Arrow function has too many parameters (8). Maximum allowed is 5.",
          "line": 39,
          "column": 3,
          "nodeType": "ArrowFunctionExpression",
          "messageId": "exceed",
          "endLine": 39,
          "endColumn": 5
        }
      ],
      "errorCount": 0,
      "warningCount": 3,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "import { boot } from '@dazn/bootstrap-lib';\n\ntype Language = boot.config.Language;\n\nconst languageIsAllowed = (\n    allowedLanguages: Language[],\n    lang: Language | null,\n) => (lang == null ? false : allowedLanguages.includes(lang));\n\nconst getLanguageIfAllowed = (\n    allowedLanguages: Language[],\n    language: Language,\n    defaultLanguage: Language,\n) => {\n    if (languageIsAllowed(allowedLanguages, language)) {\n        return language;\n    }\n    return defaultLanguage;\n};\n\nconst languageSegmentRegex = /^\\/([a-z]{2})-[a-z]{2}\\//i;\nconst getLanguageFromUrl = (pathname: string) => {\n    const match = pathname.match(languageSegmentRegex);\n    if (match) {\n        return match[1].toLowerCase();\n    }\n    return null;\n};\n\nconst getLanguage = (\n    startupSupportedLanguages: Language[],\n    startupLanguage: Language,\n    cachedLanguage: Language | null,\n    userSupportedLanguages: Language[],\n    userLanguage?: Language,\n    pathname?: string,\n    skipUrlLanguageValidation?: boolean,\n    isUserLanguagePriority?: boolean,\n) => {\n    if (isUserLanguagePriority && userLanguage) {\n        return getLanguageIfAllowed(\n            userSupportedLanguages,\n            userLanguage,\n            startupLanguage,\n        );\n    }\n\n    if (pathname) {\n        const urlLanguage = getLanguageFromUrl(pathname);\n        const canUseUrlLanguage =\n            skipUrlLanguageValidation ||\n            languageIsAllowed(\n                userSupportedLanguages || startupSupportedLanguages,\n                urlLanguage,\n            );\n\n        if (urlLanguage && canUseUrlLanguage) {\n            return urlLanguage;\n        }\n    }\n\n    if (cachedLanguage) {\n        if (userLanguage) {\n            const allowedUserLanguage = getLanguageIfAllowed(\n                userSupportedLanguages,\n                userLanguage,\n                startupLanguage,\n            );\n            return getLanguageIfAllowed(\n                userSupportedLanguages,\n                cachedLanguage,\n                allowedUserLanguage,\n            );\n        }\n        return getLanguageIfAllowed(\n            startupSupportedLanguages,\n            cachedLanguage,\n            startupLanguage,\n        );\n    }\n\n    if (userLanguage) {\n        return getLanguageIfAllowed(\n            userSupportedLanguages,\n            userLanguage,\n            startupLanguage,\n        );\n    }\n\n    return startupLanguage;\n};\n\nexport { getLanguage };\n",
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-navigation/src/resourceStrings/getResourceStringErrorCode.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-navigation/src/resourceStrings/getResourceStringLinkOverrides.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-navigation/src/resourceStrings/getResourceStrings.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-navigation/src/utils/getChapterFromPath.ts",
      "messages": [
        {
          "ruleId": "complexity",
          "severity": 1,
          "message": "Arrow function has a complexity of 12. Maximum allowed is 10.",
          "line": 39,
          "column": 36,
          "nodeType": "ArrowFunctionExpression",
          "messageId": "complex",
          "endLine": 110,
          "endColumn": 2
        },
        {
          "ruleId": "max-statements",
          "severity": 1,
          "message": "Arrow function has too many statements (24). Maximum allowed is 12.",
          "line": 39,
          "column": 36,
          "nodeType": "ArrowFunctionExpression",
          "messageId": "exceed",
          "endLine": 110,
          "endColumn": 2
        },
        {
          "ruleId": "max-statements",
          "severity": 1,
          "message": "Arrow function has too many statements (13). Maximum allowed is 12.",
          "line": 112,
          "column": 32,
          "nodeType": "ArrowFunctionExpression",
          "messageId": "exceed",
          "endLine": 174,
          "endColumn": 2
        }
      ],
      "errorCount": 0,
      "warningCount": 3,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "import { keysOf, boot } from '@dazn/bootstrap-lib';\n\n// Matches:\n//   '/'\n//   '/en-DE'\n//   '/en-DE/'\nconst ROOT_REGEX = /^(\\/[a-z]{2}-[a-z]{2})?\\/?$/i;\nconst isRoot = (pathname: string) =>\n    ROOT_REGEX.test(pathname) || pathname.includes('index.html');\n\n// Matches:\n//   '/en-DE'\n//   '/en-de'\n//   '/EN-DE'\n//   '/EN-de'\nconst LANG_REGEX = /^\\/[a-z]{2}-[a-z]{2}/i;\nconst getChapterNameFromMap = (\n    urlPath: string,\n    availableChapters: boot.config.ChapterMap<string[]>,\n) => {\n    const pathWithoutLanguage = urlPath.replace(LANG_REGEX, '');\n    const [, pageName] = pathWithoutLanguage.split('/');\n    const chapters = keysOf(availableChapters);\n    return chapters.filter(chapter =>\n        availableChapters[chapter]!.includes(pageName),\n    );\n};\n\nconst getMatchingChapterNamesFromPath = (\n    urlPath: string,\n    authorizedMap: ConfigurationChapters['authorizedMap'],\n    unauthorizedMap: ConfigurationChapters['unauthorizedMap'],\n) =>\n    [\n        ...getChapterNameFromMap(urlPath, authorizedMap),\n        ...getChapterNameFromMap(urlPath, unauthorizedMap),\n    ].filter(entry => entry);\n\nconst verifyChapterAuthorization = ({\n    configuration,\n    getIsActive,\n    getIsAuthorized,\n    chapters,\n}: {\n    configuration: ConfigurationChapters;\n    getIsActive: (statuses: string[] | undefined) => boolean;\n    getIsAuthorized: () => boolean;\n    chapters: boot.config.ChapterName[];\n}) => {\n    const {\n        authorizedMap,\n        unauthorizedMap,\n        rootAuthorized,\n        loginChapter,\n    } = configuration;\n\n    const isAuthorized = getIsAuthorized();\n\n    const anonMatch = keysOf(unauthorizedMap).filter(chapter =>\n        chapters.includes(chapter),\n    );\n\n    const authMatch = keysOf(authorizedMap).filter(chapter =>\n        chapters.includes(chapter),\n    );\n\n    const authOnly = authMatch.filter(chapter => !anonMatch.includes(chapter));\n\n    const anonOnly = anonMatch.filter(chapter => !authMatch.includes(chapter));\n\n    const anyOnly = anonMatch.filter(chapter => authMatch.includes(chapter));\n\n    const [authorizedChapter = null] = authOnly;\n\n    const [anonymousChapter = null] = anonOnly;\n\n    const [any = null] = anyOnly;\n\n    const requiresAuth = Boolean(authorizedChapter) && !any;\n\n    if (requiresAuth) {\n        if (\n            isAuthorized &&\n            authorizedChapter &&\n            getIsActive(configuration.allowedUserStatuses(authorizedChapter))\n        ) {\n            return authorizedChapter;\n        }\n        return loginChapter;\n    }\n\n    if (anonymousChapter) {\n        if (!getIsActive(configuration.allowedUserStatuses(anonymousChapter))) {\n            return anonymousChapter;\n        }\n        return isAuthorized ? rootAuthorized : anonymousChapter;\n    }\n\n    if (any) {\n        if (\n            authorizedChapter &&\n            getIsActive(configuration.allowedUserStatuses(authorizedChapter))\n        ) {\n            return authorizedChapter;\n        }\n        return any;\n    }\n\n    return chapters[0];\n};\n\nconst getChapterInfoFromPath = ({\n    configuration,\n    isAuthorized,\n    getIsActive,\n    pathname,\n    startupDataCountry,\n}: {\n    configuration: Configuration;\n    isAuthorized: boolean;\n    getIsActive: UserModule['getIsActive'];\n    pathname: string;\n    startupDataCountry: boot.config.AnyCountry | boot.config.MoonCountry;\n}) => {\n    const {\n        rootAuthorized,\n        getUnauthorized,\n        allowedUserStatuses,\n        authorizedMap,\n        unauthorizedMap,\n    } = configuration.chapters;\n\n    if (pathname.includes(configuration.appUrlPrefix)) {\n        pathname = pathname.replace(configuration.appUrlPrefix, '');\n    }\n\n    const isRootPath = isRoot(pathname);\n    if (isRootPath) {\n        const hasAuth =\n            isAuthorized &&\n            rootAuthorized &&\n            getIsActive(allowedUserStatuses(rootAuthorized));\n        const chapterName = hasAuth\n            ? rootAuthorized\n            : getUnauthorized(startupDataCountry);\n        return {\n            isRootPath,\n            chapterName,\n            verifiedChapterName: chapterName,\n        };\n    }\n    const availableChapters = getMatchingChapterNamesFromPath(\n        pathname,\n        authorizedMap,\n        unauthorizedMap,\n    );\n    const verifiedChapterName = verifyChapterAuthorization({\n        configuration: configuration.chapters,\n        getIsActive,\n        getIsAuthorized: () => isAuthorized,\n        chapters: availableChapters,\n    });\n    const authorizedAndAllowed = getIsActive(allowedUserStatuses(verifiedChapterName)) && isAuthorized;\n    const chapterName =\n        keysOf(authorizedAndAllowed ? authorizedMap : unauthorizedMap).find(cn =>\n            availableChapters.includes(cn),\n        ) || availableChapters[0];\n\n    return {\n        isRootPath,\n        chapterName,\n        verifiedChapterName,\n    };\n};\n\nconst getChapterFromPath = (\n    configuration: Configuration,\n    getIsAuthorized: UserModule['getIsAuthorized'],\n    getIsActive: UserModule['getIsActive'],\n    pathname: string,\n    startupDataCountry: boot.config.AnyCountry | boot.config.MoonCountry,\n) =>\n    getChapterInfoFromPath({\n        configuration,\n        isAuthorized: getIsAuthorized(),\n        getIsActive,\n        pathname,\n        startupDataCountry,\n    }).verifiedChapterName;\n\nexport {\n    getChapterFromPath,\n    verifyChapterAuthorization,\n    getChapterInfoFromPath,\n};\n",
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-navigation/src/utils/location.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-navigation/src/utils/mockEraro.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-navigation/src/utils/normalizeChapter.ts",
      "messages": [
        {
          "ruleId": "complexity",
          "severity": 1,
          "message": "Arrow function has a complexity of 11. Maximum allowed is 10.",
          "line": 26,
          "column": 26,
          "nodeType": "ArrowFunctionExpression",
          "messageId": "complex",
          "endLine": 55,
          "endColumn": 2
        }
      ],
      "errorCount": 0,
      "warningCount": 1,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "import { boot, isChapterName } from '@dazn/bootstrap-lib';\n/**\n * This function normalizes all variations into a single output and is idempotent.\n *\n * There are multiple types and formats to represent a chapter, some are legac\n * As an Object\n * ```js\n * {\n * // chapter name\n *   chapterName: 'name',\n *   name: 'name',\n *   value: 'name',\n *\n * // additional data\n *   chapterData: { foo: 'bar' },\n *\n * // navigation path\n *   chapterPath: '/foo/bar',\n *   pathname: '/foo/bar',\n *   path: '/foo/bar',\n * }\n * ```\n *\n * As a stirng: 'catalog'\n */\nconst normalizeChapter = (\n    chapter: Partial<boot.config.ChapterNameLike>,\n    currentChapterPath: string,\n): boot.config.NormalChapterConfig | null => {\n    const [chapterName, chapterData, chapterPath] =\n        typeof chapter === 'string'\n            ? [chapter, null, currentChapterPath]\n            : [\n                  chapter.chapterName || chapter.name || chapter.value,\n                  chapter.chapterData ||\n                      chapter.data ||\n                      // FIXME: (Maxim) this is weird.\n                      // We should deprecate this pattern\n                      ((chapter as unknown) as boot.config.ChapterData) ||\n                      null,\n                  chapter.chapterPath ||\n                      chapter.pathname ||\n                      chapter.path ||\n                      currentChapterPath,\n              ];\n\n    if (!isChapterName(chapterName)) {\n        return null;\n    }\n    return {\n        chapterName,\n        chapterData,\n        chapterPath,\n    };\n};\n\nexport { normalizeChapter };\n",
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-navigation/src/utils/slash.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-network-lifecycle/jest.config.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-network-lifecycle/src/index.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-newrelic/snippets/index.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-nfrs/jest.config.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-nfrs/src/addEventListener.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-nfrs/src/consts/errorType.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-nfrs/src/consts/eventType.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-nfrs/src/consts/metricType.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-nfrs/src/dispatchEvent.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-nfrs/src/index.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-nfrs/src/interfaces/ICreateNfrsModuleProps.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-nfrs/src/interfaces/IMark.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-nfrs/src/interfaces/IMetric.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-nfrs/src/measuresManager.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-nfrs/src/setMeasuresLogic.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-optimizely/jest.config.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-optimizely/src/index.ts",
      "messages": [
        {
          "ruleId": "max-statements",
          "severity": 1,
          "message": "Function 'createOptimizelyModule' has too many statements (17). Maximum allowed is 12.",
          "line": 79,
          "column": 1,
          "nodeType": "FunctionDeclaration",
          "messageId": "exceed",
          "endLine": 435,
          "endColumn": 2
        }
      ],
      "errorCount": 0,
      "warningCount": 1,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "import {\n    createInstance,\n    ActivateListenerPayload,\n    Client,\n    setLogLevel,\n    enums as optimizelyEnums,\n} from '@optimizely/optimizely-sdk';\nimport { boot } from '@dazn/bootstrap-lib';\n\nimport { composeDatafileUrl, fetchWithTimeout } from './utils/datafile';\nimport { checkAttributes } from './utils/checkAttributes';\n\ntype Attributes = boot.optimizely.Attributes;\ntype EventTags = boot.optimizely.EventTags;\n\nexport interface Environments {\n    DEVELOPMENT: string;\n    TESTING: string;\n    EDGE: string;\n    STAGING: string;\n    PRODUCTION: string;\n}\n\nexport interface LivingRoomAttributes {\n    /**\n     * @example '2.4.0' || '2.5' || 'Z14.5.75.2'\n     */\n    getFirmwareVersion: () => string;\n    /**\n     * @example 'sony' || 'microsoft' || 'deutsche-telekom'\n     */\n    getManufacturer: () => string;\n    /**\n     * @example 'Pro' || 'X' || 'S' || 'MRG5'\n     */\n    getDeviceModel: () => string;\n}\n\nexport interface CreateOptimizelyModuleProps {\n    currentEnvironment: string;\n    environments: Environments;\n    getViewerId: () => string;\n    getDeviceId: () => string;\n    getAccountStatus: () => string;\n    getBrowser: () => string;\n    getBrowserVersion: () => string;\n    getUserCountryCode: () => string;\n    getDeviceType: () => string;\n    getUserLanguage: () => string;\n    getOs: () => string;\n    getChapterName: () => string;\n    getFullURL: () => string;\n    fetchTimeout?: number;\n    /**\n     * @example 'magentatv' || 'ps5'\n     */\n    getPlatform: () => string;\n    livingRoomAttributes?: LivingRoomAttributes;\n}\n\nconst LOCALE_SEGMENT_REGEX = /\\/([a-z]{2})-([a-z]{2}|eu|global)\\//;\nconst getLocaleFromURL = (url: string) => {\n    const match = url.toLowerCase().match(LOCALE_SEGMENT_REGEX);\n    return match ? { language: match[1], country: match[2] } : {};\n};\n\nconst trackActivation = (payload: ActivateListenerPayload) => {\n    window.dataLayer.push({\n        event: 'optimizelyActivation',\n        optimizely: {\n            experimentName: payload.experiment.key,\n            experimentId: payload.experiment.id,\n            variantName: payload.variation.key,\n            variantId: payload.variation.id,\n        },\n    });\n};\n\nfunction createOptimizelyModule({\n    currentEnvironment,\n    environments,\n    getViewerId,\n    getDeviceId,\n    getAccountStatus,\n    getBrowser,\n    getBrowserVersion,\n    getUserCountryCode,\n    getDeviceType,\n    getUserLanguage,\n    getOs,\n    getChapterName,\n    getFullURL,\n    fetchTimeout = 3000,\n    getPlatform,\n    livingRoomAttributes,\n}: CreateOptimizelyModuleProps) {\n    let optimizelyClientInstance: Client;\n\n    let isClientInitialized = false;\n\n    const isProd = currentEnvironment === environments.PRODUCTION;\n\n    const getLivingRoomAttributes = () => {\n        if (!livingRoomAttributes) {\n            return {};\n        }\n        const {\n            getFirmwareVersion,\n            getManufacturer,\n            getDeviceModel,\n        } = livingRoomAttributes;\n\n        return {\n            FirmwareVersion: getFirmwareVersion(),\n            Manufacturer: getManufacturer(),\n            DeviceModel: getDeviceModel(),\n        };\n    };\n\n    const defaultAttributes = () => {\n        const fullURL = getFullURL();\n        const { language, country } = getLocaleFromURL(fullURL);\n\n        return {\n            AccountStatus: getAccountStatus(),\n            Browser: getBrowser(),\n            BrowserVersion: getBrowserVersion(),\n            UserCountryCode: getUserCountryCode(),\n            Type: getDeviceType(),\n            UserLanguageLocaleKey: getUserLanguage(),\n            Os: getOs(),\n            Chapter: getChapterName(),\n            OptimizelyEnvironment: currentEnvironment,\n            FullURL: fullURL,\n            URLCountry: country,\n            URLLanguage: language,\n            Platform: getPlatform(),\n            ...getLivingRoomAttributes(),\n        };\n    };\n\n    const containsOverrideOfDefaultAttribute = checkAttributes(\n        defaultAttributes,\n    );\n\n    const createOptimizelyInstance = () => {\n        if (isProd) {\n            setLogLevel(optimizelyEnums.LOG_LEVEL.ERROR);\n        }\n        const datafileUrl = composeDatafileUrl(\n            environments,\n            currentEnvironment,\n        );\n\n        return fetchWithTimeout(datafileUrl, fetchTimeout)\n            .then((datafile: any) => {\n                optimizelyClientInstance = createInstance({\n                    datafile,\n                });\n                return optimizelyClientInstance.onReady();\n            })\n            .then(({ success }) => {\n                isClientInitialized = success;\n                return success ? undefined : Promise.reject('Invalid datafile');\n            })\n            .catch(err => {\n                if (!isProd && err) {\n                    console.log(err);\n                }\n                return Promise.resolve();\n            });\n    };\n\n    const getExperimentAttributes = (attributes: Attributes = {}) => {\n        containsOverrideOfDefaultAttribute(attributes);\n\n        const viewerId = getViewerId();\n        const viewerIdAttribute = viewerId ? { ViewerID: viewerId } : {};\n        return {\n            ...attributes,\n            ...defaultAttributes(),\n            ...viewerIdAttribute,\n        };\n    };\n\n    const getVariation = (\n        experimentName: string,\n        userId: string,\n        attributes?: Attributes,\n    ) => {\n        if (!isClientInitialized) {\n            return null;\n        }\n        return optimizelyClientInstance.getVariation(\n            experimentName,\n            userId,\n            getExperimentAttributes(attributes),\n        );\n    };\n    const isFeatureEnabled = (\n        experimentName: string,\n        userId: string,\n        attributes?: Attributes,\n    ) => {\n        if (!isClientInitialized) {\n            return null;\n        }\n\n        return optimizelyClientInstance.isFeatureEnabled(\n            experimentName,\n            userId,\n            getExperimentAttributes(attributes),\n        );\n    };\n\n    const track = (\n        experimentName: string,\n        userId: string,\n        attributes?: Attributes,\n        eventTags?: EventTags,\n    ) => {\n        if (!isClientInitialized) {\n            return null;\n        }\n\n        return optimizelyClientInstance.track(\n            experimentName,\n            userId,\n            getExperimentAttributes(attributes),\n            eventTags || undefined,\n        );\n    };\n\n    const activate = (\n        experimentName: string,\n        userId: string,\n        attributes?: Attributes,\n    ) => {\n        if (!isClientInitialized) {\n            return null;\n        }\n\n        return optimizelyClientInstance.activate(\n            experimentName,\n            userId,\n            getExperimentAttributes(attributes),\n        );\n    };\n\n    const getVariableBoolean = (\n        experimentKey: string,\n        variableKey: string,\n        userId: string,\n        attributes?: Attributes,\n    ) => {\n        if (!isClientInitialized) {\n            return null;\n        }\n\n        return optimizelyClientInstance.getFeatureVariableBoolean(\n            experimentKey,\n            variableKey,\n            userId,\n            getExperimentAttributes(attributes),\n        );\n    };\n    const getVariableInteger = (\n        experimentKey: string,\n        variableKey: string,\n        userId: string,\n        attributes?: Attributes,\n    ) => {\n        if (!isClientInitialized) {\n            return null;\n        }\n\n        return optimizelyClientInstance.getFeatureVariableInteger(\n            experimentKey,\n            variableKey,\n            userId,\n            getExperimentAttributes(attributes),\n        );\n    };\n    const getVariableString = (\n        experimentKey: string,\n        variableKey: string,\n        userId: string,\n        attributes?: Attributes,\n    ) => {\n        if (!isClientInitialized) {\n            return null;\n        }\n\n        return optimizelyClientInstance.getFeatureVariableString(\n            experimentKey,\n            variableKey,\n            userId,\n            getExperimentAttributes(attributes),\n        );\n    };\n\n    function warnAboutUnavailableViewerId() {\n        if (!getViewerId()) {\n            console.warn('getViewerId was called, but user is not authorized.');\n        }\n    }\n\n    return {\n        getVariationAnonymous(experimentKey: string, attributes?: Attributes) {\n            return getVariation(experimentKey, getDeviceId(), attributes);\n        },\n        activateAnonymous(experimentKey: string, attributes?: Attributes) {\n            return activate(experimentKey, getDeviceId(), attributes);\n        },\n        trackAnonymous(\n            experimentKey: string,\n            attributes?: Attributes,\n            eventTags?: EventTags,\n        ) {\n            return track(experimentKey, getDeviceId(), attributes, eventTags);\n        },\n        isEnabledAnonymous(experimentKey: string, attributes?: Attributes) {\n            return isFeatureEnabled(experimentKey, getDeviceId(), attributes);\n        },\n        getVariableBooleanAnonymous(\n            experimentKey: string,\n            variableKey: string,\n            attributes?: Attributes,\n        ) {\n            return getVariableBoolean(\n                experimentKey,\n                variableKey,\n                getDeviceId(),\n                attributes,\n            );\n        },\n        getVariableIntegerAnonymous(\n            experimentKey: string,\n            variableKey: string,\n            attributes?: Attributes,\n        ) {\n            return getVariableInteger(\n                experimentKey,\n                variableKey,\n                getDeviceId(),\n                attributes,\n            );\n        },\n        getVariableStringAnonymous(\n            experimentKey: string,\n            variableKey: string,\n            attributes?: Attributes,\n        ) {\n            return getVariableString(\n                experimentKey,\n                variableKey,\n                getDeviceId(),\n                attributes,\n            );\n        },\n        getVariationAuthenticated(\n            experimentKey: string,\n            attributes?: Attributes,\n        ) {\n            warnAboutUnavailableViewerId();\n            return getVariation(experimentKey, getViewerId(), attributes);\n        },\n        activateAuthenticated(experimentKey: string, attributes?: Attributes) {\n            warnAboutUnavailableViewerId();\n            return activate(experimentKey, getViewerId(), attributes);\n        },\n        trackAuthenticated(\n            experimentKey: string,\n            attributes?: Attributes,\n            eventTags?: EventTags,\n        ) {\n            warnAboutUnavailableViewerId();\n            return track(experimentKey, getViewerId(), attributes, eventTags);\n        },\n        isEnabledAuthenticated(experimentKey: string, attributes?: Attributes) {\n            warnAboutUnavailableViewerId();\n            return isFeatureEnabled(experimentKey, getViewerId(), attributes);\n        },\n        getVariableBooleanAuthenticated(\n            experimentKey: string,\n            variableKey: string,\n            attributes?: Attributes,\n        ) {\n            warnAboutUnavailableViewerId();\n            return getVariableBoolean(\n                experimentKey,\n                variableKey,\n                getViewerId(),\n                attributes,\n            );\n        },\n        getVariableIntegerAuthenticated(\n            experimentKey: string,\n            variableKey: string,\n            attributes?: Attributes,\n        ) {\n            warnAboutUnavailableViewerId();\n            return getVariableInteger(\n                experimentKey,\n                variableKey,\n                getViewerId(),\n                attributes,\n            );\n        },\n        getVariableStringAuthenticated(\n            experimentKey: string,\n            variableKey: string,\n            attributes?: Attributes,\n        ) {\n            warnAboutUnavailableViewerId();\n            return getVariableString(\n                experimentKey,\n                variableKey,\n                getViewerId(),\n                attributes,\n            );\n        },\n        run: () =>\n            createOptimizelyInstance().then(() => {\n                if (!isClientInitialized) {\n                    return;\n                }\n\n                optimizelyClientInstance.notificationCenter.addNotificationListener<ActivateListenerPayload>(\n                    optimizelyEnums.NOTIFICATION_TYPES.ACTIVATE,\n                    trackActivation,\n                );\n            }),\n    };\n}\n\nexport { createOptimizelyModule };\n",
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-optimizely/src/utils/checkAttributes.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-optimizely/src/utils/datafile.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-pointer-visibility/jest.config.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-pointer-visibility/src/index.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-public-api/jest.config.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-public-api/src/globalFunctions.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-public-api/src/globalProperties.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-public-api/src/index.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-public-api/src/publicApi.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-splash/jest.config.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-splash/logoSpinner.d.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-splash/logoSpinner.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-splash/rubix.d.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-splash/rubix.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-splash/spinner.d.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-splash/spinner.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-splash/src/index.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-splash/src/processSplash.d.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-splash/src/splash/assets.d.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-splash/src/splash/logoSpinner.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-splash/src/splash/processSplash.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-splash/src/splash/rubix.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-splash/src/splash/spinner.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-splash/src/splash/yellowLine.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-splash/src/splashAndStyles.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-splash/yellowLine.d.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-splash/yellowLine.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-startup/jest.config.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-startup/src/bootstrap-types.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-startup/src/checkForRedirect.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-startup/src/fetchStartupData.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-startup/src/getLandingPageProperties.ts",
      "messages": [
        {
          "ruleId": "max-statements",
          "severity": 1,
          "message": "Arrow function has too many statements (13). Maximum allowed is 12.",
          "line": 1,
          "column": 41,
          "nodeType": "ArrowFunctionExpression",
          "messageId": "exceed",
          "endLine": 33,
          "endColumn": 2
        }
      ],
      "errorCount": 0,
      "warningCount": 1,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "export const getLandingPageProperties = (getCurrentPath: () => string) => {\n    const landingPageProperties = {\n        campaignId: 'generic',\n        promoId: '',\n    };\n\n    // split url and filter out empty segments, since pathname allways starts with initial slash\n    // https://developer.mozilla.org/en-US/docs/Web/API/Location\n    const pathSegments = getCurrentPath()\n        .split('/')\n        .filter(s => s);\n    const languageSlugRegex = /^[a-z]{2}-([a-z]{2}|global)$/i;\n    const isPpageShortUrl = pathSegments[0] === 'p';\n    // if url is empty, or does not start with language slug and is not a /p/ page\n    if (\n        !pathSegments.length ||\n        (!pathSegments[0].match(languageSlugRegex) && !isPpageShortUrl)\n    ) {\n        return landingPageProperties;\n    }\n\n    if (!isPpageShortUrl) pathSegments.shift();\n    const chapterSlug = pathSegments.shift();\n\n    if (chapterSlug === 'p') {\n        landingPageProperties.promoId = pathSegments.join('/');\n    }\n\n    if (chapterSlug === 'c') {\n        landingPageProperties.campaignId = pathSegments.join('/');\n    }\n    return landingPageProperties;\n};\n",
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-startup/src/index.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-startup/src/mockEraro.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-storage/jest.config.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-storage/src/createAsyncStorageAPI.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-storage/src/createStorageFallback.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-storage/src/index.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-taf/jest.config.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-taf/src/attachScript.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-taf/src/index.ts",
      "messages": [
        {
          "ruleId": "max-statements",
          "severity": 1,
          "message": "Arrow function 'run' has too many statements (15). Maximum allowed is 12.",
          "line": 62,
          "column": 10,
          "nodeType": "ArrowFunctionExpression",
          "messageId": "exceed",
          "endLine": 96,
          "endColumn": 6
        }
      ],
      "errorCount": 0,
      "warningCount": 1,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "import '@dazn/bootstrap-lib';\nimport { attachScript } from './attachScript';\n\nconst environments = {\n    DEVELOPMENT: 'development',\n    TESTING: 'testing',\n    EDGE: 'edge',\n    STAGING: 'staging',\n    PRODUCTION: 'production',\n} as const;\ntype Values<T extends {}> = T[keyof T];\ntype Environment = Values<typeof environments>;\n\ndeclare module '@dazn/bootstrap-lib' {\n    interface DAZN {\n        taf: {\n            on: boolean;\n            sleep: boolean;\n            env: Environment;\n        };\n    }\n}\n\n/*\nthe environment parameter is rather only to be used by testops team\nduring the development of TAF - to force injecting of the non-production-ready,\ne.g. testing script, which would then communicate with TAF services\ndeployed to dazn-taf-testing environment.\n\nWe don't have edge env there, just dev, test, stage and prod,\nthat's why there was no edge here :)\nand our intention is that for all builds of the targets\ntarget teams use the production build of taf-tv\nwhich communicates with production taf - that's why it is default env here\n*/\n/**\n * @deprecated since version 14.4.3. Please use @dazn/taf-injector in target\n */\nexport const urlConfig: Record<string, string> = {\n    [environments.DEVELOPMENT]: 'https://tv.taf.dazn-dev.com/taf-tv.js',\n    [environments.TESTING]: 'https://tv.taf.dazn-test.com/taf-tv.js',\n    [environments.STAGING]: 'https://tv.taf.dazn-stage.com/taf-tv.js',\n    [environments.PRODUCTION]: 'https://tv.taf.indazn.com/taf-tv.js',\n};\n\nconst convertBooleanLikeToBoolean = (value: string, defaultValue: boolean) => {\n    if (value.toLowerCase() === 'true') {\n        return true;\n    }\n    if (value.toLowerCase() === 'false') {\n        return false;\n    }\n    return defaultValue;\n};\n\n/**\n * @deprecated since version 14.4.3. Please use @dazn/taf-injector in target\n */\nexport const createTafModule = ({\n    alwaysEnabledEnvs = [],\n}: { alwaysEnabledEnvs?: string[] } = {}) => ({\n    run: () => {\n        const isEnvsAnArray = Array.isArray(alwaysEnabledEnvs);\n        if (!isEnvsAnArray) {\n            console.info(\n                `[createTafModule] Could not parse alwaysEnabledEnvs, it must be an array but got ${alwaysEnabledEnvs}.`,\n            );\n        }\n        const urlParams = new URLSearchParams(window.location.search);\n        const tafFlag = urlParams.get('taf') || '';\n        const sleepFlag = urlParams.get('sleep') || '';\n        const isTafEnabledByDefault =\n            isEnvsAnArray &&\n            alwaysEnabledEnvs.indexOf(window.dazn.environment) >= 0;\n\n        const urlEnv = urlParams.get('env');\n        const env =\n            urlEnv &&\n            Object.values(environments).includes(urlEnv as Environment)\n                ? (urlEnv as Environment)\n                : environments.PRODUCTION;\n        const url = urlConfig[env];\n\n        window.dazn.taf = {\n            on: convertBooleanLikeToBoolean(tafFlag, isTafEnabledByDefault),\n            sleep: convertBooleanLikeToBoolean(sleepFlag, true),\n            env,\n        };\n\n        if (!window.dazn.taf.on) {\n            return;\n        }\n\n        attachScript(url);\n        console.info(`[createTafModule] TAF script injected: ${url}`);\n    },\n});\n",
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-text-to-speech/babel.config.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-text-to-speech/jest.config.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-text-to-speech/src/SpeechSynth.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-text-to-speech/src/index.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-tv-launcher/babel.config.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-tv-launcher/jest.config.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-tv-launcher/src/createUserConsent.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-tv-launcher/src/index.ts",
      "messages": [
        {
          "ruleId": "max-statements",
          "severity": 1,
          "message": "Function 'launchBootstrap' has too many statements (17). Maximum allowed is 12.",
          "line": 152,
          "column": 1,
          "nodeType": "FunctionDeclaration",
          "messageId": "exceed",
          "endLine": 675,
          "endColumn": 2
        },
        {
          "ruleId": "max-statements",
          "severity": 1,
          "message": "Arrow function has too many statements (22). Maximum allowed is 12.",
          "line": 223,
          "column": 23,
          "nodeType": "ArrowFunctionExpression",
          "messageId": "exceed",
          "endLine": 674,
          "endColumn": 6
        }
      ],
      "errorCount": 0,
      "warningCount": 2,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "import { boot, getChapterName } from '@dazn/bootstrap-lib';\nimport { eraroCodesMap } from '@dazn/bootstrap-lib/eraro';\nimport { createInitializationModule } from '@dazn/bootstrap-module-initialization';\nimport { createErrorHandlingModule } from '@dazn/bootstrap-module-error-handling';\nimport { createExperimentsModule } from '@dazn/bootstrap-module-experiments';\nimport { createUserModule } from '@dazn/bootstrap-module-user';\nimport { createStartupModule } from '@dazn/bootstrap-module-startup';\nimport { createStorageModule as defaultCreateStorageModule } from '@dazn/bootstrap-module-storage';\nimport { createPublicApiModule } from '@dazn/bootstrap-module-public-api';\nimport { createAnalyticsModule } from '@dazn/bootstrap-module-analytics';\nimport {\n    createConfigurationModule,\n    ConfigurationModuleParams,\n} from '@dazn/bootstrap-module-configuration';\nimport { DEFAULT_EVENTS as DEFAULT_KEY_EVENTS } from '@dazn/bootstrap-module-key-mapping';\nimport {\n    chapterNames,\n    environments,\n} from '@dazn/bootstrap-module-configuration/constants';\nimport { createNavigationModule } from '@dazn/bootstrap-module-navigation';\nimport {\n    createKeyMappingModule,\n    KeyMapping,\n} from '@dazn/bootstrap-module-key-mapping';\nimport { createNfrsModule } from '@dazn/bootstrap-module-nfrs';\nimport { createSplashModule } from '@dazn/bootstrap-module-splash';\nimport yellowLine from '@dazn/bootstrap-module-splash/yellowLine';\nimport spinner from '@dazn/bootstrap-module-splash/spinner';\nimport logoSpinner from '@dazn/bootstrap-module-splash/logoSpinner';\nimport { createBootstrapDynamicBaseUrlModule } from '@dazn/bootstrap-module-dynamic-base-url';\nimport { createActivityLifecycleModule } from '@dazn/bootstrap-module-activity-lifecycle';\nimport { createNetworkLifecycleModule } from '@dazn/bootstrap-module-network-lifecycle';\nimport { createPointerStatusModule } from '@dazn/bootstrap-module-pointer-visibility';\nimport {\n    createTextToSpeechModule,\n    SpeechSynth,\n} from '@dazn/bootstrap-module-text-to-speech';\nimport { createUserConsent } from './createUserConsent';\n\ninterface LauncherParamsConfig {\n    bootstrapConfigJson: ConfigurationModuleParams;\n    keyMapping: KeyMapping.Config;\n    bootstrapVersion: string;\n    // optional\n    splashScreenBehaviour?: unknown;\n    getLanguages?: typeof defaultGetLanguages;\n    getApplicationType?: () => string;\n    ttsSynth?: SpeechSynth;\n    selectorsExcludedFromCleaning?: string[];\n}\ninterface LauncherParamsDevice {\n    getManufacturer: () => string;\n    exitApp: () => void;\n    registerActivityLifecycleEvents: (triggers: {\n        triggerActiveState: () => void;\n        triggerInactiveState: () => void;\n        triggerHoldState: () => void;\n        triggerTerminatedState: () => void;\n    }) => void;\n    // optional\n    fetchId?: () => Promise<string>;\n    onReady?: () => Promise<void>;\n    getModel?: () => string;\n    getFirmwareVersion?: () => string;\n    networkHandler?: typeof defaultNetworkHandler;\n    pointerHandler?: (\n        triggerPointerActive: () => void,\n        triggerPointerInactive: () => void,\n    ) => void;\n}\ninterface LauncherParamsInit {\n    getInitialChapterToLoad?: typeof defaultGetInitialChapterToLoad;\n    getLaunchParams?: typeof defaultGetLaunchParams;\n}\ninterface LauncherParamsDevConfig {\n    chapterBaseURLs?: {\n        label: string;\n        url: string;\n    }[];\n}\ninterface LauncherParamsModules {\n    createStorageModule?: typeof defaultCreateStorageModule;\n}\ninterface LauncherParams {\n    config: LauncherParamsConfig;\n    device: LauncherParamsDevice;\n    devConfig?: LauncherParamsDevConfig;\n    init?: LauncherParamsInit;\n    modules?: LauncherParamsModules;\n}\n\nconst defaultGetLanguages = (_window = window) => {\n    const languages = _window?.navigator?.languages;\n    if (languages && languages.length > 0 && Array.isArray(languages)) {\n        return [...languages].join(',');\n    }\n\n    const language = _window?.navigator?.language;\n\n    if (language) {\n        return language;\n    }\n    return '';\n};\n\nconst getParamKey = (key: string) => {\n    const urlParams = new URLSearchParams(window.location.search);\n    return urlParams.get(key);\n};\n\nconst defaultGetLaunchParams = () => {\n    const eventId = getParamKey('eventId');\n    const origin = getParamKey('origin');\n\n    if (!origin || !eventId) {\n        return;\n    }\n\n    return {\n        origin,\n        eventId,\n    };\n};\n\nconst defaultGetInitialChapterToLoad = () => {\n    const chapterName = getParamKey('chapterName');\n    const eventId = getParamKey('eventId');\n    const origin = getParamKey('origin');\n\n    if (!origin || !chapterName || !eventId) {\n        return;\n    }\n\n    window.history.pushState({}, document.title, '/');\n    return {\n        chapterName: chapterName as boot.config.ChapterName,\n        chapterData: {\n            eventId,\n            origin,\n        },\n    };\n};\n\nconst defaultNetworkHandler = (\n    triggerOnlineState: () => void,\n    triggerOfflineState: () => void,\n) => {\n    window.addEventListener('online', triggerOnlineState);\n    window.addEventListener('offline', triggerOfflineState);\n};\n\nfunction launchBootstrap(launcherConfiguration: LauncherParams) {\n    const {\n        config: {\n            bootstrapConfigJson,\n            keyMapping,\n            bootstrapVersion,\n            splashScreenBehaviour = 'hide',\n            getLanguages = defaultGetLanguages,\n            getApplicationType = () => bootstrapConfigJson.target,\n            ttsSynth,\n            selectorsExcludedFromCleaning,\n        },\n        device: {\n            onReady = () => Promise.resolve(),\n            getModel = () => '',\n            fetchId,\n            getFirmwareVersion = () => '',\n            getManufacturer,\n            exitApp,\n            registerActivityLifecycleEvents,\n            networkHandler = defaultNetworkHandler,\n            pointerHandler,\n        },\n        devConfig = {},\n        init = {},\n        modules = {},\n    } = launcherConfiguration;\n\n    const { chapterBaseURLs = [] } = devConfig;\n    const {\n        getInitialChapterToLoad = defaultGetInitialChapterToLoad,\n        getLaunchParams = defaultGetLaunchParams,\n    } = init;\n    const { createStorageModule = defaultCreateStorageModule } = modules;\n\n    const isNonProductionEnv =\n        bootstrapConfigJson.environment !== environments.PRODUCTION;\n\n    createKeyMappingModule(keyMapping);\n\n    const getCurrentUrl = (_window = window) => _window?.location?.href;\n\n    const getCurrentPath = (_window = window) => _window?.location?.pathname;\n\n    const getCurrentHostname = (_window = window) =>\n        _window?.location?.hostname || '';\n\n    const storageModule = createStorageModule(window);\n\n    const resourcesBaseUrlStorageKey = 'resourcesBaseUrl';\n    const appEntryPointStorageKey = 'appEntryPoint';\n\n    const textToSpeechModule = createTextToSpeechModule(ttsSynth);\n\n    if (isNonProductionEnv) {\n        // Should be included only for the \"dev\" versions of the bootstrap\n        createBootstrapDynamicBaseUrlModule({\n            predefinedEnvironments: chapterBaseURLs,\n            resourcesBaseUrlStorageKey,\n            appEntryPointStorageKey,\n            storage: storageModule.getStorage(),\n            reloadApp: () => {\n                location.reload();\n                return false;\n            },\n        });\n    }\n    const startingCall = isNonProductionEnv\n        ? storageModule.getItem(resourcesBaseUrlStorageKey)\n        : Promise.resolve(null);\n\n    startingCall.then(localBaseUrl => {\n        const resourcesBaseUrl =\n            localBaseUrl || bootstrapConfigJson.resourcesBaseUrl;\n\n        const configurationModule = createConfigurationModule({\n            ...bootstrapConfigJson,\n            resourcesBaseUrl,\n        });\n\n        const { configuration } = configurationModule;\n\n        const initializationModule = createInitializationModule({\n            storage: {\n                load: storageModule.getItem,\n                save: storageModule.setItem,\n            },\n            deviceDetails: {\n                platform: configuration.target,\n                manufacturer: getManufacturer(),\n                platformAttributes: {},\n            },\n            config: {\n                bootstrapVersion,\n                devModeIndicatorVariant: 'circle',\n                environment: configuration.environment,\n                environmentGroup: configuration.environmentGroup,\n            },\n            getCurrentUrl,\n            restartApp: () => window.location.reload(),\n            document: window.document,\n            fetchDeviceId: fetchId,\n        });\n\n        const analyticsModule = createAnalyticsModule({\n            getApplicationType,\n            getBootstrapVersion: initializationModule.getBootstrapVersion,\n            getEnvironment: initializationModule.getEnvironment,\n            getDeviceModel: getModel,\n            getDevicePlatform: initializationModule.getPlatform,\n            getDeviceId: initializationModule.getDeviceId,\n            getViewerId: () => userModule.getProfile().ViewerId,\n            getInitialUrl: initializationModule.getInitialUrl,\n            pushToDataLayer: event => window.dataLayer.push(event),\n            getIsProduction: () => configuration.environment === 'production',\n            appendToBody: el => document.body.appendChild(el),\n            getLaunchParams,\n            getCountry: () => ({\n                billingCountry: (\n                    userModule.getSignUpCountry() || ''\n                ).toLowerCase(),\n                geoCountry: startupModule.getStartupDataCountry() || '',\n                contentCountry: userModule.isAuthorized()\n                    ? userModule.getContentCountry()\n                    : startupModule.getStartupDataCountry() || '',\n            }),\n            getCurrentChapter: () =>\n                getChapterName(navigationModule.getCurrentChapter()),\n            getCurrentChapterVersion: () => {\n                const currentChapter = navigationModule.getCurrentChapter();\n                const currentChapterName = getChapterName(currentChapter);\n                const versions = initializationModule.getVersions();\n                return versions[currentChapterName];\n            },\n            getUserType: () => userModule.getUserType(),\n            getUserStatus: () => userModule.getUserStatus(),\n            getInitialUrlParameters:\n                initializationModule.getInitialUrlParameters,\n        });\n\n        const nfrsModule = createNfrsModule({\n            sendReport: analyticsModule.sendMetricEvent,\n            logger: () => {},\n            bootstrapStartTimestamp: window.bootstrapStartTimestamp,\n        });\n\n        const errorHandlingModule = createErrorHandlingModule({\n            enabled: configuration.features.sentry,\n            config: {\n                url: configuration.sentryUrl,\n                restrictedCountryChapterName: chapterNames.LANDING_PAGE,\n                errorChapterName: chapterNames.ERROR,\n                authChapterName: chapterNames.AUTH,\n            },\n            metaData: {\n                getPlatform: initializationModule.getPlatform,\n                hostName: getCurrentHostname(),\n                getCurrentChapter: () =>\n                    getChapterName(navigationModule.getCurrentChapter()),\n                setCurrentChapter: chapter =>\n                    navigationModule.setCurrentChapter(chapter),\n                getChapterCountry: () => navigationModule.getChapterCountry(),\n                getVersions: initializationModule.getVersions,\n                deviceModel: getModel(),\n                firmwareVersion: getFirmwareVersion(),\n                sendErrorEvent: analyticsModule.sendErrorEvent,\n            },\n        });\n\n        const startupModule = createStartupModule({\n            deviceDetails: {\n                getPlatform: initializationModule.getPlatform,\n                getManufacturer: initializationModule.getManufacturer,\n            },\n            config: {\n                getSessionId: initializationModule.getSessionId,\n                languages: getLanguages(),\n                startupUrl: configuration.startupUrl,\n                getGuid: initializationModule.getGuid,\n                getDevMode: initializationModule.getDevMode,\n            },\n            navigation: {\n                getCurrentPath,\n            },\n        });\n\n        const experimentsModule = createExperimentsModule(\n            storageModule.getItem,\n            storageModule.setItem,\n            startupModule.getAbTests,\n            () => userModule.getProfile().ViewerId,\n        );\n\n        const userModule = createUserModule({\n            logOutUrl: () => startupModule.getApiUrl('SignOut', 'v1') || '',\n            userProfileUrl: () =>\n                startupModule.getApiUrl('UserProfile', 'v1') || '',\n            load: () => storageModule.getItem(configuration.tokenStorageKey),\n            remove: () =>\n                storageModule.removeItem(configuration.tokenStorageKey),\n            save: value =>\n                storageModule.setItem(configuration.tokenStorageKey, value),\n            isForceReload: () => storageModule.getItem('daznForceRefreshToken'),\n            removeForceReloadFlag: () =>\n                storageModule.removeItem('daznForceRefreshToken'),\n            deviceId: initializationModule.getDeviceId,\n            sessionId: initializationModule.getSessionId,\n            onTokenReset: () => {\n                navigationModule.setCurrentChapter(\n                    configuration.chapters.onLogoutChapter,\n                );\n            },\n            fetch: window.fetch,\n            getGuid: initializationModule.getGuid,\n            getDevMode: initializationModule.getDevMode,\n            getApiUrl: startupModule.getApiUrl,\n            getServerTimeOffset: startupModule.getServerTimeOffset,\n            getAnonymousExperiment: experimentsModule.getAnonymousExperiment,\n        });\n\n        const navigationModule = createNavigationModule(\n            {\n                configurationModule: {\n                    configuration,\n                    chapterNames,\n                    selectorsExcludedFromCleaning,\n                },\n                startupModule: {\n                    checkRegionAvailability:\n                        startupModule.checkRegionAvailability,\n                    getAllowedLanguages: startupModule.getAllowedLanguages,\n                    getIsPortable: startupModule.isPortable,\n                    getRegionLanguage: startupModule.getRegionLanguage,\n                    getStartupDataCountry: startupModule.getStartupDataCountry,\n                    getResourceStringsEndpoint: () =>\n                        startupModule.getApiUrl('ResourceStrings', 'v1') || '',\n                    // we do not want to redirect on TVs but it's required by module\n                    checkForRedirect: () => null,\n                },\n                userModule: {\n                    getIsActive: userModule.isActive,\n                    getIsAuthorized: userModule.isAuthorized,\n                    getSupportedLanguages: userModule.getSupportedLanguages,\n                    getUserLanguage: userModule.getUserLanguage,\n                    getUserProfile: userModule.fetchProfile,\n                    getSignUpCountry: userModule.getSignUpCountry,\n                    getContentCountry: userModule.getContentCountry,\n                    isProfileCached: userModule.isProfileCached,\n                },\n                errorModule: {\n                    captureException: errorHandlingModule.captureException,\n                    handleError: errorHandlingModule.handleError,\n                },\n                storageModule: {\n                    saveLanguage: (lang: boot.config.Language) =>\n                        storageModule.setItem(\n                            configuration.UILanguageKey,\n                            lang,\n                        ),\n                    loadLanguage: () =>\n                        storageModule.getItem(configuration.UILanguageKey),\n                },\n                initializationModule: {\n                    getPlatform: initializationModule.getPlatform,\n                    setChapterVersion: initializationModule.setChapterVersion,\n                },\n            },\n            {\n                location: window.location,\n                history: window.history,\n                document: window.document,\n                fetch: window.fetch,\n                DOMParser,\n                URL,\n            },\n        );\n\n        navigationModule.lifecycleEvents.onChapterWillLoad(() => {\n            const nfrsApi = window.dazn.nfrs;\n            const { CATALOG, AUTH, LANDING_PAGE } = chapterNames;\n            if (nfrsApi) {\n                switch (navigationModule.getCurrentChapter()) {\n                    case CATALOG:\n                        nfrsApi.dispatchEvent(\n                            nfrsApi.events.BOOTSTRAP_NAVIGATE_TO_CATALOG,\n                        );\n                        break;\n\n                    case AUTH:\n                        nfrsApi.dispatchEvent(\n                            nfrsApi.events.BOOTSTRAP_NAVIGATE_TO_AUTH,\n                        );\n                        break;\n\n                    case LANDING_PAGE:\n                        nfrsApi.dispatchEvent(\n                            nfrsApi.events.BOOTSTRAP_NAVIGATE_TO_LANDING,\n                        );\n                        break;\n\n                    default:\n                        return;\n                }\n            }\n        });\n\n        navigationModule.lifecycleEvents.onChapterDidLoad(\n            () => {\n                analyticsModule.sendChapterLoadEvent();\n            },\n            { persist: true },\n        );\n\n        const splashModule = createSplashModule({\n            lifecycle: navigationModule.lifecycleEvents,\n            currentChapter: navigationModule.getCurrentChapter,\n            scrollToTop: () => {\n                window.scrollTo(0, 0);\n            },\n            maxSplashScreenVisibilityTime: 2000,\n        });\n\n        const splashScreenMethod =\n            splashScreenBehaviour === 'remove'\n                ? splashModule.removeSplashScreen\n                : splashModule.hideSplashScreen;\n\n        const userConsentModule = createUserConsent({\n            getItem: storageModule.getItem,\n            getViewerId: () => userModule.getProfile().ViewerId,\n            getDefaultAdsOptions: () =>\n                startupModule.getStartupData()?.FeatureToggles\n                    ?.DefaultAdsOptionsOn ?? false,\n        });\n\n        function setupPublicApi() {\n            createPublicApiModule(\n                {\n                    getContentCountry: userModule.getContentCountry,\n                    getCountry: userModule.getCountry,\n                    getUserType: userModule.getUserType,\n                    getUserStatus: userModule.getUserStatus,\n                    getAuthToken: userModule.getToken,\n                    setAuthToken: userModule.setToken,\n                    setUserStatus: () => undefined,\n                    getUserProfile: userModule.getProfile,\n                    setUserProfile: userModule.setProfile,\n                    getEnvironment: initializationModule.getEnvironment,\n                    getEnvironmentGroup:\n                        initializationModule.getEnvironmentGroup,\n                    getBootstrapVersion:\n                        initializationModule.getBootstrapVersion,\n                    getPlatform: initializationModule.getPlatform,\n                    setPlatform: initializationModule.setPlatform,\n                    getManufacturer: initializationModule.getManufacturer,\n                    setManufacturer: initializationModule.setManufacturer,\n                    getInitialUrl: initializationModule.getInitialUrl,\n                    getInitialUrlParameters:\n                        initializationModule.getInitialUrlParameters,\n                    getCampaignId: startupModule.getCampaignId,\n                    getPromoId: startupModule.getPromoId,\n                    getSessionId: initializationModule.getSessionId,\n                    getDeviceId: initializationModule.getDeviceId,\n                    setDeviceId: initializationModule.setDeviceId,\n                    getGuid: initializationModule.getGuid,\n                    getDevMode: initializationModule.getDevMode,\n                    getStartupData: startupModule.getStartupData,\n                    setStartupData: startupModule.setStartupData,\n                    getResourceStringsData: navigationModule.getResourceStrings,\n                    getCurrentChapter: navigationModule.getCurrentChapter,\n                    setCurrentChapter: navigationModule.setCurrentChapter,\n                    getChaptersVersions: initializationModule.getVersions,\n                    getChapterLanguage: navigationModule.getLanguage,\n                    getDeviceModel: getModel,\n                    getApplicationType,\n                    getExperiments: experimentsModule.getExperiments,\n                    getOneTrustConsentGroups: () => undefined,\n                    getFirmwareVersion,\n                },\n                {\n                    captureException: errorHandlingModule.captureException,\n                    getStorage: storageModule.getStorage,\n                    lifecycle: navigationModule.lifecycleEvents,\n                    getChapterFromPath: navigationModule.getChapterFromPath,\n                    enableDevMode: initializationModule.enableDevMode,\n                    disableDevMode: initializationModule.disableDevMode,\n                    getUserExperiment: experimentsModule.getUserExperiment,\n                    getUserExperimentNumber:\n                        experimentsModule.getUserExperimentNumber,\n                    getAnonymousExperiment:\n                        experimentsModule.getAnonymousExperiment,\n                    removeSplashScreen: splashScreenMethod,\n                    isMoonCountry: navigationModule.isMoonCountry,\n                    exitApp,\n                    refreshExistingTokenAndUpdateProfile:\n                        userModule.refreshExistingTokenAndUpdateProfile,\n                    setAuthToken: userModule.setToken,\n                    getUserConsent: userConsentModule.getUserConsent,\n                },\n                {\n                    beforeInitialization: () => {\n                        // FIXME: remove once chapters removed the reference\n                        window.dazn.targetGarbageContainerSnapshot = [];\n                    },\n                },\n            );\n        }\n\n        const setupActivityLifecycle = () => {\n            if (!registerActivityLifecycleEvents) {\n                return;\n            }\n\n            const activityLifecycleModule = createActivityLifecycleModule({\n                refreshAccessToken:\n                    userModule.refreshExistingTokenAndUpdateProfile,\n            });\n\n            registerActivityLifecycleEvents({\n                triggerActiveState: activityLifecycleModule.triggerActiveState,\n                triggerInactiveState:\n                    activityLifecycleModule.triggerInactiveState,\n                triggerHoldState: activityLifecycleModule.triggerHoldState,\n                triggerTerminatedState:\n                    activityLifecycleModule.triggerTerminatedState,\n            });\n        };\n\n        const setupNetworkLifecycle = () => {\n            if (!networkHandler) {\n                return;\n            }\n\n            const {\n                triggerOnlineState,\n                triggerOfflineState,\n            } = createNetworkLifecycleModule();\n\n            networkHandler(triggerOnlineState, triggerOfflineState);\n        };\n\n        const setupPointerStatus = () => {\n            if (!pointerHandler) {\n                return;\n            }\n\n            const {\n                triggerPointerActive,\n                triggerPointerInactive,\n            } = createPointerStatusModule();\n\n            pointerHandler(triggerPointerActive, triggerPointerInactive);\n        };\n\n        const runTts = () =>\n            Promise.resolve(\n                navigationModule.getResourceStrings(),\n            ).then(startupData =>\n                textToSpeechModule.run(startupData.Strings?.['tts_welcome']),\n            );\n\n        return onReady()\n            .then(splashModule.run)\n            .then(initializationModule.run)\n            .then(startupModule.run)\n            .then(experimentsModule.run)\n            .then(() =>\n                configurationModule.run({\n                    captureException: errorHandlingModule.captureException,\n                    getCurrentOrigin: () => {\n                        if (typeof window !== 'undefined') {\n                            return window.location.origin;\n                        }\n                        return '';\n                    },\n                }),\n            )\n            .then(userModule.run)\n            .then(navigationModule.run)\n            .then(errorHandlingModule.run)\n            .then(() => {\n                window.addEventListener(\n                    'popstate',\n                    navigationModule.popStateHandler,\n                );\n            })\n            .then(setupPublicApi)\n            .then(setupActivityLifecycle)\n            .then(setupNetworkLifecycle)\n            .then(setupPointerStatus)\n            .then(nfrsModule.initialize)\n            .then(runTts)\n            .then(userConsentModule.run)\n            .then(getInitialChapterToLoad)\n            .then(navigationModule.loadInitialChapter)\n            .catch(error => {\n                splashScreenMethod();\n\n                if (process.env.NODE_ENV !== 'production') {\n                    // eslint-disable-line\n                    throw error;\n                }\n                // FIXME: these are async\n                try {\n                    setupPublicApi();\n                    setupActivityLifecycle();\n                    setupNetworkLifecycle();\n                    setupPointerStatus();\n                    runTts();\n                } catch (e) {} // eslint-disable-line no-empty\n                errorHandlingModule.handleError(\n                    undefined,\n                    eraroCodesMap.code.AppLoadError,\n                    undefined,\n                    getChapterName(navigationModule.getCurrentChapter()),\n                    error,\n                );\n            })\n            .finally(() => {\n                analyticsModule.run();\n                analyticsModule.sendAppLaunchEvent();\n            });\n    });\n}\n\nconst splashVariants = {\n    yellowLine,\n    spinner,\n    logoSpinner,\n};\n\nexport {\n    launchBootstrap,\n    DEFAULT_KEY_EVENTS,\n    splashVariants,\n    chapterNames,\n    LauncherParams as LauncherConfiguration,\n    LauncherParamsDevice as LauncherDevice,\n    LauncherParamsConfig as LauncherConfig,\n};\n",
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-user/jest.config.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-user/src/common-types.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-user/src/errors.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-user/src/fetchUserProfile.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-user/src/getHeaders.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-user/src/index.ts",
      "messages": [
        {
          "ruleId": "max-statements",
          "severity": 1,
          "message": "Function 'createUserModule' has too many statements (13). Maximum allowed is 12.",
          "line": 43,
          "column": 1,
          "nodeType": "FunctionDeclaration",
          "messageId": "exceed",
          "endLine": 244,
          "endColumn": 2
        }
      ],
      "errorCount": 0,
      "warningCount": 1,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "import { boot } from '@dazn/bootstrap-lib';\nimport { decodeToken, checkToken } from './token';\nimport { fetchUserProfile } from './fetchUserProfile';\nimport { logout } from './logout';\nimport { GetDevMode, GetGuid } from './common-types';\n\nconst activeUserTypes = ['ActiveGrace', 'ActivePaid', 'FreeTrial'];\n\nconst isProfileValid = (\n    userProfile: boot.user.UserProfile | Record<string, never>,\n) => Object.keys(userProfile || {}).length > 0;\n\nnamespace createUserModule {\n    export interface Params {\n        authTokenRefreshUrl?: () => string;\n        userProfileUrl: () => string;\n        logOutUrl: () => string;\n        load: () => Promise<string | null>;\n        save: (token: string) => Promise<unknown>;\n        remove: () => Promise<void>;\n        isForceReload: () => Promise<string | null>;\n        removeForceReloadFlag: () => Promise<void>;\n        onTokenReset: () => void;\n        sessionId: () => string;\n        deviceId: () => string;\n        fetch: boot.util.Fetch;\n        getGuid: GetGuid;\n        getDevMode: GetDevMode;\n        getApiUrl?: (serviceName: string, ver: string) => string | undefined;\n        getServerTimeOffset: () => number | null;\n        getAnonymousExperiment: (experiment: string) => boolean | undefined;\n    }\n}\n\ninterface UserToken {\n    userstatus: boot.user.UserStatus;\n    country: boot.config.AnyCountry;\n    contentCountry: boot.config.AnyCountry;\n    userType: number;\n    exp: number;\n}\n\nfunction createUserModule({\n    authTokenRefreshUrl,\n    userProfileUrl,\n    logOutUrl,\n    load,\n    save,\n    remove,\n    onTokenReset,\n    sessionId,\n    deviceId,\n    fetch,\n    getGuid,\n    getDevMode,\n    getApiUrl,\n    getServerTimeOffset,\n    getAnonymousExperiment,\n    isForceReload,\n    removeForceReloadFlag,\n}: createUserModule.Params) {\n    let cachedUserProfile: boot.user.UserProfile | Record<string, never> = {};\n    let cachedUserToken = '';\n    let parsedUserToken: UserToken | null = null;\n    let isProfileCached = false;\n\n    const internalCacheAndParseToken = (token: string) => {\n        cachedUserToken = token;\n        parsedUserToken = token ? decodeToken(token) : null;\n    };\n    const internalSaveToken = (token: string) =>\n        save(token)\n            .then(() => internalCacheAndParseToken(token))\n            .then(() => token);\n    const setProfile = (newUserProfile = {}) => {\n        cachedUserProfile = newUserProfile;\n        isProfileCached = isProfileValid(cachedUserProfile);\n        return cachedUserProfile;\n    };\n    const internalFetchProfile = (token: string) =>\n        fetchUserProfile(userProfileUrl(), token, fetch, getGuid, getDevMode);\n    const hasParsedUserToken = () => Boolean(parsedUserToken);\n    let refreshTimeOut: number;\n\n    const getTokensTTL = (decodedToken: UserToken) =>\n        decodedToken.exp * 1000 -\n        5 * 60 * 1000 -\n        (Date.now() + (getServerTimeOffset() || 0));\n\n    const refreshExistingTokenAndUpdateProfile = () =>\n        load().then(localStorageToken => {\n            if (!localStorageToken) {\n                return undefined;\n            }\n\n            const decodedToken = decodeToken(localStorageToken);\n            const tokenFromLocalStorageTTL = getTokensTTL(decodedToken);\n            if (authTokenRefreshUrl) {\n                console.warn(\n                    `\n        'authTokenRefreshUrl' param of 'createUserModule' will be deprecated,\n        Use 'getApiUrl: startupModule.getApiUrl' instead.\n        Refer to: BOOT-701\n                    `,\n                );\n            }\n\n            const refreshAccessTokenUrl = getApiUrl\n                ? getApiUrl('RefreshAccessToken', 'v5')\n                : authTokenRefreshUrl?.();\n            if (!refreshAccessTokenUrl) {\n                throw new Error(\n                    `\n        RefreshAccessToken url is missing,\n        Check getApiUrl, you can get it from startup module.\n                                `,\n                );\n            }\n            const fetchToken = () =>\n                checkToken(\n                    localStorageToken,\n                    refreshAccessTokenUrl,\n                    sessionId(),\n                    deviceId(),\n                    fetch,\n                    getGuid,\n                    getDevMode,\n                );\n\n            let useTimeout: boolean;\n\n            return Promise.resolve()\n                .then(isForceReload)\n                .then(hasForceReloadFlag => {\n                    let localStorageOrFetchedToken;\n                    const forceReload = getDevMode() || hasForceReloadFlag;\n                    if (hasForceReloadFlag) {\n                        removeForceReloadFlag();\n                    }\n                    useTimeout =\n                        Boolean(\n                            getAnonymousExperiment('refreshTokenTimeout'),\n                        ) && !forceReload;\n\n                    if (useTimeout) {\n                        localStorageOrFetchedToken =\n                            tokenFromLocalStorageTTL < 0\n                                ? fetchToken()\n                                : Promise.resolve(localStorageToken);\n                    } else {\n                        localStorageOrFetchedToken = fetchToken();\n                    }\n                    return localStorageOrFetchedToken;\n                })\n                .then(internalSaveToken)\n                .then(token => {\n                    if (useTimeout) {\n                        if (refreshTimeOut) {\n                            window.clearTimeout(refreshTimeOut);\n                        }\n                        refreshTimeOut = window.setTimeout(\n                            refreshExistingTokenAndUpdateProfile,\n                            getTokensTTL(decodeToken(token)),\n                        );\n                    }\n                    return token;\n                })\n                .then(internalFetchProfile)\n                .then(setProfile)\n                .then(() => undefined);\n        });\n\n    return {\n        run: refreshExistingTokenAndUpdateProfile,\n        refreshExistingTokenAndUpdateProfile,\n        getProfile: () => cachedUserProfile,\n        setProfile,\n        getUserLanguage: () => cachedUserProfile['UserLanguageLocaleKey'],\n        getSupportedLanguages: () => cachedUserProfile['SupportedLanguages'],\n        isProfileCached: () => isProfileCached,\n        getToken: () => cachedUserToken,\n        setToken: (newToken: string | null) => {\n            if (newToken === cachedUserToken) {\n                return Promise.resolve();\n            }\n\n            if (newToken) {\n                return internalSaveToken(newToken)\n                    .then(internalFetchProfile)\n                    .then(setProfile)\n                    .then(() => {\n                        isProfileCached = false;\n                    });\n            }\n\n            cachedUserProfile = {};\n            isProfileCached = false;\n\n            const previousToken = cachedUserToken;\n            internalCacheAndParseToken('');\n            return remove()\n                .then(() => {\n                    if (!previousToken) {\n                        return undefined;\n                    }\n\n                    return logout(\n                        logOutUrl(),\n                        previousToken,\n                        deviceId(),\n                        fetch,\n                        getGuid,\n                        getDevMode,\n                    ).then(onTokenReset);\n                })\n                .catch(onTokenReset);\n        },\n        isAuthorized: hasParsedUserToken,\n        isActive: (chapterUserTypes = activeUserTypes) =>\n            hasParsedUserToken() &&\n            chapterUserTypes.includes(parsedUserToken?.userstatus || ''),\n        getSignUpCountry: () => cachedUserProfile['UserCountryCode'] || '',\n        getCountry: () => parsedUserToken?.country || '',\n        getContentCountry: () => parsedUserToken?.contentCountry || '',\n        getUserStatus: () => parsedUserToken?.userstatus || '',\n        getUserType: () => parsedUserToken?.userType || NaN,\n        fetchProfile: () => {\n            // @TODO: Should we remove this fetchProfile entirely ?\n            // Suspecting that shouldFetch will always be false\n            const shouldFetch = hasParsedUserToken() && !isProfileCached;\n            if (!shouldFetch) {\n                return Promise.resolve();\n            }\n            return load().then(tokenFromLocalStorage => {\n                if (!tokenFromLocalStorage) {\n                    return;\n                }\n                return internalFetchProfile(tokenFromLocalStorage)\n                    .then(setProfile)\n                    .then(() => isProfileCached);\n            });\n        },\n    };\n}\n\nexport { createUserModule, UserToken };\n",
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-user/src/logout.ts",
      "messages": [
        {
          "ruleId": "max-params",
          "severity": 1,
          "message": "Arrow function has too many parameters (6). Maximum allowed is 5.",
          "line": 13,
          "column": 3,
          "nodeType": "ArrowFunctionExpression",
          "messageId": "exceed",
          "endLine": 13,
          "endColumn": 5
        }
      ],
      "errorCount": 0,
      "warningCount": 1,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "import { boot } from '@dazn/bootstrap-lib';\nimport { eraroCodesMap, createEraroError } from '@dazn/bootstrap-lib/eraro';\nimport { GetGuid, GetDevMode } from './common-types';\nimport { getHeaders } from './getHeaders';\n\nconst logout = (\n    url: string,\n    token: string,\n    deviceId: string,\n    fetch: boot.util.Fetch,\n    getGuid: GetGuid,\n    getDevMode: GetDevMode,\n) =>\n    fetch(url, {\n        method: 'POST',\n        headers: getHeaders(token, getGuid, getDevMode),\n        body: JSON.stringify({\n            DeviceId: deviceId,\n        }),\n    }).then(\n        response => {\n            if (!response.ok) {\n                throw createEraroError(\n                    'Logout responded not okay',\n                    eraroCodesMap.category.UserProfileService,\n                    eraroCodesMap.code.GenericError,\n                    String(response.status),\n                );\n            }\n\n            return;\n        },\n        error => {\n            throw createEraroError(\n                'Logout attempt request failure',\n                eraroCodesMap.category.UserProfileService,\n                eraroCodesMap.code.GenericError,\n                eraroCodesMap.internal.NetworkError,\n                error,\n            );\n        },\n    );\n\nexport { logout };\n",
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-user/src/test/createUserModuleSuccess.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-user/src/test/fetchResponse.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-user/src/test/mockEraro.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-user/src/token.ts",
      "messages": [
        {
          "ruleId": "max-params",
          "severity": 1,
          "message": "Arrow function has too many parameters (7). Maximum allowed is 5.",
          "line": 34,
          "column": 3,
          "nodeType": "ArrowFunctionExpression",
          "messageId": "exceed",
          "endLine": 34,
          "endColumn": 5
        }
      ],
      "errorCount": 0,
      "warningCount": 1,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "import { boot } from '@dazn/bootstrap-lib';\nimport { GetGuid, GetDevMode } from './common-types';\nimport { createErrorFactoryForTokenRefresh } from './errors';\nimport { getHeaders } from './getHeaders';\n\nconst isValid = (tokenValue: Record<string, unknown>) =>\n    tokenValue && Object.keys(tokenValue).length > 0;\n\nconst decodeToken = (token: string) => {\n    const [, payload] = token.split('.');\n    try {\n        const decodedToken = window.atob(payload);\n        const tokenValue = JSON.parse(decodedToken);\n        if (!isValid(tokenValue)) {\n            return null;\n        }\n        return tokenValue;\n    } catch (e) {\n        return null;\n    }\n};\n\nconst pickToken = (json: { AuthToken?: { Token: string } }) =>\n    json && json.AuthToken && json.AuthToken.Token;\n\nconst checkToken = (\n    token: string,\n    authTokenRefreshUrl: string,\n    sessionId: string,\n    deviceId: string,\n    fetch: boot.util.Fetch,\n    getGuid: GetGuid,\n    getDevMode: GetDevMode = () => false,\n) => {\n    const errorFactory = createErrorFactoryForTokenRefresh();\n\n    if (!deviceId) {\n        return Promise.reject(errorFactory.deviceIdMissing());\n    }\n    return fetch(authTokenRefreshUrl, {\n        method: 'POST',\n        headers: getHeaders(`${token}`, getGuid, getDevMode, sessionId),\n        body: JSON.stringify({ DeviceId: deviceId }),\n        cache: 'no-store',\n    })\n        .catch(error =>\n            Promise.reject(errorFactory.profileRequestFailed(error)),\n        )\n        .then(response => {\n            if (response.status > 399) {\n                return Promise.reject(\n                    errorFactory.serverError(response.status),\n                );\n            }\n            if (!response.ok) {\n                return Promise.reject(errorFactory.responseNotOk());\n            }\n            return response\n                .json()\n                .catch(error =>\n                    Promise.reject(errorFactory.jsonParseFailed(error)),\n                )\n                .then(\n                    json =>\n                        pickToken(json) ||\n                        Promise.reject(errorFactory.badToken(response.status)),\n                );\n        });\n};\n\nexport { checkToken, decodeToken };\n",
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-web-launcher/jest.config.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-web-launcher/src/cookieBanner/Optanon.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-web-launcher/src/cookieBanner/appendScript.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-web-launcher/src/cookieBanner/banner.mocks.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-web-launcher/src/cookieBanner/cookieBanner.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-web-launcher/src/cookieBanner/getBannerLanguage.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-web-launcher/src/cookieBanner/getOneTrustConsentGroups.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-web-launcher/src/cookieBanner/hideOldBannerElements.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-web-launcher/src/cookieBanner/oneTrust.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-module-web-launcher/src/polyfillCustomEvent.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-scripts/bin/bootstrap-scripts.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-scripts/scripts/webpack/buildModuleWithWebpack.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-scripts/scripts/webpack/messages.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/bootstrap-scripts/scripts/webpack/webpack.config.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/example-tvweb/allure.config.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/example-tvweb/babel.config.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/example-tvweb/config/beta.config.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/example-tvweb/config/default.config.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/example-tvweb/config/live.config.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/example-tvweb/e2e/e2e.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/example-tvweb/e2e/getAllurePath.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/example-tvweb/e2e/run.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/example-tvweb/e2e/testcafe-utils/loginUser.js",
      "messages": [
        {
          "ruleId": "@applitools/compat/no-async-await",
          "severity": 2,
          "message": "Invalid usage of async-await.",
          "line": 7,
          "column": 19,
          "nodeType": "ArrowFunctionExpression",
          "endLine": 22,
          "endColumn": 2
        },
        {
          "ruleId": "@applitools/compat/no-async-await",
          "severity": 2,
          "message": "Invalid usage of async-await.",
          "line": 11,
          "column": 23,
          "nodeType": "ArrowFunctionExpression",
          "endLine": 13,
          "endColumn": 6
        },
        {
          "ruleId": "@applitools/compat/no-async-await",
          "severity": 2,
          "message": "Invalid usage of async-await.",
          "line": 17,
          "column": 26,
          "nodeType": "ArrowFunctionExpression",
          "endLine": 19,
          "endColumn": 6
        }
      ],
      "errorCount": 3,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "import { Selector } from 'testcafe';\n\n// const emailInput = Selector('[data-test-id=Field__input__email]');\nconst signInButton = Selector('[data-test-id=Button__keyboard_startWatching]');\nconst nextKey = Selector('[data-test-id=Button__keyboard_next]');\n\nconst loginUser = async (t, testUser) => {\n    const emailKeys = testUser.email.split('');\n    const passwordKeys = testUser.password.split('');\n\n    emailKeys.forEach(async key => {\n        await t.click(Selector(`[data-test-id=\"Button__${key}\"]`));\n    });\n\n    await t.click(nextKey);\n\n    passwordKeys.forEach(async key => {\n        await t.click(Selector(`[data-test-id=\"Button__${key}\"]`));\n    });\n\n    await t.click(signInButton);\n};\n\nexport { loginUser };\n",
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/example-tvweb/e2e/testcafe-utils/window.dazn.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/example-tvweb/e2e/testcafe-utils/window.location.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/example-tvweb/e2e/utils/createUser.js",
      "messages": [
        {
          "ruleId": "@applitools/compat/no-async-await",
          "severity": 2,
          "message": "Invalid usage of async-await.",
          "line": 8,
          "column": 20,
          "nodeType": "ArrowFunctionExpression",
          "endLine": 19,
          "endColumn": 2
        },
        {
          "ruleId": "@applitools/compat/no-async-await",
          "severity": 2,
          "message": "Invalid usage of async-await.",
          "line": 21,
          "column": 19,
          "nodeType": "ArrowFunctionExpression",
          "endLine": 41,
          "endColumn": 2
        },
        {
          "ruleId": "@applitools/compat/no-async-await",
          "severity": 2,
          "message": "Invalid usage of async-await.",
          "line": 44,
          "column": 20,
          "nodeType": "ArrowFunctionExpression",
          "endLine": 67,
          "endColumn": 2
        }
      ],
      "errorCount": 3,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "import {\n    userHelper,\n    configHelper,\n    authServiceDataHelper,\n} from '@dazn/be-services-lib';\nimport { signIn } from '@dazn/be-services-lib/services/misl/service-helper';\n\nconst initAWSAPI = async () => {\n    const { AWS_REGION, AWS_PROFILE, TARGET_ENV } = process.env;\n    console.log(`[Init AWS API] env:\n    AWS_REGION: ${AWS_REGION}\n    AWS_PROFILE: ${AWS_PROFILE}\n    TARGET_ENV: ${TARGET_ENV}\n    `);\n    await configHelper.loadKeys().catch(e => {\n        console.log({ error: e });\n        throw e;\n    });\n};\n\nconst trySignIn = async (userInfo, maxRetryCount, delay) => {\n    const { email, password } = userInfo;\n    const payload = authServiceDataHelper.getSignInPayload(email, password);\n\n    let res;\n    let retryCount = maxRetryCount;\n    while (retryCount !== 0) {\n        res = await signIn(5, payload);\n        if (res.status === 200 && res.body.Result) {\n            return true;\n        }\n        retryCount--;\n        await new Promise(res => setTimeout(res, delay));\n    }\n\n    throw new Error(`Sync user account to MISL failed.\nUnable to sign in after ${maxRetryCount} retries with ${delay / 1000}s delay..\n    Email: ${userInfo.email}\n    daznId: ${userInfo.id}\n    API response: ${JSON.stringify(res, null, 2)}`);\n};\n\nlet isInited = false;\nconst createUser = async userData => {\n    if (!isInited) {\n        await initAWSAPI();\n        isInited = true;\n    }\n    const country = (process.env.E2E_COUNTRY || 'de').toLowerCase();\n    const emailName = [country, userData.status, Date.now()].join('-');\n    const user = userHelper.generateUser({\n        ...userData,\n        country,\n        email: `${emailName}@daznTV.com`.toLowerCase(),\n        password: '111aaa',\n    });\n    const seededUser = await userHelper.createUserWithDetails(user);\n    await trySignIn(seededUser, 20, 3000);\n    console.log(`[User]\n    email: ${user.email}\n    password: ${user.password}\n    country: ${user.country}\n    status: ${userData.status}\n    `);\n\n    return seededUser;\n};\n\nexport { createUser };\n",
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/example-tvweb/e2e/utils/getAbsoluteUrl.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/example-tvweb/e2e/utils/login.js",
      "messages": [
        {
          "ruleId": "@applitools/compat/no-async-await",
          "severity": 2,
          "message": "Invalid usage of async-await.",
          "line": 4,
          "column": 15,
          "nodeType": "ArrowFunctionExpression",
          "endLine": 7,
          "endColumn": 2
        }
      ],
      "errorCount": 1,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "import { createUser } from './createUser';\nimport { loginUser } from '../testcafe-utils/loginUser';\n\nconst login = async (t, status = 'ActivePaid') => {\n    const testUser = await createUser({ status });\n    return await loginUser(t, testUser);\n};\n\nexport { login };\n",
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/example-tvweb/scripts/run.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/example-tvweb/src/index.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/example-tvweb/webpack/getPath.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/example-tvweb/webpack/webpack.config.analyze.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/example-tvweb/webpack/webpack.config.common.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/example-tvweb/webpack/webpack.config.dev.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/example-tvweb/webpack/webpack.config.prod.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/example-tvweb/webpack/webpack.dev-server.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/lib/eraro.d.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/lib/eraro.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/lib/jest.config.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/lib/src/again.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/lib/src/eraro.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/lib/src/eraro/codes.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/lib/src/eraro/createEraroError.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/lib/src/html.d.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/lib/src/index.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/lib/src/internals.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/lib/src/keysOf.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/lib/src/shared-types/config.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/lib/src/shared-types/dazn.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/lib/src/shared-types/event.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/lib/src/shared-types/optimizely.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/lib/src/shared-types/resourceStrings.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/lib/src/shared-types/startupData.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/lib/src/shared-types/storage.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/lib/src/shared-types/user.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/lib/src/shared-types/util.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/packages/lib/src/wait.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/scripts/.eslintrc.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/scripts/build-changed.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/scripts/generate-docs.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/scripts/jest.config.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/scripts/link-installed-packages.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/scripts/pr/getCurrentCommitSHA.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/scripts/pr/getGithubToken.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/scripts/pr/readBootstrapModulesVersion.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/scripts/pr/web-bootstrap-dazn.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/scripts/print-release-type.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/scripts/update-changelog.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/scripts/utils/bumpBootstrapPackages.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/scripts/utils/date.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/scripts/utils/exec-helpers.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/scripts/utils/getPackages.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/scripts/utils/git-helpers.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/scripts/utils/github-helpers.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/scripts/utils/github.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/scripts/utils/initErrorHandlers.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/scripts/utils/markdown.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/scripts/utils/npm-helpers.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/scripts/utils/parse-pr-body.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/scripts/utils/parsePRBody.ts",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/scripts/utils/pr-info.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/maxim.grishaev/dazn/bootstrap-modules/scripts/utils/version.js",
      "messages": [],
      "errorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "usedDeprecatedRules": []
    }
  ],
  "metadata": {
    "rulesMeta": {
      "accessor-pairs": {
        "type": "suggestion",
        "docs": {
          "description": "enforce getter and setter pairs in objects and classes",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/accessor-pairs"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "getWithoutSet": {
                "type": "boolean",
                "default": false
              },
              "setWithoutGet": {
                "type": "boolean",
                "default": true
              },
              "enforceForClassMembers": {
                "type": "boolean",
                "default": true
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "missingGetterInPropertyDescriptor": "Getter is not present in property descriptor.",
          "missingSetterInPropertyDescriptor": "Setter is not present in property descriptor.",
          "missingGetterInObjectLiteral": "Getter is not present for {{ name }}.",
          "missingSetterInObjectLiteral": "Setter is not present for {{ name }}.",
          "missingGetterInClass": "Getter is not present for class {{ name }}.",
          "missingSetterInClass": "Setter is not present for class {{ name }}."
        }
      },
      "array-bracket-newline": {
        "type": "layout",
        "docs": {
          "description": "enforce linebreaks after opening and before closing array brackets",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/array-bracket-newline"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "oneOf": [
              { "enum": ["always", "never", "consistent"] },
              {
                "type": "object",
                "properties": {
                  "multiline": { "type": "boolean" },
                  "minItems": {
                    "type": ["integer", "null"],
                    "minimum": 0
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ],
        "messages": {
          "unexpectedOpeningLinebreak": "There should be no linebreak after '['.",
          "unexpectedClosingLinebreak": "There should be no linebreak before ']'.",
          "missingOpeningLinebreak": "A linebreak is required after '['.",
          "missingClosingLinebreak": "A linebreak is required before ']'."
        }
      },
      "array-bracket-spacing": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent spacing inside array brackets",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/array-bracket-spacing"
        },
        "fixable": "whitespace",
        "schema": [
          { "enum": ["always", "never"] },
          {
            "type": "object",
            "properties": {
              "singleValue": { "type": "boolean" },
              "objectsInArrays": { "type": "boolean" },
              "arraysInArrays": { "type": "boolean" }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
          "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
          "missingSpaceAfter": "A space is required after '{{tokenValue}}'.",
          "missingSpaceBefore": "A space is required before '{{tokenValue}}'."
        }
      },
      "array-callback-return": {
        "type": "problem",
        "docs": {
          "description": "enforce `return` statements in callbacks of array methods",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/array-callback-return"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowImplicit": {
                "type": "boolean",
                "default": false
              },
              "checkForEach": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "expectedAtEnd": "{{arrayMethodName}}() expects a value to be returned at the end of {{name}}.",
          "expectedInside": "{{arrayMethodName}}() expects a return value from {{name}}.",
          "expectedReturnValue": "{{arrayMethodName}}() expects a return value from {{name}}.",
          "expectedNoReturnValue": "{{arrayMethodName}}() expects no useless return value from {{name}}."
        }
      },
      "array-element-newline": {
        "type": "layout",
        "docs": {
          "description": "enforce line breaks after each array element",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/array-element-newline"
        },
        "fixable": "whitespace",
        "schema": {
          "definitions": {
            "basicConfig": {
              "oneOf": [
                { "enum": ["always", "never", "consistent"] },
                {
                  "type": "object",
                  "properties": {
                    "multiline": { "type": "boolean" },
                    "minItems": {
                      "type": ["integer", "null"],
                      "minimum": 0
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "items": [
            {
              "oneOf": [
                { "$ref": "#/definitions/basicConfig" },
                {
                  "type": "object",
                  "properties": {
                    "ArrayExpression": {
                      "$ref": "#/definitions/basicConfig"
                    },
                    "ArrayPattern": {
                      "$ref": "#/definitions/basicConfig"
                    }
                  },
                  "additionalProperties": false,
                  "minProperties": 1
                }
              ]
            }
          ]
        },
        "messages": {
          "unexpectedLineBreak": "There should be no linebreak here.",
          "missingLineBreak": "There should be a linebreak after this element."
        }
      },
      "arrow-body-style": {
        "type": "suggestion",
        "docs": {
          "description": "require braces around arrow function bodies",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/arrow-body-style"
        },
        "schema": {
          "anyOf": [
            {
              "type": "array",
              "items": [{ "enum": ["always", "never"] }],
              "minItems": 0,
              "maxItems": 1
            },
            {
              "type": "array",
              "items": [
                { "enum": ["as-needed"] },
                {
                  "type": "object",
                  "properties": {
                    "requireReturnForObjectLiteral": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "minItems": 0,
              "maxItems": 2
            }
          ]
        },
        "fixable": "code",
        "messages": {
          "unexpectedOtherBlock": "Unexpected block statement surrounding arrow body.",
          "unexpectedEmptyBlock": "Unexpected block statement surrounding arrow body; put a value of `undefined` immediately after the `=>`.",
          "unexpectedObjectBlock": "Unexpected block statement surrounding arrow body; parenthesize the returned value and move it immediately after the `=>`.",
          "unexpectedSingleBlock": "Unexpected block statement surrounding arrow body; move the returned value immediately after the `=>`.",
          "expectedBlock": "Expected block statement surrounding arrow body."
        }
      },
      "arrow-parens": {
        "type": "layout",
        "docs": {
          "description": "require parentheses around arrow function arguments",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/arrow-parens"
        },
        "fixable": "code",
        "schema": [
          { "enum": ["always", "as-needed"] },
          {
            "type": "object",
            "properties": {
              "requireForBlockBody": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "unexpectedParens": "Unexpected parentheses around single function argument.",
          "expectedParens": "Expected parentheses around arrow function argument.",
          "unexpectedParensInline": "Unexpected parentheses around single function argument having a body with no curly braces.",
          "expectedParensBlock": "Expected parentheses around arrow function argument having a body with curly braces."
        }
      },
      "arrow-spacing": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent spacing before and after the arrow in arrow functions",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/arrow-spacing"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "type": "object",
            "properties": {
              "before": { "type": "boolean", "default": true },
              "after": { "type": "boolean", "default": true }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "expectedBefore": "Missing space before =>.",
          "unexpectedBefore": "Unexpected space before =>.",
          "expectedAfter": "Missing space after =>.",
          "unexpectedAfter": "Unexpected space after =>."
        }
      },
      "block-scoped-var": {
        "type": "suggestion",
        "docs": {
          "description": "enforce the use of variables within the scope they are defined",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/block-scoped-var"
        },
        "schema": [],
        "messages": {
          "outOfScope": "'{{name}}' used outside of binding context."
        }
      },
      "block-spacing": {
        "type": "layout",
        "docs": {
          "description": "disallow or enforce spaces inside of blocks after opening block and before closing block",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/block-spacing"
        },
        "fixable": "whitespace",
        "schema": [{ "enum": ["always", "never"] }],
        "messages": {
          "missing": "Requires a space {{location}} '{{token}}'.",
          "extra": "Unexpected space(s) {{location}} '{{token}}'."
        }
      },
      "brace-style": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent brace style for blocks",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/brace-style"
        },
        "schema": [
          { "enum": ["1tbs", "stroustrup", "allman"] },
          {
            "type": "object",
            "properties": {
              "allowSingleLine": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "fixable": "whitespace",
        "messages": {
          "nextLineOpen": "Opening curly brace does not appear on the same line as controlling statement.",
          "sameLineOpen": "Opening curly brace appears on the same line as controlling statement.",
          "blockSameLine": "Statement inside of curly braces should be on next line.",
          "nextLineClose": "Closing curly brace does not appear on the same line as the subsequent block.",
          "singleLineClose": "Closing curly brace should be on the same line as opening curly brace or on the line after the previous block.",
          "sameLineClose": "Closing curly brace appears on the same line as the subsequent block."
        }
      },
      "callback-return": {
        "deprecated": true,
        "replacedBy": [],
        "type": "suggestion",
        "docs": {
          "description": "require `return` statements after callbacks",
          "category": "Node.js and CommonJS",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/callback-return"
        },
        "schema": [{ "type": "array", "items": { "type": "string" } }],
        "messages": {
          "missingReturn": "Expected return with your callback function."
        }
      },
      "camelcase": {
        "type": "suggestion",
        "docs": {
          "description": "enforce camelcase naming convention",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/camelcase"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "ignoreDestructuring": {
                "type": "boolean",
                "default": false
              },
              "ignoreImports": {
                "type": "boolean",
                "default": false
              },
              "ignoreGlobals": {
                "type": "boolean",
                "default": false
              },
              "properties": { "enum": ["always", "never"] },
              "allow": {
                "type": "array",
                "items": [{ "type": "string" }],
                "minItems": 0,
                "uniqueItems": true
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "notCamelCase": "Identifier '{{name}}' is not in camel case."
        }
      },
      "capitalized-comments": {
        "type": "suggestion",
        "docs": {
          "description": "enforce or disallow capitalization of the first letter of a comment",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/capitalized-comments"
        },
        "fixable": "code",
        "schema": [
          { "enum": ["always", "never"] },
          {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "ignorePattern": { "type": "string" },
                  "ignoreInlineComments": {
                    "type": "boolean"
                  },
                  "ignoreConsecutiveComments": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "line": {
                    "type": "object",
                    "properties": {
                      "ignorePattern": {
                        "type": "string"
                      },
                      "ignoreInlineComments": {
                        "type": "boolean"
                      },
                      "ignoreConsecutiveComments": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  },
                  "block": {
                    "type": "object",
                    "properties": {
                      "ignorePattern": {
                        "type": "string"
                      },
                      "ignoreInlineComments": {
                        "type": "boolean"
                      },
                      "ignoreConsecutiveComments": {
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ],
        "messages": {
          "unexpectedLowercaseComment": "Comments should not begin with a lowercase character.",
          "unexpectedUppercaseComment": "Comments should not begin with an uppercase character."
        }
      },
      "class-methods-use-this": {
        "type": "suggestion",
        "docs": {
          "description": "enforce that class methods utilize `this`",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/class-methods-use-this"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "exceptMethods": {
                "type": "array",
                "items": { "type": "string" }
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "missingThis": "Expected 'this' to be used by class {{name}}."
        }
      },
      "comma-dangle": {
        "type": "layout",
        "docs": {
          "description": "require or disallow trailing commas",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/comma-dangle"
        },
        "fixable": "code",
        "schema": {
          "definitions": {
            "value": {
              "enum": ["always-multiline", "always", "never", "only-multiline"]
            },
            "valueWithIgnore": {
              "enum": [
                "always-multiline",
                "always",
                "ignore",
                "never",
                "only-multiline"
              ]
            }
          },
          "type": "array",
          "items": [
            {
              "oneOf": [
                { "$ref": "#/definitions/value" },
                {
                  "type": "object",
                  "properties": {
                    "arrays": {
                      "$ref": "#/definitions/valueWithIgnore"
                    },
                    "objects": {
                      "$ref": "#/definitions/valueWithIgnore"
                    },
                    "imports": {
                      "$ref": "#/definitions/valueWithIgnore"
                    },
                    "exports": {
                      "$ref": "#/definitions/valueWithIgnore"
                    },
                    "functions": {
                      "$ref": "#/definitions/valueWithIgnore"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          ]
        },
        "messages": {
          "unexpected": "Unexpected trailing comma.",
          "missing": "Missing trailing comma."
        }
      },
      "comma-spacing": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent spacing before and after commas",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/comma-spacing"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "type": "object",
            "properties": {
              "before": { "type": "boolean", "default": false },
              "after": { "type": "boolean", "default": true }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "missing": "A space is required {{loc}} ','.",
          "unexpected": "There should be no space {{loc}} ','."
        }
      },
      "comma-style": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent comma style",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/comma-style"
        },
        "fixable": "code",
        "schema": [
          { "enum": ["first", "last"] },
          {
            "type": "object",
            "properties": {
              "exceptions": {
                "type": "object",
                "additionalProperties": { "type": "boolean" }
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "unexpectedLineBeforeAndAfterComma": "Bad line breaking before and after ','.",
          "expectedCommaFirst": "',' should be placed first.",
          "expectedCommaLast": "',' should be placed last."
        }
      },
      "complexity": {
        "type": "suggestion",
        "docs": {
          "description": "enforce a maximum cyclomatic complexity allowed in a program",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/complexity"
        },
        "schema": [
          {
            "oneOf": [
              { "type": "integer", "minimum": 0 },
              {
                "type": "object",
                "properties": {
                  "maximum": {
                    "type": "integer",
                    "minimum": 0
                  },
                  "max": { "type": "integer", "minimum": 0 }
                },
                "additionalProperties": false
              }
            ]
          }
        ],
        "messages": {
          "complex": "{{name}} has a complexity of {{complexity}}. Maximum allowed is {{max}}."
        }
      },
      "computed-property-spacing": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent spacing inside computed property brackets",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/computed-property-spacing"
        },
        "fixable": "whitespace",
        "schema": [
          { "enum": ["always", "never"] },
          {
            "type": "object",
            "properties": {
              "enforceForClassMembers": {
                "type": "boolean",
                "default": true
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
          "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
          "missingSpaceBefore": "A space is required before '{{tokenValue}}'.",
          "missingSpaceAfter": "A space is required after '{{tokenValue}}'."
        }
      },
      "consistent-return": {
        "type": "suggestion",
        "docs": {
          "description": "require `return` statements to either always or never specify values",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/consistent-return"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "treatUndefinedAsUnspecified": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "missingReturn": "Expected to return a value at the end of {{name}}.",
          "missingReturnValue": "{{name}} expected a return value.",
          "unexpectedReturnValue": "{{name}} expected no return value."
        }
      },
      "consistent-this": {
        "type": "suggestion",
        "docs": {
          "description": "enforce consistent naming when capturing the current execution context",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/consistent-this"
        },
        "schema": {
          "type": "array",
          "items": { "type": "string", "minLength": 1 },
          "uniqueItems": true
        },
        "messages": {
          "aliasNotAssignedToThis": "Designated alias '{{name}}' is not assigned to 'this'.",
          "unexpectedAlias": "Unexpected alias '{{name}}' for 'this'."
        }
      },
      "constructor-super": {
        "type": "problem",
        "docs": {
          "description": "require `super()` calls in constructors",
          "category": "ECMAScript 6",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/constructor-super"
        },
        "schema": [],
        "messages": {
          "missingSome": "Lacked a call of 'super()' in some code paths.",
          "missingAll": "Expected to call 'super()'.",
          "duplicate": "Unexpected duplicate 'super()'.",
          "badSuper": "Unexpected 'super()' because 'super' is not a constructor.",
          "unexpected": "Unexpected 'super()'."
        }
      },
      "curly": {
        "type": "suggestion",
        "docs": {
          "description": "enforce consistent brace style for all control statements",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/curly"
        },
        "schema": {
          "anyOf": [
            {
              "type": "array",
              "items": [{ "enum": ["all"] }],
              "minItems": 0,
              "maxItems": 1
            },
            {
              "type": "array",
              "items": [
                {
                  "enum": ["multi", "multi-line", "multi-or-nest"]
                },
                { "enum": ["consistent"] }
              ],
              "minItems": 0,
              "maxItems": 2
            }
          ]
        },
        "fixable": "code",
        "messages": {
          "missingCurlyAfter": "Expected { after '{{name}}'.",
          "missingCurlyAfterCondition": "Expected { after '{{name}}' condition.",
          "unexpectedCurlyAfter": "Unnecessary { after '{{name}}'.",
          "unexpectedCurlyAfterCondition": "Unnecessary { after '{{name}}' condition."
        }
      },
      "default-case": {
        "type": "suggestion",
        "docs": {
          "description": "require `default` cases in `switch` statements",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/default-case"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "commentPattern": { "type": "string" }
            },
            "additionalProperties": false
          }
        ],
        "messages": { "missingDefaultCase": "Expected a default case." }
      },
      "default-case-last": {
        "type": "suggestion",
        "docs": {
          "description": "enforce default clauses in switch statements to be last",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/default-case-last"
        },
        "schema": [],
        "messages": {
          "notLast": "Default clause should be the last clause."
        }
      },
      "default-param-last": {
        "type": "suggestion",
        "docs": {
          "description": "enforce default parameters to be last",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/default-param-last"
        },
        "schema": [],
        "messages": {
          "shouldBeLast": "Default parameters should be last."
        }
      },
      "dot-location": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent newlines before and after dots",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/dot-location"
        },
        "schema": [{ "enum": ["object", "property"] }],
        "fixable": "code",
        "messages": {
          "expectedDotAfterObject": "Expected dot to be on same line as object.",
          "expectedDotBeforeProperty": "Expected dot to be on same line as property."
        }
      },
      "dot-notation": {
        "type": "suggestion",
        "docs": {
          "description": "enforce dot notation whenever possible",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/dot-notation"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowKeywords": {
                "type": "boolean",
                "default": true
              },
              "allowPattern": { "type": "string", "default": "" }
            },
            "additionalProperties": false
          }
        ],
        "fixable": "code",
        "messages": {
          "useDot": "[{{key}}] is better written in dot notation.",
          "useBrackets": ".{{key}} is a syntax error."
        }
      },
      "eol-last": {
        "type": "layout",
        "docs": {
          "description": "require or disallow newline at the end of files",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/eol-last"
        },
        "fixable": "whitespace",
        "schema": [{ "enum": ["always", "never", "unix", "windows"] }],
        "messages": {
          "missing": "Newline required at end of file but not found.",
          "unexpected": "Newline not allowed at end of file."
        }
      },
      "eqeqeq": {
        "type": "suggestion",
        "docs": {
          "description": "require the use of `===` and `!==`",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/eqeqeq"
        },
        "schema": {
          "anyOf": [
            {
              "type": "array",
              "items": [
                { "enum": ["always"] },
                {
                  "type": "object",
                  "properties": {
                    "null": {
                      "enum": ["always", "never", "ignore"]
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "additionalItems": false
            },
            {
              "type": "array",
              "items": [{ "enum": ["smart", "allow-null"] }],
              "additionalItems": false
            }
          ]
        },
        "fixable": "code",
        "messages": {
          "unexpected": "Expected '{{expectedOperator}}' and instead saw '{{actualOperator}}'."
        }
      },
      "for-direction": {
        "type": "problem",
        "docs": {
          "description": "enforce \"for\" loop update clause moving the counter in the right direction.",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/for-direction"
        },
        "fixable": null,
        "schema": [],
        "messages": {
          "incorrectDirection": "The update clause in this loop moves the variable in the wrong direction."
        }
      },
      "func-call-spacing": {
        "type": "layout",
        "docs": {
          "description": "require or disallow spacing between function identifiers and their invocations",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/func-call-spacing"
        },
        "fixable": "whitespace",
        "schema": {
          "anyOf": [
            {
              "type": "array",
              "items": [{ "enum": ["never"] }],
              "minItems": 0,
              "maxItems": 1
            },
            {
              "type": "array",
              "items": [
                { "enum": ["always"] },
                {
                  "type": "object",
                  "properties": {
                    "allowNewlines": { "type": "boolean" }
                  },
                  "additionalProperties": false
                }
              ],
              "minItems": 0,
              "maxItems": 2
            }
          ]
        },
        "messages": {
          "unexpectedWhitespace": "Unexpected whitespace between function name and paren.",
          "unexpectedNewline": "Unexpected newline between function name and paren.",
          "missing": "Missing space between function name and paren."
        }
      },
      "func-name-matching": {
        "type": "suggestion",
        "docs": {
          "description": "require function names to match the name of the variable or property to which they are assigned",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/func-name-matching"
        },
        "schema": {
          "anyOf": [
            {
              "type": "array",
              "additionalItems": false,
              "items": [
                { "enum": ["always", "never"] },
                {
                  "type": "object",
                  "properties": {
                    "considerPropertyDescriptor": {
                      "type": "boolean"
                    },
                    "includeCommonJSModuleExports": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            },
            {
              "type": "array",
              "additionalItems": false,
              "items": [
                {
                  "type": "object",
                  "properties": {
                    "considerPropertyDescriptor": {
                      "type": "boolean"
                    },
                    "includeCommonJSModuleExports": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          ]
        },
        "messages": {
          "matchProperty": "Function name `{{funcName}}` should match property name `{{name}}`.",
          "matchVariable": "Function name `{{funcName}}` should match variable name `{{name}}`.",
          "notMatchProperty": "Function name `{{funcName}}` should not match property name `{{name}}`.",
          "notMatchVariable": "Function name `{{funcName}}` should not match variable name `{{name}}`."
        }
      },
      "func-names": {
        "type": "suggestion",
        "docs": {
          "description": "require or disallow named `function` expressions",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/func-names"
        },
        "schema": {
          "definitions": {
            "value": { "enum": ["always", "as-needed", "never"] }
          },
          "items": [
            { "$ref": "#/definitions/value" },
            {
              "type": "object",
              "properties": {
                "generators": { "$ref": "#/definitions/value" }
              },
              "additionalProperties": false
            }
          ]
        },
        "messages": {
          "unnamed": "Unexpected unnamed {{name}}.",
          "named": "Unexpected named {{name}}."
        }
      },
      "func-style": {
        "type": "suggestion",
        "docs": {
          "description": "enforce the consistent use of either `function` declarations or expressions",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/func-style"
        },
        "schema": [
          { "enum": ["declaration", "expression"] },
          {
            "type": "object",
            "properties": {
              "allowArrowFunctions": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "expression": "Expected a function expression.",
          "declaration": "Expected a function declaration."
        }
      },
      "function-call-argument-newline": {
        "type": "layout",
        "docs": {
          "description": "enforce line breaks between arguments of a function call",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/function-call-argument-newline"
        },
        "fixable": "whitespace",
        "schema": [{ "enum": ["always", "never", "consistent"] }],
        "messages": {
          "unexpectedLineBreak": "There should be no line break here.",
          "missingLineBreak": "There should be a line break after this argument."
        }
      },
      "function-paren-newline": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent line breaks inside function parentheses",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/function-paren-newline"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "oneOf": [
              {
                "enum": [
                  "always",
                  "never",
                  "consistent",
                  "multiline",
                  "multiline-arguments"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "minItems": {
                    "type": "integer",
                    "minimum": 0
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ],
        "messages": {
          "expectedBefore": "Expected newline before ')'.",
          "expectedAfter": "Expected newline after '('.",
          "expectedBetween": "Expected newline between arguments/params.",
          "unexpectedBefore": "Unexpected newline before ')'.",
          "unexpectedAfter": "Unexpected newline after '('."
        }
      },
      "generator-star-spacing": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent spacing around `*` operators in generator functions",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/generator-star-spacing"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "oneOf": [
              { "enum": ["before", "after", "both", "neither"] },
              {
                "type": "object",
                "properties": {
                  "before": { "type": "boolean" },
                  "after": { "type": "boolean" },
                  "named": {
                    "oneOf": [
                      {
                        "enum": ["before", "after", "both", "neither"]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "before": {
                            "type": "boolean"
                          },
                          "after": {
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  },
                  "anonymous": {
                    "oneOf": [
                      {
                        "enum": ["before", "after", "both", "neither"]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "before": {
                            "type": "boolean"
                          },
                          "after": {
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  },
                  "method": {
                    "oneOf": [
                      {
                        "enum": ["before", "after", "both", "neither"]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "before": {
                            "type": "boolean"
                          },
                          "after": {
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ],
        "messages": {
          "missingBefore": "Missing space before *.",
          "missingAfter": "Missing space after *.",
          "unexpectedBefore": "Unexpected space before *.",
          "unexpectedAfter": "Unexpected space after *."
        }
      },
      "getter-return": {
        "type": "problem",
        "docs": {
          "description": "enforce `return` statements in getters",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/getter-return"
        },
        "fixable": null,
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowImplicit": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "expected": "Expected to return a value in {{name}}.",
          "expectedAlways": "Expected {{name}} to always return a value."
        }
      },
      "global-require": {
        "deprecated": true,
        "replacedBy": [],
        "type": "suggestion",
        "docs": {
          "description": "require `require()` calls to be placed at top-level module scope",
          "category": "Node.js and CommonJS",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/global-require"
        },
        "schema": [],
        "messages": { "unexpected": "Unexpected require()." }
      },
      "grouped-accessor-pairs": {
        "type": "suggestion",
        "docs": {
          "description": "require grouped accessor pairs in object literals and classes",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/grouped-accessor-pairs"
        },
        "schema": [{ "enum": ["anyOrder", "getBeforeSet", "setBeforeGet"] }],
        "messages": {
          "notGrouped": "Accessor pair {{ formerName }} and {{ latterName }} should be grouped.",
          "invalidOrder": "Expected {{ latterName }} to be before {{ formerName }}."
        }
      },
      "guard-for-in": {
        "type": "suggestion",
        "docs": {
          "description": "require `for-in` loops to include an `if` statement",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/guard-for-in"
        },
        "schema": [],
        "messages": {
          "wrap": "The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype."
        }
      },
      "handle-callback-err": {
        "deprecated": true,
        "replacedBy": [],
        "type": "suggestion",
        "docs": {
          "description": "require error handling in callbacks",
          "category": "Node.js and CommonJS",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/handle-callback-err"
        },
        "schema": [{ "type": "string" }],
        "messages": { "expected": "Expected error to be handled." }
      },
      "id-blacklist": {
        "deprecated": true,
        "replacedBy": ["id-denylist"],
        "type": "suggestion",
        "docs": {
          "description": "disallow specified identifiers",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/id-blacklist"
        },
        "schema": {
          "type": "array",
          "items": { "type": "string" },
          "uniqueItems": true
        },
        "messages": {
          "restricted": "Identifier '{{name}}' is restricted."
        }
      },
      "id-denylist": {
        "type": "suggestion",
        "docs": {
          "description": "disallow specified identifiers",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/id-denylist"
        },
        "schema": {
          "type": "array",
          "items": { "type": "string" },
          "uniqueItems": true
        },
        "messages": {
          "restricted": "Identifier '{{name}}' is restricted."
        }
      },
      "id-length": {
        "type": "suggestion",
        "docs": {
          "description": "enforce minimum and maximum identifier lengths",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/id-length"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "min": { "type": "integer", "default": 2 },
              "max": { "type": "integer" },
              "exceptions": {
                "type": "array",
                "uniqueItems": true,
                "items": { "type": "string" }
              },
              "exceptionPatterns": {
                "type": "array",
                "uniqueItems": true,
                "items": { "type": "string" }
              },
              "properties": { "enum": ["always", "never"] }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "tooShort": "Identifier name '{{name}}' is too short (< {{min}}).",
          "tooLong": "Identifier name '{{name}}' is too long (> {{max}})."
        }
      },
      "id-match": {
        "type": "suggestion",
        "docs": {
          "description": "require identifiers to match a specified regular expression",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/id-match"
        },
        "schema": [
          { "type": "string" },
          {
            "type": "object",
            "properties": {
              "properties": {
                "type": "boolean",
                "default": false
              },
              "onlyDeclarations": {
                "type": "boolean",
                "default": false
              },
              "ignoreDestructuring": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "notMatch": "Identifier '{{name}}' does not match the pattern '{{pattern}}'."
        }
      },
      "implicit-arrow-linebreak": {
        "type": "layout",
        "docs": {
          "description": "enforce the location of arrow function bodies",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/implicit-arrow-linebreak"
        },
        "fixable": "whitespace",
        "schema": [{ "enum": ["beside", "below"] }],
        "messages": {
          "expected": "Expected a linebreak before this expression.",
          "unexpected": "Expected no linebreak before this expression."
        }
      },
      "indent": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent indentation",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/indent"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "oneOf": [{ "enum": ["tab"] }, { "type": "integer", "minimum": 0 }]
          },
          {
            "type": "object",
            "properties": {
              "SwitchCase": {
                "type": "integer",
                "minimum": 0,
                "default": 0
              },
              "VariableDeclarator": {
                "oneOf": [
                  {
                    "oneOf": [
                      { "type": "integer", "minimum": 0 },
                      { "enum": ["first", "off"] }
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "var": {
                        "oneOf": [
                          {
                            "type": "integer",
                            "minimum": 0
                          },
                          { "enum": ["first", "off"] }
                        ]
                      },
                      "let": {
                        "oneOf": [
                          {
                            "type": "integer",
                            "minimum": 0
                          },
                          { "enum": ["first", "off"] }
                        ]
                      },
                      "const": {
                        "oneOf": [
                          {
                            "type": "integer",
                            "minimum": 0
                          },
                          { "enum": ["first", "off"] }
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                ]
              },
              "outerIIFEBody": {
                "oneOf": [
                  { "type": "integer", "minimum": 0 },
                  { "enum": ["off"] }
                ]
              },
              "MemberExpression": {
                "oneOf": [
                  { "type": "integer", "minimum": 0 },
                  { "enum": ["off"] }
                ]
              },
              "FunctionDeclaration": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "oneOf": [
                      { "type": "integer", "minimum": 0 },
                      { "enum": ["first", "off"] }
                    ]
                  },
                  "body": { "type": "integer", "minimum": 0 }
                },
                "additionalProperties": false
              },
              "FunctionExpression": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "oneOf": [
                      { "type": "integer", "minimum": 0 },
                      { "enum": ["first", "off"] }
                    ]
                  },
                  "body": { "type": "integer", "minimum": 0 }
                },
                "additionalProperties": false
              },
              "CallExpression": {
                "type": "object",
                "properties": {
                  "arguments": {
                    "oneOf": [
                      { "type": "integer", "minimum": 0 },
                      { "enum": ["first", "off"] }
                    ]
                  }
                },
                "additionalProperties": false
              },
              "ArrayExpression": {
                "oneOf": [
                  { "type": "integer", "minimum": 0 },
                  { "enum": ["first", "off"] }
                ]
              },
              "ObjectExpression": {
                "oneOf": [
                  { "type": "integer", "minimum": 0 },
                  { "enum": ["first", "off"] }
                ]
              },
              "ImportDeclaration": {
                "oneOf": [
                  { "type": "integer", "minimum": 0 },
                  { "enum": ["first", "off"] }
                ]
              },
              "flatTernaryExpressions": {
                "type": "boolean",
                "default": false
              },
              "offsetTernaryExpressions": {
                "type": "boolean",
                "default": false
              },
              "ignoredNodes": {
                "type": "array",
                "items": {
                  "type": "string",
                  "not": { "pattern": ":exit$" }
                }
              },
              "ignoreComments": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "wrongIndentation": "Expected indentation of {{expected}} but found {{actual}}."
        }
      },
      "indent-legacy": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent indentation",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/indent-legacy"
        },
        "deprecated": true,
        "replacedBy": ["indent"],
        "fixable": "whitespace",
        "schema": [
          {
            "oneOf": [{ "enum": ["tab"] }, { "type": "integer", "minimum": 0 }]
          },
          {
            "type": "object",
            "properties": {
              "SwitchCase": { "type": "integer", "minimum": 0 },
              "VariableDeclarator": {
                "oneOf": [
                  { "type": "integer", "minimum": 0 },
                  {
                    "type": "object",
                    "properties": {
                      "var": {
                        "type": "integer",
                        "minimum": 0
                      },
                      "let": {
                        "type": "integer",
                        "minimum": 0
                      },
                      "const": {
                        "type": "integer",
                        "minimum": 0
                      }
                    }
                  }
                ]
              },
              "outerIIFEBody": {
                "type": "integer",
                "minimum": 0
              },
              "MemberExpression": {
                "type": "integer",
                "minimum": 0
              },
              "FunctionDeclaration": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "oneOf": [
                      { "type": "integer", "minimum": 0 },
                      { "enum": ["first"] }
                    ]
                  },
                  "body": { "type": "integer", "minimum": 0 }
                }
              },
              "FunctionExpression": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "oneOf": [
                      { "type": "integer", "minimum": 0 },
                      { "enum": ["first"] }
                    ]
                  },
                  "body": { "type": "integer", "minimum": 0 }
                }
              },
              "CallExpression": {
                "type": "object",
                "properties": {
                  "parameters": {
                    "oneOf": [
                      { "type": "integer", "minimum": 0 },
                      { "enum": ["first"] }
                    ]
                  }
                }
              },
              "ArrayExpression": {
                "oneOf": [
                  { "type": "integer", "minimum": 0 },
                  { "enum": ["first"] }
                ]
              },
              "ObjectExpression": {
                "oneOf": [
                  { "type": "integer", "minimum": 0 },
                  { "enum": ["first"] }
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "expected": "Expected indentation of {{expected}} but found {{actual}}."
        }
      },
      "init-declarations": {
        "type": "suggestion",
        "docs": {
          "description": "require or disallow initialization in variable declarations",
          "category": "Variables",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/init-declarations"
        },
        "schema": {
          "anyOf": [
            {
              "type": "array",
              "items": [{ "enum": ["always"] }],
              "minItems": 0,
              "maxItems": 1
            },
            {
              "type": "array",
              "items": [
                { "enum": ["never"] },
                {
                  "type": "object",
                  "properties": {
                    "ignoreForLoopInit": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "minItems": 0,
              "maxItems": 2
            }
          ]
        },
        "messages": {
          "initialized": "Variable '{{idName}}' should be initialized on declaration.",
          "notInitialized": "Variable '{{idName}}' should not be initialized on declaration."
        }
      },
      "jsx-quotes": {
        "type": "layout",
        "docs": {
          "description": "enforce the consistent use of either double or single quotes in JSX attributes",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/jsx-quotes"
        },
        "fixable": "whitespace",
        "schema": [{ "enum": ["prefer-single", "prefer-double"] }],
        "messages": {
          "unexpected": "Unexpected usage of {{description}}."
        }
      },
      "key-spacing": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent spacing between keys and values in object literal properties",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/key-spacing"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "align": {
                    "anyOf": [
                      { "enum": ["colon", "value"] },
                      {
                        "type": "object",
                        "properties": {
                          "mode": {
                            "enum": ["strict", "minimum"]
                          },
                          "on": {
                            "enum": ["colon", "value"]
                          },
                          "beforeColon": {
                            "type": "boolean"
                          },
                          "afterColon": {
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  },
                  "mode": { "enum": ["strict", "minimum"] },
                  "beforeColon": { "type": "boolean" },
                  "afterColon": { "type": "boolean" }
                },
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "singleLine": {
                    "type": "object",
                    "properties": {
                      "mode": {
                        "enum": ["strict", "minimum"]
                      },
                      "beforeColon": {
                        "type": "boolean"
                      },
                      "afterColon": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "multiLine": {
                    "type": "object",
                    "properties": {
                      "align": {
                        "anyOf": [
                          {
                            "enum": ["colon", "value"]
                          },
                          {
                            "type": "object",
                            "properties": {
                              "mode": {
                                "enum": ["strict", "minimum"]
                              },
                              "on": {
                                "enum": ["colon", "value"]
                              },
                              "beforeColon": {
                                "type": "boolean"
                              },
                              "afterColon": {
                                "type": "boolean"
                              }
                            },
                            "additionalProperties": false
                          }
                        ]
                      },
                      "mode": {
                        "enum": ["strict", "minimum"]
                      },
                      "beforeColon": {
                        "type": "boolean"
                      },
                      "afterColon": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "singleLine": {
                    "type": "object",
                    "properties": {
                      "mode": {
                        "enum": ["strict", "minimum"]
                      },
                      "beforeColon": {
                        "type": "boolean"
                      },
                      "afterColon": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "multiLine": {
                    "type": "object",
                    "properties": {
                      "mode": {
                        "enum": ["strict", "minimum"]
                      },
                      "beforeColon": {
                        "type": "boolean"
                      },
                      "afterColon": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "align": {
                    "type": "object",
                    "properties": {
                      "mode": {
                        "enum": ["strict", "minimum"]
                      },
                      "on": {
                        "enum": ["colon", "value"]
                      },
                      "beforeColon": {
                        "type": "boolean"
                      },
                      "afterColon": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ],
        "messages": {
          "extraKey": "Extra space after {{computed}}key '{{key}}'.",
          "extraValue": "Extra space before value for {{computed}}key '{{key}}'.",
          "missingKey": "Missing space after {{computed}}key '{{key}}'.",
          "missingValue": "Missing space before value for {{computed}}key '{{key}}'."
        }
      },
      "keyword-spacing": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent spacing before and after keywords",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/keyword-spacing"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "type": "object",
            "properties": {
              "before": { "type": "boolean", "default": true },
              "after": { "type": "boolean", "default": true },
              "overrides": {
                "type": "object",
                "properties": {
                  "abstract": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "as": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "async": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "await": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "boolean": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "break": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "byte": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "case": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "catch": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "char": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "class": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "const": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "continue": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "debugger": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "default": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "delete": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "do": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "double": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "else": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "enum": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "export": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "extends": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "false": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "final": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "finally": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "float": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "for": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "from": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "function": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "get": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "goto": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "if": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "implements": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "import": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "in": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "instanceof": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "int": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "interface": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "let": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "long": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "native": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "new": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "null": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "of": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "package": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "private": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "protected": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "public": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "return": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "set": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "short": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "static": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "super": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "switch": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "synchronized": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "this": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "throw": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "throws": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "transient": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "true": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "try": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "typeof": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "var": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "void": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "volatile": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "while": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "with": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "yield": {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "expectedBefore": "Expected space(s) before \"{{value}}\".",
          "expectedAfter": "Expected space(s) after \"{{value}}\".",
          "unexpectedBefore": "Unexpected space(s) before \"{{value}}\".",
          "unexpectedAfter": "Unexpected space(s) after \"{{value}}\"."
        }
      },
      "line-comment-position": {
        "type": "layout",
        "docs": {
          "description": "enforce position of line comments",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/line-comment-position"
        },
        "schema": [
          {
            "oneOf": [
              { "enum": ["above", "beside"] },
              {
                "type": "object",
                "properties": {
                  "position": { "enum": ["above", "beside"] },
                  "ignorePattern": { "type": "string" },
                  "applyDefaultPatterns": {
                    "type": "boolean"
                  },
                  "applyDefaultIgnorePatterns": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ],
        "messages": {
          "above": "Expected comment to be above code.",
          "beside": "Expected comment to be beside code."
        }
      },
      "linebreak-style": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent linebreak style",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/linebreak-style"
        },
        "fixable": "whitespace",
        "schema": [{ "enum": ["unix", "windows"] }],
        "messages": {
          "expectedLF": "Expected linebreaks to be 'LF' but found 'CRLF'.",
          "expectedCRLF": "Expected linebreaks to be 'CRLF' but found 'LF'."
        }
      },
      "lines-around-comment": {
        "type": "layout",
        "docs": {
          "description": "require empty lines around comments",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/lines-around-comment"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "type": "object",
            "properties": {
              "beforeBlockComment": {
                "type": "boolean",
                "default": true
              },
              "afterBlockComment": {
                "type": "boolean",
                "default": false
              },
              "beforeLineComment": {
                "type": "boolean",
                "default": false
              },
              "afterLineComment": {
                "type": "boolean",
                "default": false
              },
              "allowBlockStart": {
                "type": "boolean",
                "default": false
              },
              "allowBlockEnd": {
                "type": "boolean",
                "default": false
              },
              "allowClassStart": { "type": "boolean" },
              "allowClassEnd": { "type": "boolean" },
              "allowObjectStart": { "type": "boolean" },
              "allowObjectEnd": { "type": "boolean" },
              "allowArrayStart": { "type": "boolean" },
              "allowArrayEnd": { "type": "boolean" },
              "ignorePattern": { "type": "string" },
              "applyDefaultIgnorePatterns": { "type": "boolean" }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "after": "Expected line after comment.",
          "before": "Expected line before comment."
        }
      },
      "lines-around-directive": {
        "type": "layout",
        "docs": {
          "description": "require or disallow newlines around directives",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/lines-around-directive"
        },
        "schema": [
          {
            "oneOf": [
              { "enum": ["always", "never"] },
              {
                "type": "object",
                "properties": {
                  "before": { "enum": ["always", "never"] },
                  "after": { "enum": ["always", "never"] }
                },
                "additionalProperties": false,
                "minProperties": 2
              }
            ]
          }
        ],
        "fixable": "whitespace",
        "messages": {
          "expected": "Expected newline {{location}} \"{{value}}\" directive.",
          "unexpected": "Unexpected newline {{location}} \"{{value}}\" directive."
        },
        "deprecated": true,
        "replacedBy": ["padding-line-between-statements"]
      },
      "lines-between-class-members": {
        "type": "layout",
        "docs": {
          "description": "require or disallow an empty line between class members",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/lines-between-class-members"
        },
        "fixable": "whitespace",
        "schema": [
          { "enum": ["always", "never"] },
          {
            "type": "object",
            "properties": {
              "exceptAfterSingleLine": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "never": "Unexpected blank line between class members.",
          "always": "Expected blank line between class members."
        }
      },
      "max-classes-per-file": {
        "type": "suggestion",
        "docs": {
          "description": "enforce a maximum number of classes per file",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/max-classes-per-file"
        },
        "schema": [{ "type": "integer", "minimum": 1 }],
        "messages": {
          "maximumExceeded": "File has too many classes ({{ classCount }}). Maximum allowed is {{ max }}."
        }
      },
      "max-depth": {
        "type": "suggestion",
        "docs": {
          "description": "enforce a maximum depth that blocks can be nested",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/max-depth"
        },
        "schema": [
          {
            "oneOf": [
              { "type": "integer", "minimum": 0 },
              {
                "type": "object",
                "properties": {
                  "maximum": {
                    "type": "integer",
                    "minimum": 0
                  },
                  "max": { "type": "integer", "minimum": 0 }
                },
                "additionalProperties": false
              }
            ]
          }
        ],
        "messages": {
          "tooDeeply": "Blocks are nested too deeply ({{depth}}). Maximum allowed is {{maxDepth}}."
        }
      },
      "max-len": {
        "type": "layout",
        "docs": {
          "description": "enforce a maximum line length",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/max-len"
        },
        "schema": [
          {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "code": { "type": "integer", "minimum": 0 },
                  "comments": {
                    "type": "integer",
                    "minimum": 0
                  },
                  "tabWidth": {
                    "type": "integer",
                    "minimum": 0
                  },
                  "ignorePattern": { "type": "string" },
                  "ignoreComments": { "type": "boolean" },
                  "ignoreStrings": { "type": "boolean" },
                  "ignoreUrls": { "type": "boolean" },
                  "ignoreTemplateLiterals": {
                    "type": "boolean"
                  },
                  "ignoreRegExpLiterals": {
                    "type": "boolean"
                  },
                  "ignoreTrailingComments": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              { "type": "integer", "minimum": 0 }
            ]
          },
          {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "code": { "type": "integer", "minimum": 0 },
                  "comments": {
                    "type": "integer",
                    "minimum": 0
                  },
                  "tabWidth": {
                    "type": "integer",
                    "minimum": 0
                  },
                  "ignorePattern": { "type": "string" },
                  "ignoreComments": { "type": "boolean" },
                  "ignoreStrings": { "type": "boolean" },
                  "ignoreUrls": { "type": "boolean" },
                  "ignoreTemplateLiterals": {
                    "type": "boolean"
                  },
                  "ignoreRegExpLiterals": {
                    "type": "boolean"
                  },
                  "ignoreTrailingComments": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              { "type": "integer", "minimum": 0 }
            ]
          },
          {
            "type": "object",
            "properties": {
              "code": { "type": "integer", "minimum": 0 },
              "comments": { "type": "integer", "minimum": 0 },
              "tabWidth": { "type": "integer", "minimum": 0 },
              "ignorePattern": { "type": "string" },
              "ignoreComments": { "type": "boolean" },
              "ignoreStrings": { "type": "boolean" },
              "ignoreUrls": { "type": "boolean" },
              "ignoreTemplateLiterals": { "type": "boolean" },
              "ignoreRegExpLiterals": { "type": "boolean" },
              "ignoreTrailingComments": { "type": "boolean" }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "max": "This line has a length of {{lineLength}}. Maximum allowed is {{maxLength}}.",
          "maxComment": "This line has a comment length of {{lineLength}}. Maximum allowed is {{maxCommentLength}}."
        }
      },
      "max-lines": {
        "type": "suggestion",
        "docs": {
          "description": "enforce a maximum number of lines per file",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/max-lines"
        },
        "schema": [
          {
            "oneOf": [
              { "type": "integer", "minimum": 0 },
              {
                "type": "object",
                "properties": {
                  "max": { "type": "integer", "minimum": 0 },
                  "skipComments": { "type": "boolean" },
                  "skipBlankLines": { "type": "boolean" }
                },
                "additionalProperties": false
              }
            ]
          }
        ],
        "messages": {
          "exceed": "File has too many lines ({{actual}}). Maximum allowed is {{max}}."
        }
      },
      "max-lines-per-function": {
        "type": "suggestion",
        "docs": {
          "description": "enforce a maximum number of lines of code in a function",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/max-lines-per-function"
        },
        "schema": [
          {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "max": { "type": "integer", "minimum": 0 },
                  "skipComments": { "type": "boolean" },
                  "skipBlankLines": { "type": "boolean" },
                  "IIFEs": { "type": "boolean" }
                },
                "additionalProperties": false
              },
              { "type": "integer", "minimum": 1 }
            ]
          }
        ],
        "messages": {
          "exceed": "{{name}} has too many lines ({{lineCount}}). Maximum allowed is {{maxLines}}."
        }
      },
      "max-nested-callbacks": {
        "type": "suggestion",
        "docs": {
          "description": "enforce a maximum depth that callbacks can be nested",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/max-nested-callbacks"
        },
        "schema": [
          {
            "oneOf": [
              { "type": "integer", "minimum": 0 },
              {
                "type": "object",
                "properties": {
                  "maximum": {
                    "type": "integer",
                    "minimum": 0
                  },
                  "max": { "type": "integer", "minimum": 0 }
                },
                "additionalProperties": false
              }
            ]
          }
        ],
        "messages": {
          "exceed": "Too many nested callbacks ({{num}}). Maximum allowed is {{max}}."
        }
      },
      "max-params": {
        "type": "suggestion",
        "docs": {
          "description": "enforce a maximum number of parameters in function definitions",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/max-params"
        },
        "schema": [
          {
            "oneOf": [
              { "type": "integer", "minimum": 0 },
              {
                "type": "object",
                "properties": {
                  "maximum": {
                    "type": "integer",
                    "minimum": 0
                  },
                  "max": { "type": "integer", "minimum": 0 }
                },
                "additionalProperties": false
              }
            ]
          }
        ],
        "messages": {
          "exceed": "{{name}} has too many parameters ({{count}}). Maximum allowed is {{max}}."
        }
      },
      "max-statements": {
        "type": "suggestion",
        "docs": {
          "description": "enforce a maximum number of statements allowed in function blocks",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/max-statements"
        },
        "schema": [
          {
            "oneOf": [
              { "type": "integer", "minimum": 0 },
              {
                "type": "object",
                "properties": {
                  "maximum": {
                    "type": "integer",
                    "minimum": 0
                  },
                  "max": { "type": "integer", "minimum": 0 }
                },
                "additionalProperties": false
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "ignoreTopLevelFunctions": { "type": "boolean" }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "exceed": "{{name}} has too many statements ({{count}}). Maximum allowed is {{max}}."
        }
      },
      "max-statements-per-line": {
        "type": "layout",
        "docs": {
          "description": "enforce a maximum number of statements allowed per line",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/max-statements-per-line"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "max": {
                "type": "integer",
                "minimum": 1,
                "default": 1
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "exceed": "This line has {{numberOfStatementsOnThisLine}} {{statements}}. Maximum allowed is {{maxStatementsPerLine}}."
        }
      },
      "multiline-comment-style": {
        "type": "suggestion",
        "docs": {
          "description": "enforce a particular style for multiline comments",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/multiline-comment-style"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "enum": ["starred-block", "separate-lines", "bare-block"]
          }
        ],
        "messages": {
          "expectedBlock": "Expected a block comment instead of consecutive line comments.",
          "expectedBareBlock": "Expected a block comment without padding stars.",
          "startNewline": "Expected a linebreak after '/*'.",
          "endNewline": "Expected a linebreak before '*/'.",
          "missingStar": "Expected a '*' at the start of this line.",
          "alignment": "Expected this line to be aligned with the start of the comment.",
          "expectedLines": "Expected multiple line comments instead of a block comment."
        }
      },
      "multiline-ternary": {
        "type": "layout",
        "docs": {
          "description": "enforce newlines between operands of ternary expressions",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/multiline-ternary"
        },
        "schema": [{ "enum": ["always", "always-multiline", "never"] }],
        "messages": {
          "expectedTestCons": "Expected newline between test and consequent of ternary expression.",
          "expectedConsAlt": "Expected newline between consequent and alternate of ternary expression.",
          "unexpectedTestCons": "Unexpected newline between test and consequent of ternary expression.",
          "unexpectedConsAlt": "Unexpected newline between consequent and alternate of ternary expression."
        },
        "fixable": "whitespace"
      },
      "new-cap": {
        "type": "suggestion",
        "docs": {
          "description": "require constructor names to begin with a capital letter",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/new-cap"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "newIsCap": { "type": "boolean", "default": true },
              "capIsNew": { "type": "boolean", "default": true },
              "newIsCapExceptions": {
                "type": "array",
                "items": { "type": "string" }
              },
              "newIsCapExceptionPattern": { "type": "string" },
              "capIsNewExceptions": {
                "type": "array",
                "items": { "type": "string" }
              },
              "capIsNewExceptionPattern": { "type": "string" },
              "properties": { "type": "boolean", "default": true }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "upper": "A function with a name starting with an uppercase letter should only be used as a constructor.",
          "lower": "A constructor name should not start with a lowercase letter."
        }
      },
      "new-parens": {
        "type": "layout",
        "docs": {
          "description": "enforce or disallow parentheses when invoking a constructor with no arguments",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/new-parens"
        },
        "fixable": "code",
        "schema": {
          "anyOf": [
            {
              "type": "array",
              "items": [{ "enum": ["always", "never"] }],
              "minItems": 0,
              "maxItems": 1
            }
          ]
        },
        "messages": {
          "missing": "Missing '()' invoking a constructor.",
          "unnecessary": "Unnecessary '()' invoking a constructor with no arguments."
        }
      },
      "newline-after-var": {
        "type": "layout",
        "docs": {
          "description": "require or disallow an empty line after variable declarations",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/newline-after-var"
        },
        "schema": [{ "enum": ["never", "always"] }],
        "fixable": "whitespace",
        "messages": {
          "expected": "Expected blank line after variable declarations.",
          "unexpected": "Unexpected blank line after variable declarations."
        },
        "deprecated": true,
        "replacedBy": ["padding-line-between-statements"]
      },
      "newline-before-return": {
        "type": "layout",
        "docs": {
          "description": "require an empty line before `return` statements",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/newline-before-return"
        },
        "fixable": "whitespace",
        "schema": [],
        "messages": {
          "expected": "Expected newline before return statement."
        },
        "deprecated": true,
        "replacedBy": ["padding-line-between-statements"]
      },
      "newline-per-chained-call": {
        "type": "layout",
        "docs": {
          "description": "require a newline after each call in a method chain",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/newline-per-chained-call"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "type": "object",
            "properties": {
              "ignoreChainWithDepth": {
                "type": "integer",
                "minimum": 1,
                "maximum": 10,
                "default": 2
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "expected": "Expected line break before `{{callee}}`."
        }
      },
      "no-alert": {
        "type": "suggestion",
        "docs": {
          "description": "disallow the use of `alert`, `confirm`, and `prompt`",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-alert"
        },
        "schema": [],
        "messages": { "unexpected": "Unexpected {{name}}." }
      },
      "no-array-constructor": {
        "type": "suggestion",
        "docs": {
          "description": "disallow `Array` constructors",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-array-constructor"
        },
        "schema": [],
        "messages": {
          "preferLiteral": "The array literal notation [] is preferable."
        }
      },
      "no-async-promise-executor": {
        "type": "problem",
        "docs": {
          "description": "disallow using an async function as a Promise executor",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-async-promise-executor"
        },
        "fixable": null,
        "schema": [],
        "messages": {
          "async": "Promise executor functions should not be async."
        }
      },
      "no-await-in-loop": {
        "type": "problem",
        "docs": {
          "description": "disallow `await` inside of loops",
          "category": "Possible Errors",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-await-in-loop"
        },
        "schema": [],
        "messages": {
          "unexpectedAwait": "Unexpected `await` inside a loop."
        }
      },
      "no-bitwise": {
        "type": "suggestion",
        "docs": {
          "description": "disallow bitwise operators",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-bitwise"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allow": {
                "type": "array",
                "items": {
                  "enum": [
                    "^",
                    "|",
                    "&",
                    "<<",
                    ">>",
                    ">>>",
                    "^=",
                    "|=",
                    "&=",
                    "<<=",
                    ">>=",
                    ">>>=",
                    "~"
                  ]
                },
                "uniqueItems": true
              },
              "int32Hint": { "type": "boolean", "default": false }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "unexpected": "Unexpected use of '{{operator}}'."
        }
      },
      "no-buffer-constructor": {
        "deprecated": true,
        "replacedBy": [],
        "type": "problem",
        "docs": {
          "description": "disallow use of the `Buffer()` constructor",
          "category": "Node.js and CommonJS",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-buffer-constructor"
        },
        "schema": [],
        "messages": {
          "deprecated": "{{expr}} is deprecated. Use Buffer.from(), Buffer.alloc(), or Buffer.allocUnsafe() instead."
        }
      },
      "no-caller": {
        "type": "suggestion",
        "docs": {
          "description": "disallow the use of `arguments.caller` or `arguments.callee`",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-caller"
        },
        "schema": [],
        "messages": { "unexpected": "Avoid arguments.{{prop}}." }
      },
      "no-case-declarations": {
        "type": "suggestion",
        "docs": {
          "description": "disallow lexical declarations in case clauses",
          "category": "Best Practices",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-case-declarations"
        },
        "schema": [],
        "messages": {
          "unexpected": "Unexpected lexical declaration in case block."
        }
      },
      "no-catch-shadow": {
        "type": "suggestion",
        "docs": {
          "description": "disallow `catch` clause parameters from shadowing variables in the outer scope",
          "category": "Variables",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-catch-shadow"
        },
        "replacedBy": ["no-shadow"],
        "deprecated": true,
        "schema": [],
        "messages": {
          "mutable": "Value of '{{name}}' may be overwritten in IE 8 and earlier."
        }
      },
      "no-class-assign": {
        "type": "problem",
        "docs": {
          "description": "disallow reassigning class members",
          "category": "ECMAScript 6",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-class-assign"
        },
        "schema": [],
        "messages": { "class": "'{{name}}' is a class." }
      },
      "no-compare-neg-zero": {
        "type": "problem",
        "docs": {
          "description": "disallow comparing against -0",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-compare-neg-zero"
        },
        "fixable": null,
        "schema": [],
        "messages": {
          "unexpected": "Do not use the '{{operator}}' operator to compare against -0."
        }
      },
      "no-cond-assign": {
        "type": "problem",
        "docs": {
          "description": "disallow assignment operators in conditional expressions",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-cond-assign"
        },
        "schema": [{ "enum": ["except-parens", "always"] }],
        "messages": {
          "unexpected": "Unexpected assignment within {{type}}.",
          "missing": "Expected a conditional expression and instead saw an assignment."
        }
      },
      "no-confusing-arrow": {
        "type": "suggestion",
        "docs": {
          "description": "disallow arrow functions where they could be confused with comparisons",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-confusing-arrow"
        },
        "fixable": "code",
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowParens": {
                "type": "boolean",
                "default": true
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "confusing": "Arrow function used ambiguously with a conditional expression."
        }
      },
      "no-console": {
        "type": "suggestion",
        "docs": {
          "description": "disallow the use of `console`",
          "category": "Possible Errors",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-console"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allow": {
                "type": "array",
                "items": { "type": "string" },
                "minItems": 1,
                "uniqueItems": true
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": { "unexpected": "Unexpected console statement." }
      },
      "no-const-assign": {
        "type": "problem",
        "docs": {
          "description": "disallow reassigning `const` variables",
          "category": "ECMAScript 6",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-const-assign"
        },
        "schema": [],
        "messages": { "const": "'{{name}}' is constant." }
      },
      "no-constant-condition": {
        "type": "problem",
        "docs": {
          "description": "disallow constant expressions in conditions",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-constant-condition"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "checkLoops": { "type": "boolean", "default": true }
            },
            "additionalProperties": false
          }
        ],
        "messages": { "unexpected": "Unexpected constant condition." }
      },
      "no-constructor-return": {
        "type": "problem",
        "docs": {
          "description": "disallow returning value from constructor",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-constructor-return"
        },
        "schema": {},
        "fixable": null,
        "messages": {
          "unexpected": "Unexpected return statement in constructor."
        }
      },
      "no-continue": {
        "type": "suggestion",
        "docs": {
          "description": "disallow `continue` statements",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-continue"
        },
        "schema": [],
        "messages": {
          "unexpected": "Unexpected use of continue statement."
        }
      },
      "no-control-regex": {
        "type": "problem",
        "docs": {
          "description": "disallow control characters in regular expressions",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-control-regex"
        },
        "schema": [],
        "messages": {
          "unexpected": "Unexpected control character(s) in regular expression: {{controlChars}}."
        }
      },
      "no-debugger": {
        "type": "problem",
        "docs": {
          "description": "disallow the use of `debugger`",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-debugger"
        },
        "fixable": null,
        "schema": [],
        "messages": { "unexpected": "Unexpected 'debugger' statement." }
      },
      "no-delete-var": {
        "type": "suggestion",
        "docs": {
          "description": "disallow deleting variables",
          "category": "Variables",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-delete-var"
        },
        "schema": [],
        "messages": { "unexpected": "Variables should not be deleted." }
      },
      "no-div-regex": {
        "type": "suggestion",
        "docs": {
          "description": "disallow division operators explicitly at the beginning of regular expressions",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-div-regex"
        },
        "fixable": "code",
        "schema": [],
        "messages": {
          "unexpected": "A regular expression literal can be confused with '/='."
        }
      },
      "no-dupe-args": {
        "type": "problem",
        "docs": {
          "description": "disallow duplicate arguments in `function` definitions",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-dupe-args"
        },
        "schema": [],
        "messages": { "unexpected": "Duplicate param '{{name}}'." }
      },
      "no-dupe-class-members": {
        "type": "problem",
        "docs": {
          "description": "disallow duplicate class members",
          "category": "ECMAScript 6",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-dupe-class-members"
        },
        "schema": [],
        "messages": { "unexpected": "Duplicate name '{{name}}'." }
      },
      "no-dupe-else-if": {
        "type": "problem",
        "docs": {
          "description": "disallow duplicate conditions in if-else-if chains",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-dupe-else-if"
        },
        "schema": [],
        "messages": {
          "unexpected": "This branch can never execute. Its condition is a duplicate or covered by previous conditions in the if-else-if chain."
        }
      },
      "no-dupe-keys": {
        "type": "problem",
        "docs": {
          "description": "disallow duplicate keys in object literals",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-dupe-keys"
        },
        "schema": [],
        "messages": { "unexpected": "Duplicate key '{{name}}'." }
      },
      "no-duplicate-case": {
        "type": "problem",
        "docs": {
          "description": "disallow duplicate case labels",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-duplicate-case"
        },
        "schema": [],
        "messages": { "unexpected": "Duplicate case label." }
      },
      "no-duplicate-imports": {
        "type": "problem",
        "docs": {
          "description": "disallow duplicate module imports",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-duplicate-imports"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "includeExports": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "import": "'{{module}}' import is duplicated.",
          "importAs": "'{{module}}' import is duplicated as export.",
          "export": "'{{module}}' export is duplicated.",
          "exportAs": "'{{module}}' export is duplicated as import."
        }
      },
      "no-else-return": {
        "type": "suggestion",
        "docs": {
          "description": "disallow `else` blocks after `return` statements in `if` statements",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-else-return"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowElseIf": {
                "type": "boolean",
                "default": true
              }
            },
            "additionalProperties": false
          }
        ],
        "fixable": "code",
        "messages": {
          "unexpected": "Unnecessary 'else' after 'return'."
        }
      },
      "no-empty": {
        "type": "suggestion",
        "docs": {
          "description": "disallow empty block statements",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-empty"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowEmptyCatch": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": { "unexpected": "Empty {{type}} statement." }
      },
      "no-empty-character-class": {
        "type": "problem",
        "docs": {
          "description": "disallow empty character classes in regular expressions",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-empty-character-class"
        },
        "schema": [],
        "messages": { "unexpected": "Empty class." }
      },
      "no-empty-function": {
        "type": "suggestion",
        "docs": {
          "description": "disallow empty functions",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-empty-function"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allow": {
                "type": "array",
                "items": {
                  "enum": [
                    "functions",
                    "arrowFunctions",
                    "generatorFunctions",
                    "methods",
                    "generatorMethods",
                    "getters",
                    "setters",
                    "constructors",
                    "asyncFunctions",
                    "asyncMethods"
                  ]
                },
                "uniqueItems": true
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": { "unexpected": "Unexpected empty {{name}}." }
      },
      "no-empty-pattern": {
        "type": "problem",
        "docs": {
          "description": "disallow empty destructuring patterns",
          "category": "Best Practices",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-empty-pattern"
        },
        "schema": [],
        "messages": {
          "unexpected": "Unexpected empty {{type}} pattern."
        }
      },
      "no-eq-null": {
        "type": "suggestion",
        "docs": {
          "description": "disallow `null` comparisons without type-checking operators",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-eq-null"
        },
        "schema": [],
        "messages": { "unexpected": "Use '===' to compare with null." }
      },
      "no-eval": {
        "type": "suggestion",
        "docs": {
          "description": "disallow the use of `eval()`",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-eval"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowIndirect": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": { "unexpected": "eval can be harmful." }
      },
      "no-ex-assign": {
        "type": "problem",
        "docs": {
          "description": "disallow reassigning exceptions in `catch` clauses",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-ex-assign"
        },
        "schema": [],
        "messages": {
          "unexpected": "Do not assign to the exception parameter."
        }
      },
      "no-extend-native": {
        "type": "suggestion",
        "docs": {
          "description": "disallow extending native types",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-extend-native"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "exceptions": {
                "type": "array",
                "items": { "type": "string" },
                "uniqueItems": true
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "unexpected": "{{builtin}} prototype is read only, properties should not be added."
        }
      },
      "no-extra-bind": {
        "type": "suggestion",
        "docs": {
          "description": "disallow unnecessary calls to `.bind()`",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-extra-bind"
        },
        "schema": [],
        "fixable": "code",
        "messages": {
          "unexpected": "The function binding is unnecessary."
        }
      },
      "no-extra-boolean-cast": {
        "type": "suggestion",
        "docs": {
          "description": "disallow unnecessary boolean casts",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-extra-boolean-cast"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "enforceForLogicalOperands": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "fixable": "code",
        "messages": {
          "unexpectedCall": "Redundant Boolean call.",
          "unexpectedNegation": "Redundant double negation."
        }
      },
      "no-extra-label": {
        "type": "suggestion",
        "docs": {
          "description": "disallow unnecessary labels",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-extra-label"
        },
        "schema": [],
        "fixable": "code",
        "messages": {
          "unexpected": "This label '{{name}}' is unnecessary."
        }
      },
      "no-extra-parens": {
        "type": "layout",
        "docs": {
          "description": "disallow unnecessary parentheses",
          "category": "Possible Errors",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-extra-parens"
        },
        "fixable": "code",
        "schema": {
          "anyOf": [
            {
              "type": "array",
              "items": [{ "enum": ["functions"] }],
              "minItems": 0,
              "maxItems": 1
            },
            {
              "type": "array",
              "items": [
                { "enum": ["all"] },
                {
                  "type": "object",
                  "properties": {
                    "conditionalAssign": {
                      "type": "boolean"
                    },
                    "nestedBinaryExpressions": {
                      "type": "boolean"
                    },
                    "returnAssign": { "type": "boolean" },
                    "ignoreJSX": {
                      "enum": ["none", "all", "single-line", "multi-line"]
                    },
                    "enforceForArrowConditionals": {
                      "type": "boolean"
                    },
                    "enforceForSequenceExpressions": {
                      "type": "boolean"
                    },
                    "enforceForNewInMemberExpressions": {
                      "type": "boolean"
                    },
                    "enforceForFunctionPrototypeMethods": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "minItems": 0,
              "maxItems": 2
            }
          ]
        },
        "messages": {
          "unexpected": "Unnecessary parentheses around expression."
        }
      },
      "no-extra-semi": {
        "type": "suggestion",
        "docs": {
          "description": "disallow unnecessary semicolons",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-extra-semi"
        },
        "fixable": "code",
        "schema": [],
        "messages": { "unexpected": "Unnecessary semicolon." }
      },
      "no-fallthrough": {
        "type": "problem",
        "docs": {
          "description": "disallow fallthrough of `case` statements",
          "category": "Best Practices",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-fallthrough"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "commentPattern": {
                "type": "string",
                "default": ""
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "case": "Expected a 'break' statement before 'case'.",
          "default": "Expected a 'break' statement before 'default'."
        }
      },
      "no-floating-decimal": {
        "type": "suggestion",
        "docs": {
          "description": "disallow leading or trailing decimal points in numeric literals",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-floating-decimal"
        },
        "schema": [],
        "fixable": "code",
        "messages": {
          "leading": "A leading decimal point can be confused with a dot.",
          "trailing": "A trailing decimal point can be confused with a dot."
        }
      },
      "no-func-assign": {
        "type": "problem",
        "docs": {
          "description": "disallow reassigning `function` declarations",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-func-assign"
        },
        "schema": [],
        "messages": { "isAFunction": "'{{name}}' is a function." }
      },
      "no-global-assign": {
        "type": "suggestion",
        "docs": {
          "description": "disallow assignments to native objects or read-only global variables",
          "category": "Best Practices",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-global-assign"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "exceptions": {
                "type": "array",
                "items": { "type": "string" },
                "uniqueItems": true
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "globalShouldNotBeModified": "Read-only global '{{name}}' should not be modified."
        }
      },
      "no-implicit-coercion": {
        "type": "suggestion",
        "docs": {
          "description": "disallow shorthand type conversions",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-implicit-coercion"
        },
        "fixable": "code",
        "schema": [
          {
            "type": "object",
            "properties": {
              "boolean": { "type": "boolean", "default": true },
              "number": { "type": "boolean", "default": true },
              "string": { "type": "boolean", "default": true },
              "disallowTemplateShorthand": {
                "type": "boolean",
                "default": false
              },
              "allow": {
                "type": "array",
                "items": { "enum": ["~", "!!", "+", "*"] },
                "uniqueItems": true
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "useRecommendation": "use `{{recommendation}}` instead."
        }
      },
      "no-implicit-globals": {
        "type": "suggestion",
        "docs": {
          "description": "disallow declarations in the global scope",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-implicit-globals"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "lexicalBindings": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "globalNonLexicalBinding": "Unexpected {{kind}} declaration in the global scope, wrap in an IIFE for a local variable, assign as global property for a global variable.",
          "globalLexicalBinding": "Unexpected {{kind}} declaration in the global scope, wrap in a block or in an IIFE.",
          "globalVariableLeak": "Global variable leak, declare the variable if it is intended to be local.",
          "assignmentToReadonlyGlobal": "Unexpected assignment to read-only global variable.",
          "redeclarationOfReadonlyGlobal": "Unexpected redeclaration of read-only global variable."
        }
      },
      "no-implied-eval": {
        "type": "suggestion",
        "docs": {
          "description": "disallow the use of `eval()`-like methods",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-implied-eval"
        },
        "schema": [],
        "messages": {
          "impliedEval": "Implied eval. Consider passing a function instead of a string."
        }
      },
      "no-import-assign": {
        "type": "problem",
        "docs": {
          "description": "disallow assigning to imported bindings",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-import-assign"
        },
        "schema": [],
        "messages": {
          "readonly": "'{{name}}' is read-only.",
          "readonlyMember": "The members of '{{name}}' are read-only."
        }
      },
      "no-inline-comments": {
        "type": "suggestion",
        "docs": {
          "description": "disallow inline comments after code",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-inline-comments"
        },
        "schema": [
          {
            "type": "object",
            "properties": { "ignorePattern": { "type": "string" } },
            "additionalProperties": false
          }
        ],
        "messages": {
          "unexpectedInlineComment": "Unexpected comment inline with code."
        }
      },
      "no-inner-declarations": {
        "type": "problem",
        "docs": {
          "description": "disallow variable or `function` declarations in nested blocks",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-inner-declarations"
        },
        "schema": [{ "enum": ["functions", "both"] }],
        "messages": {
          "moveDeclToRoot": "Move {{type}} declaration to {{body}} root."
        }
      },
      "no-invalid-regexp": {
        "type": "problem",
        "docs": {
          "description": "disallow invalid regular expression strings in `RegExp` constructors",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-invalid-regexp"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowConstructorFlags": {
                "type": "array",
                "items": { "type": "string" }
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": { "regexMessage": "{{message}}." }
      },
      "no-invalid-this": {
        "type": "suggestion",
        "docs": {
          "description": "disallow `this` keywords outside of classes or class-like objects",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-invalid-this"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "capIsConstructor": {
                "type": "boolean",
                "default": true
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": { "unexpectedThis": "Unexpected 'this'." }
      },
      "no-irregular-whitespace": {
        "type": "problem",
        "docs": {
          "description": "disallow irregular whitespace",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-irregular-whitespace"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "skipComments": {
                "type": "boolean",
                "default": false
              },
              "skipStrings": {
                "type": "boolean",
                "default": true
              },
              "skipTemplates": {
                "type": "boolean",
                "default": false
              },
              "skipRegExps": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "noIrregularWhitespace": "Irregular whitespace not allowed."
        }
      },
      "no-iterator": {
        "type": "suggestion",
        "docs": {
          "description": "disallow the use of the `__iterator__` property",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-iterator"
        },
        "schema": [],
        "messages": { "noIterator": "Reserved name '__iterator__'." }
      },
      "no-label-var": {
        "type": "suggestion",
        "docs": {
          "description": "disallow labels that share a name with a variable",
          "category": "Variables",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-label-var"
        },
        "schema": [],
        "messages": {
          "identifierClashWithLabel": "Found identifier with same name as label."
        }
      },
      "no-labels": {
        "type": "suggestion",
        "docs": {
          "description": "disallow labeled statements",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-labels"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowLoop": {
                "type": "boolean",
                "default": false
              },
              "allowSwitch": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "unexpectedLabel": "Unexpected labeled statement.",
          "unexpectedLabelInBreak": "Unexpected label in break statement.",
          "unexpectedLabelInContinue": "Unexpected label in continue statement."
        }
      },
      "no-lone-blocks": {
        "type": "suggestion",
        "docs": {
          "description": "disallow unnecessary nested blocks",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-lone-blocks"
        },
        "schema": [],
        "messages": {
          "redundantBlock": "Block is redundant.",
          "redundantNestedBlock": "Nested block is redundant."
        }
      },
      "no-lonely-if": {
        "type": "suggestion",
        "docs": {
          "description": "disallow `if` statements as the only statement in `else` blocks",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-lonely-if"
        },
        "schema": [],
        "fixable": "code",
        "messages": {
          "unexpectedLonelyIf": "Unexpected if as the only statement in an else block."
        }
      },
      "no-loop-func": {
        "type": "suggestion",
        "docs": {
          "description": "disallow function declarations that contain unsafe references inside loop statements",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-loop-func"
        },
        "schema": [],
        "messages": {
          "unsafeRefs": "Function declared in a loop contains unsafe references to variable(s) {{ varNames }}."
        }
      },
      "no-loss-of-precision": {
        "type": "problem",
        "docs": {
          "description": "disallow literal numbers that lose precision",
          "category": "Possible Errors",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-loss-of-precision"
        },
        "schema": [],
        "messages": {
          "noLossOfPrecision": "This number literal will lose precision at runtime."
        }
      },
      "no-magic-numbers": {
        "type": "suggestion",
        "docs": {
          "description": "disallow magic numbers",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-magic-numbers"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "detectObjects": {
                "type": "boolean",
                "default": false
              },
              "enforceConst": {
                "type": "boolean",
                "default": false
              },
              "ignore": {
                "type": "array",
                "items": {
                  "anyOf": [
                    { "type": "number" },
                    {
                      "type": "string",
                      "pattern": "^[+-]?(?:0|[1-9][0-9]*)n$"
                    }
                  ]
                },
                "uniqueItems": true
              },
              "ignoreArrayIndexes": {
                "type": "boolean",
                "default": false
              },
              "ignoreDefaultValues": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "useConst": "Number constants declarations must use 'const'.",
          "noMagic": "No magic number: {{raw}}."
        }
      },
      "no-misleading-character-class": {
        "type": "problem",
        "docs": {
          "description": "disallow characters which are made with multiple code points in character class syntax",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-misleading-character-class"
        },
        "schema": [],
        "messages": {
          "surrogatePairWithoutUFlag": "Unexpected surrogate pair in character class. Use 'u' flag.",
          "combiningClass": "Unexpected combined character in character class.",
          "emojiModifier": "Unexpected modified Emoji in character class.",
          "regionalIndicatorSymbol": "Unexpected national flag in character class.",
          "zwj": "Unexpected joined character sequence in character class."
        }
      },
      "no-mixed-operators": {
        "type": "suggestion",
        "docs": {
          "description": "disallow mixed binary operators",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-mixed-operators"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "groups": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "enum": [
                      "+",
                      "-",
                      "*",
                      "/",
                      "%",
                      "**",
                      "&",
                      "|",
                      "^",
                      "~",
                      "<<",
                      ">>",
                      ">>>",
                      "==",
                      "!=",
                      "===",
                      "!==",
                      ">",
                      ">=",
                      "<",
                      "<=",
                      "&&",
                      "||",
                      "in",
                      "instanceof",
                      "?:",
                      "??"
                    ]
                  },
                  "minItems": 2,
                  "uniqueItems": true
                },
                "uniqueItems": true
              },
              "allowSamePrecedence": {
                "type": "boolean",
                "default": true
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "unexpectedMixedOperator": "Unexpected mix of '{{leftOperator}}' and '{{rightOperator}}'."
        }
      },
      "no-mixed-requires": {
        "deprecated": true,
        "replacedBy": [],
        "type": "suggestion",
        "docs": {
          "description": "disallow `require` calls to be mixed with regular variable declarations",
          "category": "Node.js and CommonJS",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-mixed-requires"
        },
        "schema": [
          {
            "oneOf": [
              { "type": "boolean" },
              {
                "type": "object",
                "properties": {
                  "grouping": { "type": "boolean" },
                  "allowCall": { "type": "boolean" }
                },
                "additionalProperties": false
              }
            ]
          }
        ],
        "messages": {
          "noMixRequire": "Do not mix 'require' and other declarations.",
          "noMixCoreModuleFileComputed": "Do not mix core, module, file and computed requires."
        }
      },
      "no-mixed-spaces-and-tabs": {
        "type": "layout",
        "docs": {
          "description": "disallow mixed spaces and tabs for indentation",
          "category": "Stylistic Issues",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-mixed-spaces-and-tabs"
        },
        "schema": [{ "enum": ["smart-tabs", true, false] }],
        "messages": { "mixedSpacesAndTabs": "Mixed spaces and tabs." }
      },
      "no-multi-assign": {
        "type": "suggestion",
        "docs": {
          "description": "disallow use of chained assignment expressions",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-multi-assign"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "ignoreNonDeclaration": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "unexpectedChain": "Unexpected chained assignment."
        }
      },
      "no-multi-spaces": {
        "type": "layout",
        "docs": {
          "description": "disallow multiple spaces",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-multi-spaces"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "type": "object",
            "properties": {
              "exceptions": {
                "type": "object",
                "patternProperties": {
                  "^([A-Z][a-z]*)+$": { "type": "boolean" }
                },
                "additionalProperties": false
              },
              "ignoreEOLComments": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "multipleSpaces": "Multiple spaces found before '{{displayValue}}'."
        }
      },
      "no-multi-str": {
        "type": "suggestion",
        "docs": {
          "description": "disallow multiline strings",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-multi-str"
        },
        "schema": [],
        "messages": {
          "multilineString": "Multiline support is limited to browsers supporting ES5 only."
        }
      },
      "no-multiple-empty-lines": {
        "type": "layout",
        "docs": {
          "description": "disallow multiple empty lines",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-multiple-empty-lines"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "type": "object",
            "properties": {
              "max": { "type": "integer", "minimum": 0 },
              "maxEOF": { "type": "integer", "minimum": 0 },
              "maxBOF": { "type": "integer", "minimum": 0 }
            },
            "required": ["max"],
            "additionalProperties": false
          }
        ],
        "messages": {
          "blankBeginningOfFile": "Too many blank lines at the beginning of file. Max of {{max}} allowed.",
          "blankEndOfFile": "Too many blank lines at the end of file. Max of {{max}} allowed.",
          "consecutiveBlank": "More than {{max}} blank {{pluralizedLines}} not allowed."
        }
      },
      "no-native-reassign": {
        "type": "suggestion",
        "docs": {
          "description": "disallow assignments to native objects or read-only global variables",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-native-reassign"
        },
        "deprecated": true,
        "replacedBy": ["no-global-assign"],
        "schema": [
          {
            "type": "object",
            "properties": {
              "exceptions": {
                "type": "array",
                "items": { "type": "string" },
                "uniqueItems": true
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "nativeReassign": "Read-only global '{{name}}' should not be modified."
        }
      },
      "no-negated-condition": {
        "type": "suggestion",
        "docs": {
          "description": "disallow negated conditions",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-negated-condition"
        },
        "schema": [],
        "messages": {
          "unexpectedNegated": "Unexpected negated condition."
        }
      },
      "no-negated-in-lhs": {
        "type": "problem",
        "docs": {
          "description": "disallow negating the left operand in `in` expressions",
          "category": "Possible Errors",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-negated-in-lhs"
        },
        "replacedBy": ["no-unsafe-negation"],
        "deprecated": true,
        "schema": [],
        "messages": {
          "negatedLHS": "The 'in' expression's left operand is negated."
        }
      },
      "no-nested-ternary": {
        "type": "suggestion",
        "docs": {
          "description": "disallow nested ternary expressions",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-nested-ternary"
        },
        "schema": [],
        "messages": {
          "noNestedTernary": "Do not nest ternary expressions."
        }
      },
      "no-new": {
        "type": "suggestion",
        "docs": {
          "description": "disallow `new` operators outside of assignments or comparisons",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-new"
        },
        "schema": [],
        "messages": {
          "noNewStatement": "Do not use 'new' for side effects."
        }
      },
      "no-new-func": {
        "type": "suggestion",
        "docs": {
          "description": "disallow `new` operators with the `Function` object",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-new-func"
        },
        "schema": [],
        "messages": {
          "noFunctionConstructor": "The Function constructor is eval."
        }
      },
      "no-new-object": {
        "type": "suggestion",
        "docs": {
          "description": "disallow `Object` constructors",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-new-object"
        },
        "schema": [],
        "messages": {
          "preferLiteral": "The object literal notation {} is preferrable."
        }
      },
      "no-new-require": {
        "deprecated": true,
        "replacedBy": [],
        "type": "suggestion",
        "docs": {
          "description": "disallow `new` operators with calls to `require`",
          "category": "Node.js and CommonJS",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-new-require"
        },
        "schema": [],
        "messages": {
          "noNewRequire": "Unexpected use of new with require."
        }
      },
      "no-new-symbol": {
        "type": "problem",
        "docs": {
          "description": "disallow `new` operators with the `Symbol` object",
          "category": "ECMAScript 6",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-new-symbol"
        },
        "schema": [],
        "messages": {
          "noNewSymbol": "`Symbol` cannot be called as a constructor."
        }
      },
      "no-new-wrappers": {
        "type": "suggestion",
        "docs": {
          "description": "disallow `new` operators with the `String`, `Number`, and `Boolean` objects",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-new-wrappers"
        },
        "schema": [],
        "messages": {
          "noConstructor": "Do not use {{fn}} as a constructor."
        }
      },
      "no-nonoctal-decimal-escape": {
        "type": "suggestion",
        "docs": {
          "description": "disallow `\\8` and `\\9` escape sequences in string literals",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-nonoctal-decimal-escape",
          "suggestion": true
        },
        "schema": [],
        "messages": {
          "decimalEscape": "Don't use '{{decimalEscape}}' escape sequence.",
          "refactor": "Replace '{{original}}' with '{{replacement}}'. This maintains the current functionality.",
          "escapeBackslash": "Replace '{{original}}' with '{{replacement}}' to include the actual backslash character."
        }
      },
      "no-obj-calls": {
        "type": "problem",
        "docs": {
          "description": "disallow calling global object properties as functions",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-obj-calls"
        },
        "schema": [],
        "messages": {
          "unexpectedCall": "'{{name}}' is not a function.",
          "unexpectedRefCall": "'{{name}}' is reference to '{{ref}}', which is not a function."
        }
      },
      "no-octal": {
        "type": "suggestion",
        "docs": {
          "description": "disallow octal literals",
          "category": "Best Practices",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-octal"
        },
        "schema": [],
        "messages": { "noOcatal": "Octal literals should not be used." }
      },
      "no-octal-escape": {
        "type": "suggestion",
        "docs": {
          "description": "disallow octal escape sequences in string literals",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-octal-escape"
        },
        "schema": [],
        "messages": {
          "octalEscapeSequence": "Don't use octal: '\\{{sequence}}'. Use '\\u....' instead."
        }
      },
      "no-param-reassign": {
        "type": "suggestion",
        "docs": {
          "description": "disallow reassigning `function` parameters",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-param-reassign"
        },
        "schema": [
          {
            "oneOf": [
              {
                "type": "object",
                "properties": { "props": { "enum": [false] } },
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "props": { "enum": [true] },
                  "ignorePropertyModificationsFor": {
                    "type": "array",
                    "items": { "type": "string" },
                    "uniqueItems": true
                  },
                  "ignorePropertyModificationsForRegex": {
                    "type": "array",
                    "items": { "type": "string" },
                    "uniqueItems": true
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ],
        "messages": {
          "assignmentToFunctionParam": "Assignment to function parameter '{{name}}'.",
          "assignmentToFunctionParamProp": "Assignment to property of function parameter '{{name}}'."
        }
      },
      "no-path-concat": {
        "deprecated": true,
        "replacedBy": [],
        "type": "suggestion",
        "docs": {
          "description": "disallow string concatenation with `__dirname` and `__filename`",
          "category": "Node.js and CommonJS",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-path-concat"
        },
        "schema": [],
        "messages": {
          "usePathFunctions": "Use path.join() or path.resolve() instead of + to create paths."
        }
      },
      "no-plusplus": {
        "type": "suggestion",
        "docs": {
          "description": "disallow the unary operators `++` and `--`",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-plusplus"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowForLoopAfterthoughts": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "unexpectedUnaryOp": "Unary operator '{{operator}}' used."
        }
      },
      "no-process-env": {
        "deprecated": true,
        "replacedBy": [],
        "type": "suggestion",
        "docs": {
          "description": "disallow the use of `process.env`",
          "category": "Node.js and CommonJS",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-process-env"
        },
        "schema": [],
        "messages": {
          "unexpectedProcessEnv": "Unexpected use of process.env."
        }
      },
      "no-process-exit": {
        "deprecated": true,
        "replacedBy": [],
        "type": "suggestion",
        "docs": {
          "description": "disallow the use of `process.exit()`",
          "category": "Node.js and CommonJS",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-process-exit"
        },
        "schema": [],
        "messages": {
          "noProcessExit": "Don't use process.exit(); throw an error instead."
        }
      },
      "no-promise-executor-return": {
        "type": "problem",
        "docs": {
          "description": "disallow returning values from Promise executor functions",
          "category": "Possible Errors",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-promise-executor-return"
        },
        "schema": [],
        "messages": {
          "returnsValue": "Return values from promise executor functions cannot be read."
        }
      },
      "no-proto": {
        "type": "suggestion",
        "docs": {
          "description": "disallow the use of the `__proto__` property",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-proto"
        },
        "schema": [],
        "messages": {
          "unexpectedProto": "The '__proto__' property is deprecated."
        }
      },
      "no-prototype-builtins": {
        "type": "problem",
        "docs": {
          "description": "disallow calling some `Object.prototype` methods directly on objects",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-prototype-builtins"
        },
        "schema": [],
        "messages": {
          "prototypeBuildIn": "Do not access Object.prototype method '{{prop}}' from target object."
        }
      },
      "no-redeclare": {
        "type": "suggestion",
        "docs": {
          "description": "disallow variable redeclaration",
          "category": "Best Practices",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-redeclare"
        },
        "messages": {
          "redeclared": "'{{id}}' is already defined.",
          "redeclaredAsBuiltin": "'{{id}}' is already defined as a built-in global variable.",
          "redeclaredBySyntax": "'{{id}}' is already defined by a variable declaration."
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "builtinGlobals": {
                "type": "boolean",
                "default": true
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "no-regex-spaces": {
        "type": "suggestion",
        "docs": {
          "description": "disallow multiple spaces in regular expressions",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-regex-spaces"
        },
        "schema": [],
        "fixable": "code",
        "messages": {
          "multipleSpaces": "Spaces are hard to count. Use {{{length}}}."
        }
      },
      "no-restricted-exports": {
        "type": "suggestion",
        "docs": {
          "description": "disallow specified names in exports",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-restricted-exports"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "restrictedNamedExports": {
                "type": "array",
                "items": { "type": "string" },
                "uniqueItems": true
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "restrictedNamed": "'{{name}}' is restricted from being used as an exported name."
        }
      },
      "no-restricted-globals": {
        "type": "suggestion",
        "docs": {
          "description": "disallow specified global variables",
          "category": "Variables",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-restricted-globals"
        },
        "schema": {
          "type": "array",
          "items": {
            "oneOf": [
              { "type": "string" },
              {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "message": { "type": "string" }
                },
                "required": ["name"],
                "additionalProperties": false
              }
            ]
          },
          "uniqueItems": true,
          "minItems": 0
        },
        "messages": {
          "defaultMessage": "Unexpected use of '{{name}}'.",
          "customMessage": "Unexpected use of '{{name}}'. {{customMessage}}"
        }
      },
      "no-restricted-imports": {
        "type": "suggestion",
        "docs": {
          "description": "disallow specified modules when loaded by `import`",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-restricted-imports"
        },
        "messages": {
          "path": "'{{importSource}}' import is restricted from being used.",
          "pathWithCustomMessage": "'{{importSource}}' import is restricted from being used. {{customMessage}}",
          "patterns": "'{{importSource}}' import is restricted from being used by a pattern.",
          "everything": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted.",
          "everythingWithCustomMessage": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted. {{customMessage}}",
          "importName": "'{{importName}}' import from '{{importSource}}' is restricted.",
          "importNameWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted. {{customMessage}}"
        },
        "schema": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "anyOf": [
                  { "type": "string" },
                  {
                    "type": "object",
                    "properties": {
                      "name": { "type": "string" },
                      "message": {
                        "type": "string",
                        "minLength": 1
                      },
                      "importNames": {
                        "type": "array",
                        "items": { "type": "string" }
                      }
                    },
                    "additionalProperties": false,
                    "required": ["name"]
                  }
                ]
              },
              "uniqueItems": true
            },
            {
              "type": "array",
              "items": [
                {
                  "type": "object",
                  "properties": {
                    "paths": {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          { "type": "string" },
                          {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "message": {
                                "type": "string",
                                "minLength": 1
                              },
                              "importNames": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            },
                            "additionalProperties": false,
                            "required": ["name"]
                          }
                        ]
                      },
                      "uniqueItems": true
                    },
                    "patterns": {
                      "type": "array",
                      "items": { "type": "string" },
                      "uniqueItems": true
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "additionalItems": false
            }
          ]
        }
      },
      "no-restricted-modules": {
        "deprecated": true,
        "replacedBy": [],
        "type": "suggestion",
        "docs": {
          "description": "disallow specified modules when loaded by `require`",
          "category": "Node.js and CommonJS",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-restricted-modules"
        },
        "schema": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "anyOf": [
                  { "type": "string" },
                  {
                    "type": "object",
                    "properties": {
                      "name": { "type": "string" },
                      "message": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "additionalProperties": false,
                    "required": ["name"]
                  }
                ]
              },
              "uniqueItems": true
            },
            {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "paths": {
                    "type": "array",
                    "items": {
                      "anyOf": [
                        { "type": "string" },
                        {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "message": {
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "additionalProperties": false,
                          "required": ["name"]
                        }
                      ]
                    },
                    "uniqueItems": true
                  },
                  "patterns": {
                    "type": "array",
                    "items": { "type": "string" },
                    "uniqueItems": true
                  }
                },
                "additionalProperties": false
              },
              "additionalItems": false
            }
          ]
        },
        "messages": {
          "defaultMessage": "'{{name}}' module is restricted from being used.",
          "customMessage": "'{{name}}' module is restricted from being used. {{customMessage}}",
          "patternMessage": "'{{name}}' module is restricted from being used by a pattern."
        }
      },
      "no-restricted-properties": {
        "type": "suggestion",
        "docs": {
          "description": "disallow certain properties on certain objects",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-restricted-properties"
        },
        "schema": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "object": { "type": "string" },
                  "property": { "type": "string" },
                  "message": { "type": "string" }
                },
                "additionalProperties": false,
                "required": ["object"]
              },
              {
                "type": "object",
                "properties": {
                  "object": { "type": "string" },
                  "property": { "type": "string" },
                  "message": { "type": "string" }
                },
                "additionalProperties": false,
                "required": ["property"]
              }
            ]
          },
          "uniqueItems": true
        },
        "messages": {
          "restrictedObjectProperty": "'{{objectName}}.{{propertyName}}' is restricted from being used.{{message}}",
          "restrictedProperty": "'{{propertyName}}' is restricted from being used.{{message}}"
        }
      },
      "no-restricted-syntax": {
        "type": "suggestion",
        "docs": {
          "description": "disallow specified syntax",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-restricted-syntax"
        },
        "schema": {
          "type": "array",
          "items": {
            "oneOf": [
              { "type": "string" },
              {
                "type": "object",
                "properties": {
                  "selector": { "type": "string" },
                  "message": { "type": "string" }
                },
                "required": ["selector"],
                "additionalProperties": false
              }
            ]
          },
          "uniqueItems": true,
          "minItems": 0
        },
        "messages": { "restrictedSyntax": "{{message}}" }
      },
      "no-return-assign": {
        "type": "suggestion",
        "docs": {
          "description": "disallow assignment operators in `return` statements",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-return-assign"
        },
        "schema": [{ "enum": ["except-parens", "always"] }],
        "messages": {
          "returnAssignment": "Return statement should not contain assignment.",
          "arrowAssignment": "Arrow function should not return assignment."
        }
      },
      "no-return-await": {
        "type": "suggestion",
        "docs": {
          "description": "disallow unnecessary `return await`",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-return-await"
        },
        "fixable": null,
        "schema": [],
        "messages": {
          "redundantUseOfAwait": "Redundant use of `await` on a return value."
        }
      },
      "no-script-url": {
        "type": "suggestion",
        "docs": {
          "description": "disallow `javascript:` urls",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-script-url"
        },
        "schema": [],
        "messages": {
          "unexpectedScriptURL": "Script URL is a form of eval."
        }
      },
      "no-self-assign": {
        "type": "problem",
        "docs": {
          "description": "disallow assignments where both sides are exactly the same",
          "category": "Best Practices",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-self-assign"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "props": { "type": "boolean", "default": true }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "selfAssignment": "'{{name}}' is assigned to itself."
        }
      },
      "no-self-compare": {
        "type": "problem",
        "docs": {
          "description": "disallow comparisons where both sides are exactly the same",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-self-compare"
        },
        "schema": [],
        "messages": {
          "comparingToSelf": "Comparing to itself is potentially pointless."
        }
      },
      "no-sequences": {
        "type": "suggestion",
        "docs": {
          "description": "disallow comma operators",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-sequences"
        },
        "schema": [
          {
            "properties": {
              "allowInParentheses": {
                "type": "boolean",
                "default": true
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "unexpectedCommaExpression": "Unexpected use of comma operator."
        }
      },
      "no-setter-return": {
        "type": "problem",
        "docs": {
          "description": "disallow returning values from setters",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-setter-return"
        },
        "schema": [],
        "messages": { "returnsValue": "Setter cannot return a value." }
      },
      "no-shadow": {
        "type": "suggestion",
        "docs": {
          "description": "disallow variable declarations from shadowing variables declared in the outer scope",
          "category": "Variables",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-shadow"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "builtinGlobals": {
                "type": "boolean",
                "default": false
              },
              "hoist": {
                "enum": ["all", "functions", "never"],
                "default": "functions"
              },
              "allow": {
                "type": "array",
                "items": { "type": "string" }
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "noShadow": "'{{name}}' is already declared in the upper scope on line {{shadowedLine}} column {{shadowedColumn}}.",
          "noShadowGlobal": "'{{name}}' is already a global variable."
        }
      },
      "no-shadow-restricted-names": {
        "type": "suggestion",
        "docs": {
          "description": "disallow identifiers from shadowing restricted names",
          "category": "Variables",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-shadow-restricted-names"
        },
        "schema": [],
        "messages": {
          "shadowingRestrictedName": "Shadowing of global property '{{name}}'."
        }
      },
      "no-spaced-func": {
        "type": "layout",
        "docs": {
          "description": "disallow spacing between function identifiers and their applications (deprecated)",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-spaced-func"
        },
        "deprecated": true,
        "replacedBy": ["func-call-spacing"],
        "fixable": "whitespace",
        "schema": [],
        "messages": {
          "noSpacedFunction": "Unexpected space between function name and paren."
        }
      },
      "no-sparse-arrays": {
        "type": "problem",
        "docs": {
          "description": "disallow sparse arrays",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-sparse-arrays"
        },
        "schema": [],
        "messages": {
          "unexpectedSparseArray": "Unexpected comma in middle of array."
        }
      },
      "no-sync": {
        "deprecated": true,
        "replacedBy": [],
        "type": "suggestion",
        "docs": {
          "description": "disallow synchronous methods",
          "category": "Node.js and CommonJS",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-sync"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowAtRootLevel": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "noSync": "Unexpected sync method: '{{propertyName}}'."
        }
      },
      "no-tabs": {
        "type": "layout",
        "docs": {
          "description": "disallow all tabs",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-tabs"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowIndentationTabs": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": { "unexpectedTab": "Unexpected tab character." }
      },
      "no-template-curly-in-string": {
        "type": "problem",
        "docs": {
          "description": "disallow template literal placeholder syntax in regular strings",
          "category": "Possible Errors",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-template-curly-in-string"
        },
        "schema": [],
        "messages": {
          "unexpectedTemplateExpression": "Unexpected template string expression."
        }
      },
      "no-ternary": {
        "type": "suggestion",
        "docs": {
          "description": "disallow ternary operators",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-ternary"
        },
        "schema": [],
        "messages": { "noTernaryOperator": "Ternary operator used." }
      },
      "no-this-before-super": {
        "type": "problem",
        "docs": {
          "description": "disallow `this`/`super` before calling `super()` in constructors",
          "category": "ECMAScript 6",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-this-before-super"
        },
        "schema": [],
        "messages": {
          "noBeforeSuper": "'{{kind}}' is not allowed before 'super()'."
        }
      },
      "no-throw-literal": {
        "type": "suggestion",
        "docs": {
          "description": "disallow throwing literals as exceptions",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-throw-literal"
        },
        "schema": [],
        "messages": {
          "object": "Expected an error object to be thrown.",
          "undef": "Do not throw undefined."
        }
      },
      "no-trailing-spaces": {
        "type": "layout",
        "docs": {
          "description": "disallow trailing whitespace at the end of lines",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-trailing-spaces"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "type": "object",
            "properties": {
              "skipBlankLines": {
                "type": "boolean",
                "default": false
              },
              "ignoreComments": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": { "trailingSpace": "Trailing spaces not allowed." }
      },
      "no-undef": {
        "type": "problem",
        "docs": {
          "description": "disallow the use of undeclared variables unless mentioned in `/*global */` comments",
          "category": "Variables",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-undef"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "typeof": { "type": "boolean", "default": false }
            },
            "additionalProperties": false
          }
        ],
        "messages": { "undef": "'{{name}}' is not defined." }
      },
      "no-undef-init": {
        "type": "suggestion",
        "docs": {
          "description": "disallow initializing variables to `undefined`",
          "category": "Variables",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-undef-init"
        },
        "schema": [],
        "fixable": "code",
        "messages": {
          "unnecessaryUndefinedInit": "It's not necessary to initialize '{{name}}' to undefined."
        }
      },
      "no-undefined": {
        "type": "suggestion",
        "docs": {
          "description": "disallow the use of `undefined` as an identifier",
          "category": "Variables",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-undefined"
        },
        "schema": [],
        "messages": {
          "unexpectedUndefined": "Unexpected use of undefined."
        }
      },
      "no-underscore-dangle": {
        "type": "suggestion",
        "docs": {
          "description": "disallow dangling underscores in identifiers",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-underscore-dangle"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allow": {
                "type": "array",
                "items": { "type": "string" }
              },
              "allowAfterThis": {
                "type": "boolean",
                "default": false
              },
              "allowAfterSuper": {
                "type": "boolean",
                "default": false
              },
              "allowAfterThisConstructor": {
                "type": "boolean",
                "default": false
              },
              "enforceInMethodNames": {
                "type": "boolean",
                "default": false
              },
              "allowFunctionParams": {
                "type": "boolean",
                "default": true
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "unexpectedUnderscore": "Unexpected dangling '_' in '{{identifier}}'."
        }
      },
      "no-unexpected-multiline": {
        "type": "problem",
        "docs": {
          "description": "disallow confusing multiline expressions",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-unexpected-multiline"
        },
        "schema": [],
        "messages": {
          "function": "Unexpected newline between function and ( of function call.",
          "property": "Unexpected newline between object and [ of property access.",
          "taggedTemplate": "Unexpected newline between template tag and template literal.",
          "division": "Unexpected newline between numerator and division operator."
        }
      },
      "no-unmodified-loop-condition": {
        "type": "problem",
        "docs": {
          "description": "disallow unmodified loop conditions",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-unmodified-loop-condition"
        },
        "schema": [],
        "messages": {
          "loopConditionNotModified": "'{{name}}' is not modified in this loop."
        }
      },
      "no-unneeded-ternary": {
        "type": "suggestion",
        "docs": {
          "description": "disallow ternary operators when simpler alternatives exist",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-unneeded-ternary"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "defaultAssignment": {
                "type": "boolean",
                "default": true
              }
            },
            "additionalProperties": false
          }
        ],
        "fixable": "code",
        "messages": {
          "unnecessaryConditionalExpression": "Unnecessary use of boolean literals in conditional expression.",
          "unnecessaryConditionalAssignment": "Unnecessary use of conditional expression for default assignment."
        }
      },
      "no-unreachable": {
        "type": "problem",
        "docs": {
          "description": "disallow unreachable code after `return`, `throw`, `continue`, and `break` statements",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-unreachable"
        },
        "schema": [],
        "messages": { "unreachableCode": "Unreachable code." }
      },
      "no-unreachable-loop": {
        "type": "problem",
        "docs": {
          "description": "disallow loops with a body that allows only one iteration",
          "category": "Possible Errors",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-unreachable-loop"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "ignore": {
                "type": "array",
                "items": {
                  "enum": [
                    "WhileStatement",
                    "DoWhileStatement",
                    "ForStatement",
                    "ForInStatement",
                    "ForOfStatement"
                  ]
                },
                "uniqueItems": true
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "invalid": "Invalid loop. Its body allows only one iteration."
        }
      },
      "no-unsafe-finally": {
        "type": "problem",
        "docs": {
          "description": "disallow control flow statements in `finally` blocks",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-unsafe-finally"
        },
        "schema": [],
        "messages": { "unsafeUsage": "Unsafe usage of {{nodeType}}." }
      },
      "no-unsafe-negation": {
        "type": "problem",
        "docs": {
          "description": "disallow negating the left operand of relational operators",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-unsafe-negation",
          "suggestion": true
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "enforceForOrderingRelations": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "fixable": null,
        "messages": {
          "unexpected": "Unexpected negating the left operand of '{{operator}}' operator.",
          "suggestNegatedExpression": "Negate '{{operator}}' expression instead of its left operand. This changes the current behavior.",
          "suggestParenthesisedNegation": "Wrap negation in '()' to make the intention explicit. This preserves the current behavior."
        }
      },
      "no-unsafe-optional-chaining": {
        "type": "problem",
        "docs": {
          "description": "disallow use of optional chaining in contexts where the `undefined` value is not allowed",
          "category": "Possible Errors",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-unsafe-optional-chaining"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "disallowArithmeticOperators": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "fixable": null,
        "messages": {
          "unsafeOptionalChain": "Unsafe usage of optional chaining. If it short-circuits with 'undefined' the evaluation will throw TypeError.",
          "unsafeArithmetic": "Unsafe arithmetic operation on optional chaining. It can result in NaN."
        }
      },
      "no-unused-expressions": {
        "type": "suggestion",
        "docs": {
          "description": "disallow unused expressions",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-unused-expressions"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowShortCircuit": {
                "type": "boolean",
                "default": false
              },
              "allowTernary": {
                "type": "boolean",
                "default": false
              },
              "allowTaggedTemplates": {
                "type": "boolean",
                "default": false
              },
              "enforceForJSX": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "unusedExpression": "Expected an assignment or function call and instead saw an expression."
        }
      },
      "no-unused-labels": {
        "type": "suggestion",
        "docs": {
          "description": "disallow unused labels",
          "category": "Best Practices",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-unused-labels"
        },
        "schema": [],
        "fixable": "code",
        "messages": {
          "unused": "'{{name}}:' is defined but never used."
        }
      },
      "no-unused-vars": {
        "type": "problem",
        "docs": {
          "description": "disallow unused variables",
          "category": "Variables",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-unused-vars"
        },
        "schema": [
          {
            "oneOf": [
              { "enum": ["all", "local"] },
              {
                "type": "object",
                "properties": {
                  "vars": { "enum": ["all", "local"] },
                  "varsIgnorePattern": { "type": "string" },
                  "args": {
                    "enum": ["all", "after-used", "none"]
                  },
                  "ignoreRestSiblings": { "type": "boolean" },
                  "argsIgnorePattern": { "type": "string" },
                  "caughtErrors": { "enum": ["all", "none"] },
                  "caughtErrorsIgnorePattern": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ],
        "messages": {
          "unusedVar": "'{{varName}}' is {{action}} but never used{{additional}}."
        }
      },
      "no-use-before-define": {
        "type": "problem",
        "docs": {
          "description": "disallow the use of variables before they are defined",
          "category": "Variables",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-use-before-define"
        },
        "schema": [
          {
            "oneOf": [
              { "enum": ["nofunc"] },
              {
                "type": "object",
                "properties": {
                  "functions": { "type": "boolean" },
                  "classes": { "type": "boolean" },
                  "variables": { "type": "boolean" }
                },
                "additionalProperties": false
              }
            ]
          }
        ],
        "messages": {
          "usedBeforeDefined": "'{{name}}' was used before it was defined."
        }
      },
      "no-useless-backreference": {
        "type": "problem",
        "docs": {
          "description": "disallow useless backreferences in regular expressions",
          "category": "Possible Errors",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-useless-backreference"
        },
        "schema": [],
        "messages": {
          "nested": "Backreference '{{ bref }}' will be ignored. It references group '{{ group }}' from within that group.",
          "forward": "Backreference '{{ bref }}' will be ignored. It references group '{{ group }}' which appears later in the pattern.",
          "backward": "Backreference '{{ bref }}' will be ignored. It references group '{{ group }}' which appears before in the same lookbehind.",
          "disjunctive": "Backreference '{{ bref }}' will be ignored. It references group '{{ group }}' which is in another alternative.",
          "intoNegativeLookaround": "Backreference '{{ bref }}' will be ignored. It references group '{{ group }}' which is in a negative lookaround."
        }
      },
      "no-useless-call": {
        "type": "suggestion",
        "docs": {
          "description": "disallow unnecessary calls to `.call()` and `.apply()`",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-useless-call"
        },
        "schema": [],
        "messages": { "unnecessaryCall": "Unnecessary '.{{name}}()'." }
      },
      "no-useless-catch": {
        "type": "suggestion",
        "docs": {
          "description": "disallow unnecessary `catch` clauses",
          "category": "Best Practices",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-useless-catch"
        },
        "schema": [],
        "messages": {
          "unnecessaryCatchClause": "Unnecessary catch clause.",
          "unnecessaryCatch": "Unnecessary try/catch wrapper."
        }
      },
      "no-useless-computed-key": {
        "type": "suggestion",
        "docs": {
          "description": "disallow unnecessary computed property keys in objects and classes",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-useless-computed-key"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "enforceForClassMembers": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "fixable": "code",
        "messages": {
          "unnecessarilyComputedProperty": "Unnecessarily computed property [{{property}}] found."
        }
      },
      "no-useless-concat": {
        "type": "suggestion",
        "docs": {
          "description": "disallow unnecessary concatenation of literals or template literals",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-useless-concat"
        },
        "schema": [],
        "messages": {
          "unexpectedConcat": "Unexpected string concatenation of literals."
        }
      },
      "no-useless-constructor": {
        "type": "suggestion",
        "docs": {
          "description": "disallow unnecessary constructors",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-useless-constructor"
        },
        "schema": [],
        "messages": { "noUselessConstructor": "Useless constructor." }
      },
      "no-useless-escape": {
        "type": "suggestion",
        "docs": {
          "description": "disallow unnecessary escape characters",
          "category": "Best Practices",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-useless-escape",
          "suggestion": true
        },
        "messages": {
          "unnecessaryEscape": "Unnecessary escape character: \\{{character}}.",
          "removeEscape": "Remove the `\\`. This maintains the current functionality.",
          "escapeBackslash": "Replace the `\\` with `\\\\` to include the actual backslash character."
        },
        "schema": []
      },
      "no-useless-rename": {
        "type": "suggestion",
        "docs": {
          "description": "disallow renaming import, export, and destructured assignments to the same name",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-useless-rename"
        },
        "fixable": "code",
        "schema": [
          {
            "type": "object",
            "properties": {
              "ignoreDestructuring": {
                "type": "boolean",
                "default": false
              },
              "ignoreImport": {
                "type": "boolean",
                "default": false
              },
              "ignoreExport": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "unnecessarilyRenamed": "{{type}} {{name}} unnecessarily renamed."
        }
      },
      "no-useless-return": {
        "type": "suggestion",
        "docs": {
          "description": "disallow redundant return statements",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-useless-return"
        },
        "fixable": "code",
        "schema": [],
        "messages": {
          "unnecessaryReturn": "Unnecessary return statement."
        }
      },
      "no-var": {
        "type": "suggestion",
        "docs": {
          "description": "require `let` or `const` instead of `var`",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-var"
        },
        "schema": [],
        "fixable": "code",
        "messages": {
          "unexpectedVar": "Unexpected var, use let or const instead."
        }
      },
      "no-void": {
        "type": "suggestion",
        "docs": {
          "description": "disallow `void` operators",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-void"
        },
        "messages": {
          "noVoid": "Expected 'undefined' and instead saw 'void'."
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowAsStatement": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "no-warning-comments": {
        "type": "suggestion",
        "docs": {
          "description": "disallow specified warning terms in comments",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-warning-comments"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "terms": {
                "type": "array",
                "items": { "type": "string" }
              },
              "location": { "enum": ["start", "anywhere"] }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "unexpectedComment": "Unexpected '{{matchedTerm}}' comment: '{{comment}}'."
        }
      },
      "no-whitespace-before-property": {
        "type": "layout",
        "docs": {
          "description": "disallow whitespace before properties",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/no-whitespace-before-property"
        },
        "fixable": "whitespace",
        "schema": [],
        "messages": {
          "unexpectedWhitespace": "Unexpected whitespace before property {{propName}}."
        }
      },
      "no-with": {
        "type": "suggestion",
        "docs": {
          "description": "disallow `with` statements",
          "category": "Best Practices",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/no-with"
        },
        "schema": [],
        "messages": {
          "unexpectedWith": "Unexpected use of 'with' statement."
        }
      },
      "nonblock-statement-body-position": {
        "type": "layout",
        "docs": {
          "description": "enforce the location of single-line statements",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/nonblock-statement-body-position"
        },
        "fixable": "whitespace",
        "schema": [
          { "enum": ["beside", "below", "any"] },
          {
            "properties": {
              "overrides": {
                "properties": {
                  "if": {
                    "enum": ["beside", "below", "any"]
                  },
                  "else": {
                    "enum": ["beside", "below", "any"]
                  },
                  "while": {
                    "enum": ["beside", "below", "any"]
                  },
                  "do": {
                    "enum": ["beside", "below", "any"]
                  },
                  "for": {
                    "enum": ["beside", "below", "any"]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "expectNoLinebreak": "Expected no linebreak before this statement.",
          "expectLinebreak": "Expected a linebreak before this statement."
        }
      },
      "object-curly-newline": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent line breaks after opening and before closing braces",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/object-curly-newline"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "oneOf": [
              {
                "oneOf": [
                  { "enum": ["always", "never"] },
                  {
                    "type": "object",
                    "properties": {
                      "multiline": { "type": "boolean" },
                      "minProperties": {
                        "type": "integer",
                        "minimum": 0
                      },
                      "consistent": { "type": "boolean" }
                    },
                    "additionalProperties": false,
                    "minProperties": 1
                  }
                ]
              },
              {
                "type": "object",
                "properties": {
                  "ObjectExpression": {
                    "oneOf": [
                      { "enum": ["always", "never"] },
                      {
                        "type": "object",
                        "properties": {
                          "multiline": {
                            "type": "boolean"
                          },
                          "minProperties": {
                            "type": "integer",
                            "minimum": 0
                          },
                          "consistent": {
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false,
                        "minProperties": 1
                      }
                    ]
                  },
                  "ObjectPattern": {
                    "oneOf": [
                      { "enum": ["always", "never"] },
                      {
                        "type": "object",
                        "properties": {
                          "multiline": {
                            "type": "boolean"
                          },
                          "minProperties": {
                            "type": "integer",
                            "minimum": 0
                          },
                          "consistent": {
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false,
                        "minProperties": 1
                      }
                    ]
                  },
                  "ImportDeclaration": {
                    "oneOf": [
                      { "enum": ["always", "never"] },
                      {
                        "type": "object",
                        "properties": {
                          "multiline": {
                            "type": "boolean"
                          },
                          "minProperties": {
                            "type": "integer",
                            "minimum": 0
                          },
                          "consistent": {
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false,
                        "minProperties": 1
                      }
                    ]
                  },
                  "ExportDeclaration": {
                    "oneOf": [
                      { "enum": ["always", "never"] },
                      {
                        "type": "object",
                        "properties": {
                          "multiline": {
                            "type": "boolean"
                          },
                          "minProperties": {
                            "type": "integer",
                            "minimum": 0
                          },
                          "consistent": {
                            "type": "boolean"
                          }
                        },
                        "additionalProperties": false,
                        "minProperties": 1
                      }
                    ]
                  }
                },
                "additionalProperties": false,
                "minProperties": 1
              }
            ]
          }
        ],
        "messages": {
          "unexpectedLinebreakBeforeClosingBrace": "Unexpected line break before this closing brace.",
          "unexpectedLinebreakAfterOpeningBrace": "Unexpected line break after this opening brace.",
          "expectedLinebreakBeforeClosingBrace": "Expected a line break before this closing brace.",
          "expectedLinebreakAfterOpeningBrace": "Expected a line break after this opening brace."
        }
      },
      "object-curly-spacing": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent spacing inside braces",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/object-curly-spacing"
        },
        "fixable": "whitespace",
        "schema": [
          { "enum": ["always", "never"] },
          {
            "type": "object",
            "properties": {
              "arraysInObjects": { "type": "boolean" },
              "objectsInObjects": { "type": "boolean" }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "requireSpaceBefore": "A space is required before '{{token}}'.",
          "requireSpaceAfter": "A space is required after '{{token}}'.",
          "unexpectedSpaceBefore": "There should be no space before '{{token}}'.",
          "unexpectedSpaceAfter": "There should be no space after '{{token}}'."
        }
      },
      "object-property-newline": {
        "type": "layout",
        "docs": {
          "description": "enforce placing object properties on separate lines",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/object-property-newline"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowAllPropertiesOnSameLine": {
                "type": "boolean",
                "default": false
              },
              "allowMultiplePropertiesPerLine": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "fixable": "whitespace",
        "messages": {
          "propertiesOnNewlineAll": "Object properties must go on a new line if they aren't all on the same line.",
          "propertiesOnNewline": "Object properties must go on a new line."
        }
      },
      "object-shorthand": {
        "type": "suggestion",
        "docs": {
          "description": "require or disallow method and property shorthand syntax for object literals",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/object-shorthand"
        },
        "fixable": "code",
        "schema": {
          "anyOf": [
            {
              "type": "array",
              "items": [
                {
                  "enum": [
                    "always",
                    "methods",
                    "properties",
                    "never",
                    "consistent",
                    "consistent-as-needed"
                  ]
                }
              ],
              "minItems": 0,
              "maxItems": 1
            },
            {
              "type": "array",
              "items": [
                { "enum": ["always", "methods", "properties"] },
                {
                  "type": "object",
                  "properties": {
                    "avoidQuotes": { "type": "boolean" }
                  },
                  "additionalProperties": false
                }
              ],
              "minItems": 0,
              "maxItems": 2
            },
            {
              "type": "array",
              "items": [
                { "enum": ["always", "methods"] },
                {
                  "type": "object",
                  "properties": {
                    "ignoreConstructors": {
                      "type": "boolean"
                    },
                    "avoidQuotes": { "type": "boolean" },
                    "avoidExplicitReturnArrows": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "minItems": 0,
              "maxItems": 2
            }
          ]
        },
        "messages": {
          "expectedAllPropertiesShorthanded": "Expected shorthand for all properties.",
          "expectedLiteralMethodLongform": "Expected longform method syntax for string literal keys.",
          "expectedPropertyShorthand": "Expected property shorthand.",
          "expectedPropertyLongform": "Expected longform property syntax.",
          "expectedMethodShorthand": "Expected method shorthand.",
          "expectedMethodLongform": "Expected longform method syntax.",
          "unexpectedMix": "Unexpected mix of shorthand and non-shorthand properties."
        }
      },
      "one-var": {
        "type": "suggestion",
        "docs": {
          "description": "enforce variables to be declared either together or separately in functions",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/one-var"
        },
        "fixable": "code",
        "schema": [
          {
            "oneOf": [
              { "enum": ["always", "never", "consecutive"] },
              {
                "type": "object",
                "properties": {
                  "separateRequires": { "type": "boolean" },
                  "var": {
                    "enum": ["always", "never", "consecutive"]
                  },
                  "let": {
                    "enum": ["always", "never", "consecutive"]
                  },
                  "const": {
                    "enum": ["always", "never", "consecutive"]
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "initialized": {
                    "enum": ["always", "never", "consecutive"]
                  },
                  "uninitialized": {
                    "enum": ["always", "never", "consecutive"]
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ],
        "messages": {
          "combineUninitialized": "Combine this with the previous '{{type}}' statement with uninitialized variables.",
          "combineInitialized": "Combine this with the previous '{{type}}' statement with initialized variables.",
          "splitUninitialized": "Split uninitialized '{{type}}' declarations into multiple statements.",
          "splitInitialized": "Split initialized '{{type}}' declarations into multiple statements.",
          "splitRequires": "Split requires to be separated into a single block.",
          "combine": "Combine this with the previous '{{type}}' statement.",
          "split": "Split '{{type}}' declarations into multiple statements."
        }
      },
      "one-var-declaration-per-line": {
        "type": "suggestion",
        "docs": {
          "description": "require or disallow newlines around variable declarations",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/one-var-declaration-per-line"
        },
        "schema": [{ "enum": ["always", "initializations"] }],
        "fixable": "whitespace",
        "messages": {
          "expectVarOnNewline": "Expected variable declaration to be on a new line."
        }
      },
      "operator-assignment": {
        "type": "suggestion",
        "docs": {
          "description": "require or disallow assignment operator shorthand where possible",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/operator-assignment"
        },
        "schema": [{ "enum": ["always", "never"] }],
        "fixable": "code",
        "messages": {
          "replaced": "Assignment can be replaced with operator assignment.",
          "unexpected": "Unexpected operator assignment shorthand."
        }
      },
      "operator-linebreak": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent linebreak style for operators",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/operator-linebreak"
        },
        "schema": [
          { "enum": ["after", "before", "none", null] },
          {
            "type": "object",
            "properties": {
              "overrides": {
                "type": "object",
                "additionalProperties": {
                  "enum": ["after", "before", "none", "ignore"]
                }
              }
            },
            "additionalProperties": false
          }
        ],
        "fixable": "code",
        "messages": {
          "operatorAtBeginning": "'{{operator}}' should be placed at the beginning of the line.",
          "operatorAtEnd": "'{{operator}}' should be placed at the end of the line.",
          "badLinebreak": "Bad line breaking before and after '{{operator}}'.",
          "noLinebreak": "There should be no line break before or after '{{operator}}'."
        }
      },
      "padded-blocks": {
        "type": "layout",
        "docs": {
          "description": "require or disallow padding within blocks",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/padded-blocks"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "oneOf": [
              { "enum": ["always", "never"] },
              {
                "type": "object",
                "properties": {
                  "blocks": { "enum": ["always", "never"] },
                  "switches": { "enum": ["always", "never"] },
                  "classes": { "enum": ["always", "never"] }
                },
                "additionalProperties": false,
                "minProperties": 1
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "allowSingleLineBlocks": { "type": "boolean" }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "alwaysPadBlock": "Block must be padded by blank lines.",
          "neverPadBlock": "Block must not be padded by blank lines."
        }
      },
      "padding-line-between-statements": {
        "type": "layout",
        "docs": {
          "description": "require or disallow padding lines between statements",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/padding-line-between-statements"
        },
        "fixable": "whitespace",
        "schema": {
          "definitions": {
            "paddingType": { "enum": ["any", "never", "always"] },
            "statementType": {
              "anyOf": [
                {
                  "enum": [
                    "*",
                    "block-like",
                    "cjs-export",
                    "cjs-import",
                    "directive",
                    "expression",
                    "iife",
                    "multiline-block-like",
                    "multiline-expression",
                    "multiline-const",
                    "multiline-let",
                    "multiline-var",
                    "singleline-const",
                    "singleline-let",
                    "singleline-var",
                    "block",
                    "empty",
                    "function",
                    "break",
                    "case",
                    "class",
                    "const",
                    "continue",
                    "debugger",
                    "default",
                    "do",
                    "export",
                    "for",
                    "if",
                    "import",
                    "let",
                    "return",
                    "switch",
                    "throw",
                    "try",
                    "var",
                    "while",
                    "with"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "enum": [
                      "*",
                      "block-like",
                      "cjs-export",
                      "cjs-import",
                      "directive",
                      "expression",
                      "iife",
                      "multiline-block-like",
                      "multiline-expression",
                      "multiline-const",
                      "multiline-let",
                      "multiline-var",
                      "singleline-const",
                      "singleline-let",
                      "singleline-var",
                      "block",
                      "empty",
                      "function",
                      "break",
                      "case",
                      "class",
                      "const",
                      "continue",
                      "debugger",
                      "default",
                      "do",
                      "export",
                      "for",
                      "if",
                      "import",
                      "let",
                      "return",
                      "switch",
                      "throw",
                      "try",
                      "var",
                      "while",
                      "with"
                    ]
                  },
                  "minItems": 1,
                  "uniqueItems": true,
                  "additionalItems": false
                }
              ]
            }
          },
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "blankLine": {
                "$ref": "#/definitions/paddingType"
              },
              "prev": { "$ref": "#/definitions/statementType" },
              "next": { "$ref": "#/definitions/statementType" }
            },
            "additionalProperties": false,
            "required": ["blankLine", "prev", "next"]
          },
          "additionalItems": false
        },
        "messages": {
          "unexpectedBlankLine": "Unexpected blank line before this statement.",
          "expectedBlankLine": "Expected blank line before this statement."
        }
      },
      "prefer-arrow-callback": {
        "type": "suggestion",
        "docs": {
          "description": "require using arrow functions for callbacks",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/prefer-arrow-callback"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowNamedFunctions": {
                "type": "boolean",
                "default": false
              },
              "allowUnboundThis": {
                "type": "boolean",
                "default": true
              }
            },
            "additionalProperties": false
          }
        ],
        "fixable": "code",
        "messages": {
          "preferArrowCallback": "Unexpected function expression."
        }
      },
      "prefer-const": {
        "type": "suggestion",
        "docs": {
          "description": "require `const` declarations for variables that are never reassigned after declared",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/prefer-const"
        },
        "fixable": "code",
        "schema": [
          {
            "type": "object",
            "properties": {
              "destructuring": {
                "enum": ["any", "all"],
                "default": "any"
              },
              "ignoreReadBeforeAssign": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "useConst": "'{{name}}' is never reassigned. Use 'const' instead."
        }
      },
      "prefer-destructuring": {
        "type": "suggestion",
        "docs": {
          "description": "require destructuring from arrays and/or objects",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/prefer-destructuring"
        },
        "fixable": "code",
        "schema": [
          {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "VariableDeclarator": {
                    "type": "object",
                    "properties": {
                      "array": { "type": "boolean" },
                      "object": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  },
                  "AssignmentExpression": {
                    "type": "object",
                    "properties": {
                      "array": { "type": "boolean" },
                      "object": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              {
                "type": "object",
                "properties": {
                  "array": { "type": "boolean" },
                  "object": { "type": "boolean" }
                },
                "additionalProperties": false
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "enforceForRenamedProperties": { "type": "boolean" }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "preferDestructuring": "Use {{type}} destructuring."
        }
      },
      "prefer-exponentiation-operator": {
        "type": "suggestion",
        "docs": {
          "description": "disallow the use of `Math.pow` in favor of the `**` operator",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/prefer-exponentiation-operator"
        },
        "schema": [],
        "fixable": "code",
        "messages": {
          "useExponentiation": "Use the '**' operator instead of 'Math.pow'."
        }
      },
      "prefer-named-capture-group": {
        "type": "suggestion",
        "docs": {
          "description": "enforce using named capture group in regular expression",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/prefer-named-capture-group"
        },
        "schema": [],
        "messages": {
          "required": "Capture group '{{group}}' should be converted to a named or non-capturing group."
        }
      },
      "prefer-numeric-literals": {
        "type": "suggestion",
        "docs": {
          "description": "disallow `parseInt()` and `Number.parseInt()` in favor of binary, octal, and hexadecimal literals",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/prefer-numeric-literals"
        },
        "schema": [],
        "messages": {
          "useLiteral": "Use {{system}} literals instead of {{functionName}}()."
        },
        "fixable": "code"
      },
      "prefer-object-spread": {
        "type": "suggestion",
        "docs": {
          "description": "disallow using Object.assign with an object literal as the first argument and prefer the use of object spread instead.",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/prefer-object-spread"
        },
        "schema": [],
        "fixable": "code",
        "messages": {
          "useSpreadMessage": "Use an object spread instead of `Object.assign` eg: `{ ...foo }`.",
          "useLiteralMessage": "Use an object literal instead of `Object.assign`. eg: `{ foo: bar }`."
        }
      },
      "prefer-promise-reject-errors": {
        "type": "suggestion",
        "docs": {
          "description": "require using Error objects as Promise rejection reasons",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/prefer-promise-reject-errors"
        },
        "fixable": null,
        "schema": [
          {
            "type": "object",
            "properties": {
              "allowEmptyReject": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "rejectAnError": "Expected the Promise rejection reason to be an Error."
        }
      },
      "prefer-reflect": {
        "type": "suggestion",
        "docs": {
          "description": "require `Reflect` methods where applicable",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/prefer-reflect"
        },
        "deprecated": true,
        "replacedBy": [],
        "schema": [
          {
            "type": "object",
            "properties": {
              "exceptions": {
                "type": "array",
                "items": {
                  "enum": [
                    "apply",
                    "call",
                    "delete",
                    "defineProperty",
                    "getOwnPropertyDescriptor",
                    "getPrototypeOf",
                    "setPrototypeOf",
                    "isExtensible",
                    "getOwnPropertyNames",
                    "preventExtensions"
                  ]
                },
                "uniqueItems": true
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "preferReflect": "Avoid using {{existing}}, instead use {{substitute}}."
        }
      },
      "prefer-regex-literals": {
        "type": "suggestion",
        "docs": {
          "description": "disallow use of the `RegExp` constructor in favor of regular expression literals",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/prefer-regex-literals"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "disallowRedundantWrapping": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "unexpectedRegExp": "Use a regular expression literal instead of the 'RegExp' constructor.",
          "unexpectedRedundantRegExp": "Regular expression literal is unnecessarily wrapped within a 'RegExp' constructor.",
          "unexpectedRedundantRegExpWithFlags": "Use regular expression literal with flags instead of the 'RegExp' constructor."
        }
      },
      "prefer-rest-params": {
        "type": "suggestion",
        "docs": {
          "description": "require rest parameters instead of `arguments`",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/prefer-rest-params"
        },
        "schema": [],
        "messages": {
          "preferRestParams": "Use the rest parameters instead of 'arguments'."
        }
      },
      "prefer-spread": {
        "type": "suggestion",
        "docs": {
          "description": "require spread operators instead of `.apply()`",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/prefer-spread"
        },
        "schema": [],
        "fixable": null,
        "messages": {
          "preferSpread": "Use the spread operator instead of '.apply()'."
        }
      },
      "prefer-template": {
        "type": "suggestion",
        "docs": {
          "description": "require template literals instead of string concatenation",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/prefer-template"
        },
        "schema": [],
        "fixable": "code",
        "messages": {
          "unexpectedStringConcatenation": "Unexpected string concatenation."
        }
      },
      "quote-props": {
        "type": "suggestion",
        "docs": {
          "description": "require quotes around object literal property names",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/quote-props"
        },
        "schema": {
          "anyOf": [
            {
              "type": "array",
              "items": [
                {
                  "enum": [
                    "always",
                    "as-needed",
                    "consistent",
                    "consistent-as-needed"
                  ]
                }
              ],
              "minItems": 0,
              "maxItems": 1
            },
            {
              "type": "array",
              "items": [
                {
                  "enum": [
                    "always",
                    "as-needed",
                    "consistent",
                    "consistent-as-needed"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "keywords": { "type": "boolean" },
                    "unnecessary": { "type": "boolean" },
                    "numbers": { "type": "boolean" }
                  },
                  "additionalProperties": false
                }
              ],
              "minItems": 0,
              "maxItems": 2
            }
          ]
        },
        "fixable": "code",
        "messages": {
          "requireQuotesDueToReservedWord": "Properties should be quoted as '{{property}}' is a reserved word.",
          "inconsistentlyQuotedProperty": "Inconsistently quoted property '{{key}}' found.",
          "unnecessarilyQuotedProperty": "Unnecessarily quoted property '{{property}}' found.",
          "unquotedReservedProperty": "Unquoted reserved word '{{property}}' used as key.",
          "unquotedNumericProperty": "Unquoted number literal '{{property}}' used as key.",
          "unquotedPropertyFound": "Unquoted property '{{property}}' found.",
          "redundantQuoting": "Properties shouldn't be quoted as all quotes are redundant."
        }
      },
      "quotes": {
        "type": "layout",
        "docs": {
          "description": "enforce the consistent use of either backticks, double, or single quotes",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/quotes"
        },
        "fixable": "code",
        "schema": [
          { "enum": ["single", "double", "backtick"] },
          {
            "anyOf": [
              { "enum": ["avoid-escape"] },
              {
                "type": "object",
                "properties": {
                  "avoidEscape": { "type": "boolean" },
                  "allowTemplateLiterals": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ],
        "messages": {
          "wrongQuotes": "Strings must use {{description}}."
        }
      },
      "radix": {
        "type": "suggestion",
        "docs": {
          "description": "enforce the consistent use of the radix argument when using `parseInt()`",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/radix"
        },
        "schema": [{ "enum": ["always", "as-needed"] }],
        "messages": {
          "missingParameters": "Missing parameters.",
          "redundantRadix": "Redundant radix parameter.",
          "missingRadix": "Missing radix parameter.",
          "invalidRadix": "Invalid radix parameter, must be an integer between 2 and 36."
        }
      },
      "require-atomic-updates": {
        "type": "problem",
        "docs": {
          "description": "disallow assignments that can lead to race conditions due to usage of `await` or `yield`",
          "category": "Possible Errors",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/require-atomic-updates"
        },
        "fixable": null,
        "schema": [],
        "messages": {
          "nonAtomicUpdate": "Possible race condition: `{{value}}` might be reassigned based on an outdated value of `{{value}}`."
        }
      },
      "require-await": {
        "type": "suggestion",
        "docs": {
          "description": "disallow async functions which have no `await` expression",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/require-await"
        },
        "schema": [],
        "messages": {
          "missingAwait": "{{name}} has no 'await' expression."
        }
      },
      "require-jsdoc": {
        "type": "suggestion",
        "docs": {
          "description": "require JSDoc comments",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/require-jsdoc"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "require": {
                "type": "object",
                "properties": {
                  "ClassDeclaration": {
                    "type": "boolean",
                    "default": false
                  },
                  "MethodDefinition": {
                    "type": "boolean",
                    "default": false
                  },
                  "FunctionDeclaration": {
                    "type": "boolean",
                    "default": true
                  },
                  "ArrowFunctionExpression": {
                    "type": "boolean",
                    "default": false
                  },
                  "FunctionExpression": {
                    "type": "boolean",
                    "default": false
                  }
                },
                "additionalProperties": false,
                "default": {}
              }
            },
            "additionalProperties": false
          }
        ],
        "deprecated": true,
        "replacedBy": [],
        "messages": { "missingJSDocComment": "Missing JSDoc comment." }
      },
      "require-unicode-regexp": {
        "type": "suggestion",
        "docs": {
          "description": "enforce the use of `u` flag on RegExp",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/require-unicode-regexp"
        },
        "messages": { "requireUFlag": "Use the 'u' flag." },
        "schema": []
      },
      "require-yield": {
        "type": "suggestion",
        "docs": {
          "description": "require generator functions to contain `yield`",
          "category": "ECMAScript 6",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/require-yield"
        },
        "schema": [],
        "messages": {
          "missingYield": "This generator function does not have 'yield'."
        }
      },
      "rest-spread-spacing": {
        "type": "layout",
        "docs": {
          "description": "enforce spacing between rest and spread operators and their expressions",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/rest-spread-spacing"
        },
        "fixable": "whitespace",
        "schema": [{ "enum": ["always", "never"] }],
        "messages": {
          "unexpectedWhitespace": "Unexpected whitespace after {{type}} operator.",
          "expectedWhitespace": "Expected whitespace after {{type}} operator."
        }
      },
      "semi": {
        "type": "layout",
        "docs": {
          "description": "require or disallow semicolons instead of ASI",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/semi"
        },
        "fixable": "code",
        "schema": {
          "anyOf": [
            {
              "type": "array",
              "items": [
                { "enum": ["never"] },
                {
                  "type": "object",
                  "properties": {
                    "beforeStatementContinuationChars": {
                      "enum": ["always", "any", "never"]
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "minItems": 0,
              "maxItems": 2
            },
            {
              "type": "array",
              "items": [
                { "enum": ["always"] },
                {
                  "type": "object",
                  "properties": {
                    "omitLastInOneLineBlock": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ],
              "minItems": 0,
              "maxItems": 2
            }
          ]
        },
        "messages": {
          "missingSemi": "Missing semicolon.",
          "extraSemi": "Extra semicolon."
        }
      },
      "semi-spacing": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent spacing before and after semicolons",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/semi-spacing"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "type": "object",
            "properties": {
              "before": { "type": "boolean", "default": false },
              "after": { "type": "boolean", "default": true }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "unexpectedWhitespaceBefore": "Unexpected whitespace before semicolon.",
          "unexpectedWhitespaceAfter": "Unexpected whitespace after semicolon.",
          "missingWhitespaceBefore": "Missing whitespace before semicolon.",
          "missingWhitespaceAfter": "Missing whitespace after semicolon."
        }
      },
      "semi-style": {
        "type": "layout",
        "docs": {
          "description": "enforce location of semicolons",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/semi-style"
        },
        "schema": [{ "enum": ["last", "first"] }],
        "fixable": "whitespace",
        "messages": {
          "expectedSemiColon": "Expected this semicolon to be at {{pos}}."
        }
      },
      "sort-imports": {
        "type": "suggestion",
        "docs": {
          "description": "enforce sorted import declarations within modules",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/sort-imports"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "ignoreCase": {
                "type": "boolean",
                "default": false
              },
              "memberSyntaxSortOrder": {
                "type": "array",
                "items": {
                  "enum": ["none", "all", "multiple", "single"]
                },
                "uniqueItems": true,
                "minItems": 4,
                "maxItems": 4
              },
              "ignoreDeclarationSort": {
                "type": "boolean",
                "default": false
              },
              "ignoreMemberSort": {
                "type": "boolean",
                "default": false
              },
              "allowSeparatedGroups": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "fixable": "code",
        "messages": {
          "sortImportsAlphabetically": "Imports should be sorted alphabetically.",
          "sortMembersAlphabetically": "Member '{{memberName}}' of the import declaration should be sorted alphabetically.",
          "unexpectedSyntaxOrder": "Expected '{{syntaxA}}' syntax before '{{syntaxB}}' syntax."
        }
      },
      "sort-keys": {
        "type": "suggestion",
        "docs": {
          "description": "require object keys to be sorted",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/sort-keys"
        },
        "schema": [
          { "enum": ["asc", "desc"] },
          {
            "type": "object",
            "properties": {
              "caseSensitive": {
                "type": "boolean",
                "default": true
              },
              "natural": { "type": "boolean", "default": false },
              "minKeys": {
                "type": "integer",
                "minimum": 2,
                "default": 2
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "sortKeys": "Expected object keys to be in {{natural}}{{insensitive}}{{order}}ending order. '{{thisName}}' should be before '{{prevName}}'."
        }
      },
      "sort-vars": {
        "type": "suggestion",
        "docs": {
          "description": "require variables within the same declaration block to be sorted",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/sort-vars"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "ignoreCase": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "fixable": "code",
        "messages": {
          "sortVars": "Variables within the same declaration block should be sorted alphabetically."
        }
      },
      "space-before-blocks": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent spacing before blocks",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/space-before-blocks"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "oneOf": [
              { "enum": ["always", "never"] },
              {
                "type": "object",
                "properties": {
                  "keywords": {
                    "enum": ["always", "never", "off"]
                  },
                  "functions": {
                    "enum": ["always", "never", "off"]
                  },
                  "classes": {
                    "enum": ["always", "never", "off"]
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ],
        "messages": {
          "unexpectedSpace": "Unexpected space before opening brace.",
          "missingSpace": "Missing space before opening brace."
        }
      },
      "space-before-function-paren": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent spacing before `function` definition opening parenthesis",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/space-before-function-paren"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "oneOf": [
              { "enum": ["always", "never"] },
              {
                "type": "object",
                "properties": {
                  "anonymous": {
                    "enum": ["always", "never", "ignore"]
                  },
                  "named": {
                    "enum": ["always", "never", "ignore"]
                  },
                  "asyncArrow": {
                    "enum": ["always", "never", "ignore"]
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ],
        "messages": {
          "unexpectedSpace": "Unexpected space before function parentheses.",
          "missingSpace": "Missing space before function parentheses."
        }
      },
      "space-in-parens": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent spacing inside parentheses",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/space-in-parens"
        },
        "fixable": "whitespace",
        "schema": [
          { "enum": ["always", "never"] },
          {
            "type": "object",
            "properties": {
              "exceptions": {
                "type": "array",
                "items": {
                  "enum": ["{}", "[]", "()", "empty"]
                },
                "uniqueItems": true
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "missingOpeningSpace": "There must be a space after this paren.",
          "missingClosingSpace": "There must be a space before this paren.",
          "rejectedOpeningSpace": "There should be no space after this paren.",
          "rejectedClosingSpace": "There should be no space before this paren."
        }
      },
      "space-infix-ops": {
        "type": "layout",
        "docs": {
          "description": "require spacing around infix operators",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/space-infix-ops"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "type": "object",
            "properties": {
              "int32Hint": { "type": "boolean", "default": false }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "missingSpace": "Operator '{{operator}}' must be spaced."
        }
      },
      "space-unary-ops": {
        "type": "layout",
        "docs": {
          "description": "enforce consistent spacing before or after unary operators",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/space-unary-ops"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "type": "object",
            "properties": {
              "words": { "type": "boolean", "default": true },
              "nonwords": { "type": "boolean", "default": false },
              "overrides": {
                "type": "object",
                "additionalProperties": { "type": "boolean" }
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "unexpectedBefore": "Unexpected space before unary operator '{{operator}}'.",
          "unexpectedAfter": "Unexpected space after unary operator '{{operator}}'.",
          "unexpectedAfterWord": "Unexpected space after unary word operator '{{word}}'.",
          "wordOperator": "Unary word operator '{{word}}' must be followed by whitespace.",
          "operator": "Unary operator '{{operator}}' must be followed by whitespace.",
          "beforeUnaryExpressions": "Space is required before unary expressions '{{token}}'."
        }
      },
      "spaced-comment": {
        "type": "suggestion",
        "docs": {
          "description": "enforce consistent spacing after the `//` or `/*` in a comment",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/spaced-comment"
        },
        "fixable": "whitespace",
        "schema": [
          { "enum": ["always", "never"] },
          {
            "type": "object",
            "properties": {
              "exceptions": {
                "type": "array",
                "items": { "type": "string" }
              },
              "markers": {
                "type": "array",
                "items": { "type": "string" }
              },
              "line": {
                "type": "object",
                "properties": {
                  "exceptions": {
                    "type": "array",
                    "items": { "type": "string" }
                  },
                  "markers": {
                    "type": "array",
                    "items": { "type": "string" }
                  }
                },
                "additionalProperties": false
              },
              "block": {
                "type": "object",
                "properties": {
                  "exceptions": {
                    "type": "array",
                    "items": { "type": "string" }
                  },
                  "markers": {
                    "type": "array",
                    "items": { "type": "string" }
                  },
                  "balanced": {
                    "type": "boolean",
                    "default": false
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "unexpectedSpaceAfterMarker": "Unexpected space or tab after marker ({{refChar}}) in comment.",
          "expectedExceptionAfter": "Expected exception block, space or tab after '{{refChar}}' in comment.",
          "unexpectedSpaceBefore": "Unexpected space or tab before '*/' in comment.",
          "unexpectedSpaceAfter": "Unexpected space or tab after '{{refChar}}' in comment.",
          "expectedSpaceBefore": "Expected space or tab before '*/' in comment.",
          "expectedSpaceAfter": "Expected space or tab after '{{refChar}}' in comment."
        }
      },
      "strict": {
        "type": "suggestion",
        "docs": {
          "description": "require or disallow strict mode directives",
          "category": "Strict Mode",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/strict"
        },
        "schema": [{ "enum": ["never", "global", "function", "safe"] }],
        "fixable": "code",
        "messages": {
          "function": "Use the function form of 'use strict'.",
          "global": "Use the global form of 'use strict'.",
          "multiple": "Multiple 'use strict' directives.",
          "never": "Strict mode is not permitted.",
          "unnecessary": "Unnecessary 'use strict' directive.",
          "module": "'use strict' is unnecessary inside of modules.",
          "implied": "'use strict' is unnecessary when implied strict mode is enabled.",
          "unnecessaryInClasses": "'use strict' is unnecessary inside of classes.",
          "nonSimpleParameterList": "'use strict' directive inside a function with non-simple parameter list throws a syntax error since ES2016.",
          "wrap": "Wrap {{name}} in a function with 'use strict' directive."
        }
      },
      "switch-colon-spacing": {
        "type": "layout",
        "docs": {
          "description": "enforce spacing around colons of switch statements",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/switch-colon-spacing"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "before": { "type": "boolean", "default": false },
              "after": { "type": "boolean", "default": true }
            },
            "additionalProperties": false
          }
        ],
        "fixable": "whitespace",
        "messages": {
          "expectedBefore": "Expected space(s) before this colon.",
          "expectedAfter": "Expected space(s) after this colon.",
          "unexpectedBefore": "Unexpected space(s) before this colon.",
          "unexpectedAfter": "Unexpected space(s) after this colon."
        }
      },
      "symbol-description": {
        "type": "suggestion",
        "docs": {
          "description": "require symbol descriptions",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/symbol-description"
        },
        "fixable": null,
        "schema": [],
        "messages": {
          "expected": "Expected Symbol to have a description."
        }
      },
      "template-curly-spacing": {
        "type": "layout",
        "docs": {
          "description": "require or disallow spacing around embedded expressions of template strings",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/template-curly-spacing"
        },
        "fixable": "whitespace",
        "schema": [{ "enum": ["always", "never"] }],
        "messages": {
          "expectedBefore": "Expected space(s) before '}'.",
          "expectedAfter": "Expected space(s) after '${'.",
          "unexpectedBefore": "Unexpected space(s) before '}'.",
          "unexpectedAfter": "Unexpected space(s) after '${'."
        }
      },
      "template-tag-spacing": {
        "type": "layout",
        "docs": {
          "description": "require or disallow spacing between template tags and their literals",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/template-tag-spacing"
        },
        "fixable": "whitespace",
        "schema": [{ "enum": ["always", "never"] }],
        "messages": {
          "unexpected": "Unexpected space between template tag and template literal.",
          "missing": "Missing space between template tag and template literal."
        }
      },
      "unicode-bom": {
        "type": "layout",
        "docs": {
          "description": "require or disallow Unicode byte order mark (BOM)",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/unicode-bom"
        },
        "fixable": "whitespace",
        "schema": [{ "enum": ["always", "never"] }],
        "messages": {
          "expected": "Expected Unicode BOM (Byte Order Mark).",
          "unexpected": "Unexpected Unicode BOM (Byte Order Mark)."
        }
      },
      "use-isnan": {
        "type": "problem",
        "docs": {
          "description": "require calls to `isNaN()` when checking for `NaN`",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/use-isnan"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "enforceForSwitchCase": {
                "type": "boolean",
                "default": true
              },
              "enforceForIndexOf": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "comparisonWithNaN": "Use the isNaN function to compare with NaN.",
          "switchNaN": "'switch(NaN)' can never match a case clause. Use Number.isNaN instead of the switch.",
          "caseNaN": "'case NaN' can never match. Use Number.isNaN before the switch.",
          "indexOfNaN": "Array prototype method '{{ methodName }}' cannot find NaN."
        }
      },
      "valid-jsdoc": {
        "type": "suggestion",
        "docs": {
          "description": "enforce valid JSDoc comments",
          "category": "Possible Errors",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/valid-jsdoc"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "prefer": {
                "type": "object",
                "additionalProperties": { "type": "string" }
              },
              "preferType": {
                "type": "object",
                "additionalProperties": { "type": "string" }
              },
              "requireReturn": {
                "type": "boolean",
                "default": true
              },
              "requireParamDescription": {
                "type": "boolean",
                "default": true
              },
              "requireReturnDescription": {
                "type": "boolean",
                "default": true
              },
              "matchDescription": { "type": "string" },
              "requireReturnType": {
                "type": "boolean",
                "default": true
              },
              "requireParamType": {
                "type": "boolean",
                "default": true
              }
            },
            "additionalProperties": false
          }
        ],
        "fixable": "code",
        "messages": {
          "unexpectedTag": "Unexpected @{{title}} tag; function has no return statement.",
          "expected": "Expected JSDoc for '{{name}}' but found '{{jsdocName}}'.",
          "use": "Use @{{name}} instead.",
          "useType": "Use '{{expectedTypeName}}' instead of '{{currentTypeName}}'.",
          "syntaxError": "JSDoc syntax error.",
          "missingBrace": "JSDoc type missing brace.",
          "missingParamDesc": "Missing JSDoc parameter description for '{{name}}'.",
          "missingParamType": "Missing JSDoc parameter type for '{{name}}'.",
          "missingReturnType": "Missing JSDoc return type.",
          "missingReturnDesc": "Missing JSDoc return description.",
          "missingReturn": "Missing JSDoc @{{returns}} for function.",
          "missingParam": "Missing JSDoc for parameter '{{name}}'.",
          "duplicateParam": "Duplicate JSDoc parameter '{{name}}'.",
          "unsatisfiedDesc": "JSDoc description does not satisfy the regex pattern."
        },
        "deprecated": true,
        "replacedBy": []
      },
      "valid-typeof": {
        "type": "problem",
        "docs": {
          "description": "enforce comparing `typeof` expressions against valid strings",
          "category": "Possible Errors",
          "recommended": true,
          "url": "https://eslint.org/docs/rules/valid-typeof"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "requireStringLiterals": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "invalidValue": "Invalid typeof comparison value.",
          "notString": "Typeof comparisons should be to string literals."
        }
      },
      "vars-on-top": {
        "type": "suggestion",
        "docs": {
          "description": "require `var` declarations be placed at the top of their containing scope",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/vars-on-top"
        },
        "schema": [],
        "messages": {
          "top": "All 'var' declarations must be at the top of the function scope."
        }
      },
      "wrap-iife": {
        "type": "layout",
        "docs": {
          "description": "require parentheses around immediate `function` invocations",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/wrap-iife"
        },
        "schema": [
          { "enum": ["outside", "inside", "any"] },
          {
            "type": "object",
            "properties": {
              "functionPrototypeMethods": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "fixable": "code",
        "messages": {
          "wrapInvocation": "Wrap an immediate function invocation in parentheses.",
          "wrapExpression": "Wrap only the function expression in parens.",
          "moveInvocation": "Move the invocation into the parens that contain the function."
        }
      },
      "wrap-regex": {
        "type": "layout",
        "docs": {
          "description": "require parenthesis around regex literals",
          "category": "Stylistic Issues",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/wrap-regex"
        },
        "schema": [],
        "fixable": "code",
        "messages": {
          "requireParens": "Wrap the regexp literal in parens to disambiguate the slash."
        }
      },
      "yield-star-spacing": {
        "type": "layout",
        "docs": {
          "description": "require or disallow spacing around the `*` in `yield*` expressions",
          "category": "ECMAScript 6",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/yield-star-spacing"
        },
        "fixable": "whitespace",
        "schema": [
          {
            "oneOf": [
              { "enum": ["before", "after", "both", "neither"] },
              {
                "type": "object",
                "properties": {
                  "before": { "type": "boolean" },
                  "after": { "type": "boolean" }
                },
                "additionalProperties": false
              }
            ]
          }
        ],
        "messages": {
          "missingBefore": "Missing space before *.",
          "missingAfter": "Missing space after *.",
          "unexpectedBefore": "Unexpected space before *.",
          "unexpectedAfter": "Unexpected space after *."
        }
      },
      "yoda": {
        "type": "suggestion",
        "docs": {
          "description": "require or disallow \"Yoda\" conditions",
          "category": "Best Practices",
          "recommended": false,
          "url": "https://eslint.org/docs/rules/yoda"
        },
        "schema": [
          { "enum": ["always", "never"] },
          {
            "type": "object",
            "properties": {
              "exceptRange": {
                "type": "boolean",
                "default": false
              },
              "onlyEquality": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "fixable": "code",
        "messages": {
          "expected": "Expected literal to be on the {{expectedSide}} side of {{operator}}."
        }
      },
      "compat/compat": {
        "docs": {
          "description": "Ensure cross-browser API compatibility",
          "category": "Compatibility",
          "url": "https://github.com/amilajack/eslint-plugin-compat/blob/master/docs/rules/compat.md",
          "recommended": true
        },
        "type": "problem",
        "schema": [{ "type": "string" }]
      },
      "@applitools/compat/no-async-await": {
        "docs": {
          "description": "disallow usage of the async-await syntax",
          "category": "Compat",
          "url": "https://github.com/applitools/eslint-plugin-compat.git/blob/0.7.0/docs/rules/no-async-await.md"
        },
        "schema": []
      },
      "@applitools/compat/no-for-of": {
        "docs": {
          "description": "disallow usage of the for-of syntax",
          "category": "Compat",
          "url": "https://github.com/applitools/eslint-plugin-compat.git/blob/0.7.0/docs/rules/no-for-of.md"
        },
        "schema": []
      },
      "@applitools/compat/no-rest-spread-parameter": {
        "docs": {
          "description": "disallow usage of the rest parameter syntax",
          "category": "Compat",
          "url": "https://github.com/applitools/eslint-plugin-compat.git/blob/0.7.0/docs/rules/no-rest-spread-parameter.md"
        },
        "schema": []
      }
    }
  }
}
